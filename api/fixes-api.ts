/* tslint:disable */
/* eslint-disable */
/**
 * Mosquito Alert API
 * Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.
 *
 * The version of the OpenAPI document: v1
 * Contact: it@mosquitoalert.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse401 } from '../models';
// @ts-ignore
import type { ErrorResponse403 } from '../models';
// @ts-ignore
import type { ErrorResponse404 } from '../models';
// @ts-ignore
import type { Fix } from '../models';
// @ts-ignore
import type { FixRequest } from '../models';
// @ts-ignore
import type { FixesCreateValidationError } from '../models';
/**
 * FixesApi - axios parameter creator
 */
export const FixesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FixRequest} fixRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (fixRequest: FixRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fixRequest' is not null or undefined
            assertParamExists('create', 'fixRequest', fixRequest)
            const localVarPath = `/fixes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fixRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FixesApi - functional programming interface
 */
export const FixesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FixesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FixRequest} fixRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(fixRequest: FixRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fix>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(fixRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FixesApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FixesApi - factory interface
 */
export const FixesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FixesApiFp(configuration)
    return {
        /**
         * 
         * @param {FixesApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: FixesApiCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Fix> {
            return localVarFp.create(requestParameters.fixRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in FixesApi.
 */
export interface FixesApiCreateRequest {
    readonly fixRequest: FixRequest
}

/**
 * FixesApi - object-oriented interface
 */
export class FixesApi extends BaseAPI {
    /**
     * 
     * @param {FixesApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public create(requestParameters: FixesApiCreateRequest, options?: RawAxiosRequestConfig) {
        return FixesApiFp(this.configuration).create(requestParameters.fixRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

