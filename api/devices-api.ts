/* tslint:disable */
/* eslint-disable */
/**
 * Mosquito Alert API
 * Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.
 *
 * The version of the OpenAPI document: v1
 * Contact: it@mosquitoalert.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// URLSearchParams not necessarily used
// @ts-ignore
import { URL, URLSearchParams } from 'url';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Device } from '../models';
// @ts-ignore
import type { DeviceRequest } from '../models';
// @ts-ignore
import type { DeviceUpdate } from '../models';
// @ts-ignore
import type { DeviceUpdateRequest } from '../models';
// @ts-ignore
import type { DevicesCreateValidationError } from '../models';
// @ts-ignore
import type { DevicesPartialUpdateValidationError } from '../models';
// @ts-ignore
import type { DevicesUpdateValidationError } from '../models';
// @ts-ignore
import type { ErrorResponse401 } from '../models';
// @ts-ignore
import type { ErrorResponse403 } from '../models';
// @ts-ignore
import type { ErrorResponse404 } from '../models';
// @ts-ignore
import type { PatchedDeviceUpdateRequest } from '../models';
/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeviceRequest} deviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (deviceRequest: DeviceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceRequest' is not null or undefined
            assertParamExists('create', 'deviceRequest', deviceRequest)
            const localVarPath = `/devices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {PatchedDeviceUpdateRequest} [patchedDeviceUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdate: async (deviceId: string, patchedDeviceUpdateRequest?: PatchedDeviceUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('partialUpdate', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedDeviceUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (deviceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('retrieve', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceUpdateRequest} deviceUpdateRequest 
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (deviceUpdateRequest: DeviceUpdateRequest, deviceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceUpdateRequest' is not null or undefined
            assertParamExists('update', 'deviceUpdateRequest', deviceUpdateRequest)
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('update', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeviceRequest} deviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(deviceRequest: DeviceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(deviceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {PatchedDeviceUpdateRequest} [patchedDeviceUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdate(deviceId: string, patchedDeviceUpdateRequest?: PatchedDeviceUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdate(deviceId, patchedDeviceUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.partialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(deviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeviceUpdateRequest} deviceUpdateRequest 
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(deviceUpdateRequest: DeviceUpdateRequest, deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(deviceUpdateRequest, deviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.update']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevicesApiFp(configuration)
    return {
        /**
         * 
         * @param {DevicesApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: DevicesApiCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Device> {
            return localVarFp.create(requestParameters.deviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DevicesApiPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdate(requestParameters: DevicesApiPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceUpdate> {
            return localVarFp.partialUpdate(requestParameters.deviceId, requestParameters.patchedDeviceUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DevicesApiRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(requestParameters: DevicesApiRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Device> {
            return localVarFp.retrieve(requestParameters.deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DevicesApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: DevicesApiUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceUpdate> {
            return localVarFp.update(requestParameters.deviceUpdateRequest, requestParameters.deviceId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevicesApi - interface
 * @export
 * @interface DevicesApi
 */
export interface DevicesApiInterface {
    /**
     * 
     * @param {DevicesApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    create(requestParameters: DevicesApiCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Device>;

    /**
     * 
     * @param {DevicesApiPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    partialUpdate(requestParameters: DevicesApiPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceUpdate>;

    /**
     * 
     * @param {DevicesApiRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    retrieve(requestParameters: DevicesApiRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<Device>;

    /**
     * 
     * @param {DevicesApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApiInterface
     */
    update(requestParameters: DevicesApiUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceUpdate>;

}

/**
 * Request parameters for create operation in DevicesApi.
 * @export
 * @interface DevicesApiCreateRequest
 */
export interface DevicesApiCreateRequest {
    /**
     * 
     * @type {DeviceRequest}
     * @memberof DevicesApiCreate
     */
    readonly deviceRequest: DeviceRequest
}

/**
 * Request parameters for partialUpdate operation in DevicesApi.
 * @export
 * @interface DevicesApiPartialUpdateRequest
 */
export interface DevicesApiPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof DevicesApiPartialUpdate
     */
    readonly deviceId: string

    /**
     * 
     * @type {PatchedDeviceUpdateRequest}
     * @memberof DevicesApiPartialUpdate
     */
    readonly patchedDeviceUpdateRequest?: PatchedDeviceUpdateRequest
}

/**
 * Request parameters for retrieve operation in DevicesApi.
 * @export
 * @interface DevicesApiRetrieveRequest
 */
export interface DevicesApiRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof DevicesApiRetrieve
     */
    readonly deviceId: string
}

/**
 * Request parameters for update operation in DevicesApi.
 * @export
 * @interface DevicesApiUpdateRequest
 */
export interface DevicesApiUpdateRequest {
    /**
     * 
     * @type {DeviceUpdateRequest}
     * @memberof DevicesApiUpdate
     */
    readonly deviceUpdateRequest: DeviceUpdateRequest

    /**
     * 
     * @type {string}
     * @memberof DevicesApiUpdate
     */
    readonly deviceId: string
}

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI implements DevicesApiInterface {
    /**
     * 
     * @param {DevicesApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public create(requestParameters: DevicesApiCreateRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).create(requestParameters.deviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DevicesApiPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public partialUpdate(requestParameters: DevicesApiPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).partialUpdate(requestParameters.deviceId, requestParameters.patchedDeviceUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DevicesApiRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public retrieve(requestParameters: DevicesApiRetrieveRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).retrieve(requestParameters.deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DevicesApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public update(requestParameters: DevicesApiUpdateRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).update(requestParameters.deviceUpdateRequest, requestParameters.deviceId, options).then((request) => request(this.axios, this.basePath));
    }
}

