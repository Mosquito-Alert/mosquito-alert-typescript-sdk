/* tslint:disable */
/* eslint-disable */
/**
 * Mosquito Alert API
 * Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.
 *
 * The version of the OpenAPI document: v1
 * Contact: it@mosquitoalert.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BitesListOrderByParameter } from '../models';
// @ts-ignore
import type { BreedingSite } from '../models';
// @ts-ignore
import type { BreedingSiteSiteType } from '../models';
// @ts-ignore
import type { BreedingsitesCreateValidationError } from '../models';
// @ts-ignore
import type { BreedingsitesListMineValidationError } from '../models';
// @ts-ignore
import type { BreedingsitesListValidationError } from '../models';
// @ts-ignore
import type { ErrorResponse401 } from '../models';
// @ts-ignore
import type { ErrorResponse403 } from '../models';
// @ts-ignore
import type { ErrorResponse404 } from '../models';
// @ts-ignore
import type { LocationRequest } from '../models';
// @ts-ignore
import type { PaginatedBreedingSiteList } from '../models';
// @ts-ignore
import type { SimplePhotoRequest } from '../models';
/**
 * BreedingSitesApi - axios parameter creator
 * @export
 */
export const BreedingSitesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} createdAt 
         * @param {string} sentAt 
         * @param {LocationRequest} location 
         * @param {Array<SimplePhotoRequest>} photos 
         * @param {string | null} [note] Note user attached to report.
         * @param {Array<string>} [tags] 
         * @param {BreedingSiteSiteType} [siteType] 
         * @param {boolean | null} [hasWater] Either if the user perceived water in the breeding site.
         * @param {boolean | null} [inPublicArea] Either if the breeding site is found in a public area.
         * @param {boolean | null} [hasNearMosquitoes] Either if the user perceived mosquitoes near the breeding site (less than 10 meters).
         * @param {boolean | null} [hasLarvae] Either if the user perceived larvaes the breeding site.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createdAt: string, sentAt: string, location: LocationRequest, photos: Array<SimplePhotoRequest>, note?: string | null, tags?: Array<string>, siteType?: BreedingSiteSiteType, hasWater?: boolean | null, inPublicArea?: boolean | null, hasNearMosquitoes?: boolean | null, hasLarvae?: boolean | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createdAt' is not null or undefined
            assertParamExists('create', 'createdAt', createdAt)
            // verify required parameter 'sentAt' is not null or undefined
            assertParamExists('create', 'sentAt', sentAt)
            // verify required parameter 'location' is not null or undefined
            assertParamExists('create', 'location', location)
            // verify required parameter 'photos' is not null or undefined
            assertParamExists('create', 'photos', photos)
            const localVarPath = `/breeding-sites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (createdAt !== undefined) { 
                localVarFormParams.append('created_at', createdAt as any);
            }
    
            if (sentAt !== undefined) { 
                localVarFormParams.append('sent_at', sentAt as any);
            }
    
            if (location !== undefined) { 
                localVarFormParams.append('location', new Blob([JSON.stringify(location)], { type: "application/json", }));
            }
    
            if (note !== undefined) { 
                localVarFormParams.append('note', note as any);
            }
                if (tags) {
                localVarFormParams.append('tags', tags.join(COLLECTION_FORMATS.csv));
            }

                if (photos) {
                localVarFormParams.append('photos', photos.join(COLLECTION_FORMATS.csv));
            }

    
            if (siteType !== undefined) { 
                localVarFormParams.append('site_type', siteType as any);
            }
    
            if (hasWater !== undefined) { 
                localVarFormParams.append('has_water', String(hasWater) as any);
            }
    
            if (inPublicArea !== undefined) { 
                localVarFormParams.append('in_public_area', String(inPublicArea) as any);
            }
    
            if (hasNearMosquitoes !== undefined) { 
                localVarFormParams.append('has_near_mosquitoes', String(hasNearMosquitoes) as any);
            }
    
            if (hasLarvae !== undefined) { 
                localVarFormParams.append('has_larvae', String(hasLarvae) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroy: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('destroy', 'uuid', uuid)
            const localVarPath = `/breeding-sites/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number | null} [countryId] 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {Array<BitesListOrderByParameter>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (countryId?: number | null, createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, orderBy?: Array<BitesListOrderByParameter>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/breeding-sites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (countryId !== undefined) {
                localVarQueryParameter['country_id'] = countryId;
            }

            if (createdAtAfter !== undefined) {
                localVarQueryParameter['created_at_after'] = (createdAtAfter as any instanceof Date) ?
                    (createdAtAfter as any).toISOString() :
                    createdAtAfter;
            }

            if (createdAtBefore !== undefined) {
                localVarQueryParameter['created_at_before'] = (createdAtBefore as any instanceof Date) ?
                    (createdAtBefore as any).toISOString() :
                    createdAtBefore;
            }

            if (hasPhotos !== undefined) {
                localVarQueryParameter['has_photos'] = hasPhotos;
            }

            if (orderBy) {
                localVarQueryParameter['order_by'] = orderBy.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (receivedAtAfter !== undefined) {
                localVarQueryParameter['received_at_after'] = (receivedAtAfter as any instanceof Date) ?
                    (receivedAtAfter as any).toISOString() :
                    receivedAtAfter;
            }

            if (receivedAtBefore !== undefined) {
                localVarQueryParameter['received_at_before'] = (receivedAtBefore as any instanceof Date) ?
                    (receivedAtBefore as any).toISOString() :
                    receivedAtBefore;
            }

            if (shortId !== undefined) {
                localVarQueryParameter['short_id'] = shortId;
            }

            if (updatedAtAfter !== undefined) {
                localVarQueryParameter['updated_at_after'] = (updatedAtAfter as any instanceof Date) ?
                    (updatedAtAfter as any).toISOString() :
                    updatedAtAfter;
            }

            if (updatedAtBefore !== undefined) {
                localVarQueryParameter['updated_at_before'] = (updatedAtBefore as any instanceof Date) ?
                    (updatedAtBefore as any).toISOString() :
                    updatedAtBefore;
            }

            if (userUuid !== undefined) {
                localVarQueryParameter['user_uuid'] = userUuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Current User\'s Breeding Sites
         * @param {number | null} [countryId] 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {Array<BitesListOrderByParameter>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMine: async (countryId?: number | null, createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, orderBy?: Array<BitesListOrderByParameter>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/breeding-sites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (countryId !== undefined) {
                localVarQueryParameter['country_id'] = countryId;
            }

            if (createdAtAfter !== undefined) {
                localVarQueryParameter['created_at_after'] = (createdAtAfter as any instanceof Date) ?
                    (createdAtAfter as any).toISOString() :
                    createdAtAfter;
            }

            if (createdAtBefore !== undefined) {
                localVarQueryParameter['created_at_before'] = (createdAtBefore as any instanceof Date) ?
                    (createdAtBefore as any).toISOString() :
                    createdAtBefore;
            }

            if (hasPhotos !== undefined) {
                localVarQueryParameter['has_photos'] = hasPhotos;
            }

            if (orderBy) {
                localVarQueryParameter['order_by'] = orderBy.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (receivedAtAfter !== undefined) {
                localVarQueryParameter['received_at_after'] = (receivedAtAfter as any instanceof Date) ?
                    (receivedAtAfter as any).toISOString() :
                    receivedAtAfter;
            }

            if (receivedAtBefore !== undefined) {
                localVarQueryParameter['received_at_before'] = (receivedAtBefore as any instanceof Date) ?
                    (receivedAtBefore as any).toISOString() :
                    receivedAtBefore;
            }

            if (shortId !== undefined) {
                localVarQueryParameter['short_id'] = shortId;
            }

            if (updatedAtAfter !== undefined) {
                localVarQueryParameter['updated_at_after'] = (updatedAtAfter as any instanceof Date) ?
                    (updatedAtAfter as any).toISOString() :
                    updatedAtAfter;
            }

            if (updatedAtBefore !== undefined) {
                localVarQueryParameter['updated_at_before'] = (updatedAtBefore as any instanceof Date) ?
                    (updatedAtBefore as any).toISOString() :
                    updatedAtBefore;
            }

            if (userUuid !== undefined) {
                localVarQueryParameter['user_uuid'] = userUuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('retrieve', 'uuid', uuid)
            const localVarPath = `/breeding-sites/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication cookieAuth required

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BreedingSitesApi - functional programming interface
 * @export
 */
export const BreedingSitesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BreedingSitesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} createdAt 
         * @param {string} sentAt 
         * @param {LocationRequest} location 
         * @param {Array<SimplePhotoRequest>} photos 
         * @param {string | null} [note] Note user attached to report.
         * @param {Array<string>} [tags] 
         * @param {BreedingSiteSiteType} [siteType] 
         * @param {boolean | null} [hasWater] Either if the user perceived water in the breeding site.
         * @param {boolean | null} [inPublicArea] Either if the breeding site is found in a public area.
         * @param {boolean | null} [hasNearMosquitoes] Either if the user perceived mosquitoes near the breeding site (less than 10 meters).
         * @param {boolean | null} [hasLarvae] Either if the user perceived larvaes the breeding site.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createdAt: string, sentAt: string, location: LocationRequest, photos: Array<SimplePhotoRequest>, note?: string | null, tags?: Array<string>, siteType?: BreedingSiteSiteType, hasWater?: boolean | null, inPublicArea?: boolean | null, hasNearMosquitoes?: boolean | null, hasLarvae?: boolean | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BreedingSite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createdAt, sentAt, location, photos, note, tags, siteType, hasWater, inPublicArea, hasNearMosquitoes, hasLarvae, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BreedingSitesApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroy(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroy(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BreedingSitesApi.destroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number | null} [countryId] 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {Array<BitesListOrderByParameter>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(countryId?: number | null, createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, orderBy?: Array<BitesListOrderByParameter>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBreedingSiteList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(countryId, createdAtAfter, createdAtBefore, hasPhotos, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BreedingSitesApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Current User\'s Breeding Sites
         * @param {number | null} [countryId] 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {Array<BitesListOrderByParameter>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMine(countryId?: number | null, createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, orderBy?: Array<BitesListOrderByParameter>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBreedingSiteList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMine(countryId, createdAtAfter, createdAtBefore, hasPhotos, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BreedingSitesApi.listMine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BreedingSite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BreedingSitesApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BreedingSitesApi - factory interface
 * @export
 */
export const BreedingSitesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BreedingSitesApiFp(configuration)
    return {
        /**
         * 
         * @param {BreedingSitesApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: BreedingSitesApiCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<BreedingSite> {
            return localVarFp.create(requestParameters.createdAt, requestParameters.sentAt, requestParameters.location, requestParameters.photos, requestParameters.note, requestParameters.tags, requestParameters.siteType, requestParameters.hasWater, requestParameters.inPublicArea, requestParameters.hasNearMosquitoes, requestParameters.hasLarvae, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BreedingSitesApiDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroy(requestParameters: BreedingSitesApiDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.destroy(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BreedingSitesApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: BreedingSitesApiListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedBreedingSiteList> {
            return localVarFp.list(requestParameters.countryId, requestParameters.createdAtAfter, requestParameters.createdAtBefore, requestParameters.hasPhotos, requestParameters.orderBy, requestParameters.page, requestParameters.pageSize, requestParameters.receivedAtAfter, requestParameters.receivedAtBefore, requestParameters.shortId, requestParameters.updatedAtAfter, requestParameters.updatedAtBefore, requestParameters.userUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Current User\'s Breeding Sites
         * @param {BreedingSitesApiListMineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMine(requestParameters: BreedingSitesApiListMineRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedBreedingSiteList> {
            return localVarFp.listMine(requestParameters.countryId, requestParameters.createdAtAfter, requestParameters.createdAtBefore, requestParameters.hasPhotos, requestParameters.orderBy, requestParameters.page, requestParameters.pageSize, requestParameters.receivedAtAfter, requestParameters.receivedAtBefore, requestParameters.shortId, requestParameters.updatedAtAfter, requestParameters.updatedAtBefore, requestParameters.userUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BreedingSitesApiRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(requestParameters: BreedingSitesApiRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<BreedingSite> {
            return localVarFp.retrieve(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in BreedingSitesApi.
 * @export
 * @interface BreedingSitesApiCreateRequest
 */
export interface BreedingSitesApiCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof BreedingSitesApiCreate
     */
    readonly createdAt: string

    /**
     * 
     * @type {string}
     * @memberof BreedingSitesApiCreate
     */
    readonly sentAt: string

    /**
     * 
     * @type {LocationRequest}
     * @memberof BreedingSitesApiCreate
     */
    readonly location: LocationRequest

    /**
     * 
     * @type {Array<SimplePhotoRequest>}
     * @memberof BreedingSitesApiCreate
     */
    readonly photos: Array<SimplePhotoRequest>

    /**
     * Note user attached to report.
     * @type {string}
     * @memberof BreedingSitesApiCreate
     */
    readonly note?: string | null

    /**
     * 
     * @type {Array<string>}
     * @memberof BreedingSitesApiCreate
     */
    readonly tags?: Array<string>

    /**
     * 
     * @type {BreedingSiteSiteType}
     * @memberof BreedingSitesApiCreate
     */
    readonly siteType?: BreedingSiteSiteType

    /**
     * Either if the user perceived water in the breeding site.
     * @type {boolean}
     * @memberof BreedingSitesApiCreate
     */
    readonly hasWater?: boolean | null

    /**
     * Either if the breeding site is found in a public area.
     * @type {boolean}
     * @memberof BreedingSitesApiCreate
     */
    readonly inPublicArea?: boolean | null

    /**
     * Either if the user perceived mosquitoes near the breeding site (less than 10 meters).
     * @type {boolean}
     * @memberof BreedingSitesApiCreate
     */
    readonly hasNearMosquitoes?: boolean | null

    /**
     * Either if the user perceived larvaes the breeding site.
     * @type {boolean}
     * @memberof BreedingSitesApiCreate
     */
    readonly hasLarvae?: boolean | null
}

/**
 * Request parameters for destroy operation in BreedingSitesApi.
 * @export
 * @interface BreedingSitesApiDestroyRequest
 */
export interface BreedingSitesApiDestroyRequest {
    /**
     * 
     * @type {string}
     * @memberof BreedingSitesApiDestroy
     */
    readonly uuid: string
}

/**
 * Request parameters for list operation in BreedingSitesApi.
 * @export
 * @interface BreedingSitesApiListRequest
 */
export interface BreedingSitesApiListRequest {
    /**
     * 
     * @type {number}
     * @memberof BreedingSitesApiList
     */
    readonly countryId?: number | null

    /**
     * Created at
     * @type {string}
     * @memberof BreedingSitesApiList
     */
    readonly createdAtAfter?: string

    /**
     * Created at
     * @type {string}
     * @memberof BreedingSitesApiList
     */
    readonly createdAtBefore?: string

    /**
     * Has any photo
     * @type {boolean}
     * @memberof BreedingSitesApiList
     */
    readonly hasPhotos?: boolean

    /**
     * Ordenado  
     * @type {Array<BitesListOrderByParameter>}
     * @memberof BreedingSitesApiList
     */
    readonly orderBy?: Array<BitesListOrderByParameter>

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof BreedingSitesApiList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof BreedingSitesApiList
     */
    readonly pageSize?: number

    /**
     * Received at
     * @type {string}
     * @memberof BreedingSitesApiList
     */
    readonly receivedAtAfter?: string

    /**
     * Received at
     * @type {string}
     * @memberof BreedingSitesApiList
     */
    readonly receivedAtBefore?: string

    /**
     * Short ID
     * @type {string}
     * @memberof BreedingSitesApiList
     */
    readonly shortId?: string

    /**
     * Update at
     * @type {string}
     * @memberof BreedingSitesApiList
     */
    readonly updatedAtAfter?: string

    /**
     * Update at
     * @type {string}
     * @memberof BreedingSitesApiList
     */
    readonly updatedAtBefore?: string

    /**
     * 
     * @type {string}
     * @memberof BreedingSitesApiList
     */
    readonly userUuid?: string
}

/**
 * Request parameters for listMine operation in BreedingSitesApi.
 * @export
 * @interface BreedingSitesApiListMineRequest
 */
export interface BreedingSitesApiListMineRequest {
    /**
     * 
     * @type {number}
     * @memberof BreedingSitesApiListMine
     */
    readonly countryId?: number | null

    /**
     * Created at
     * @type {string}
     * @memberof BreedingSitesApiListMine
     */
    readonly createdAtAfter?: string

    /**
     * Created at
     * @type {string}
     * @memberof BreedingSitesApiListMine
     */
    readonly createdAtBefore?: string

    /**
     * Has any photo
     * @type {boolean}
     * @memberof BreedingSitesApiListMine
     */
    readonly hasPhotos?: boolean

    /**
     * Ordenado  
     * @type {Array<BitesListOrderByParameter>}
     * @memberof BreedingSitesApiListMine
     */
    readonly orderBy?: Array<BitesListOrderByParameter>

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof BreedingSitesApiListMine
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof BreedingSitesApiListMine
     */
    readonly pageSize?: number

    /**
     * Received at
     * @type {string}
     * @memberof BreedingSitesApiListMine
     */
    readonly receivedAtAfter?: string

    /**
     * Received at
     * @type {string}
     * @memberof BreedingSitesApiListMine
     */
    readonly receivedAtBefore?: string

    /**
     * Short ID
     * @type {string}
     * @memberof BreedingSitesApiListMine
     */
    readonly shortId?: string

    /**
     * Update at
     * @type {string}
     * @memberof BreedingSitesApiListMine
     */
    readonly updatedAtAfter?: string

    /**
     * Update at
     * @type {string}
     * @memberof BreedingSitesApiListMine
     */
    readonly updatedAtBefore?: string

    /**
     * 
     * @type {string}
     * @memberof BreedingSitesApiListMine
     */
    readonly userUuid?: string
}

/**
 * Request parameters for retrieve operation in BreedingSitesApi.
 * @export
 * @interface BreedingSitesApiRetrieveRequest
 */
export interface BreedingSitesApiRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof BreedingSitesApiRetrieve
     */
    readonly uuid: string
}

/**
 * BreedingSitesApi - object-oriented interface
 * @export
 * @class BreedingSitesApi
 * @extends {BaseAPI}
 */
export class BreedingSitesApi extends BaseAPI {
    /**
     * 
     * @param {BreedingSitesApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedingSitesApi
     */
    public create(requestParameters: BreedingSitesApiCreateRequest, options?: RawAxiosRequestConfig) {
        return BreedingSitesApiFp(this.configuration).create(requestParameters.createdAt, requestParameters.sentAt, requestParameters.location, requestParameters.photos, requestParameters.note, requestParameters.tags, requestParameters.siteType, requestParameters.hasWater, requestParameters.inPublicArea, requestParameters.hasNearMosquitoes, requestParameters.hasLarvae, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BreedingSitesApiDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedingSitesApi
     */
    public destroy(requestParameters: BreedingSitesApiDestroyRequest, options?: RawAxiosRequestConfig) {
        return BreedingSitesApiFp(this.configuration).destroy(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BreedingSitesApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedingSitesApi
     */
    public list(requestParameters: BreedingSitesApiListRequest = {}, options?: RawAxiosRequestConfig) {
        return BreedingSitesApiFp(this.configuration).list(requestParameters.countryId, requestParameters.createdAtAfter, requestParameters.createdAtBefore, requestParameters.hasPhotos, requestParameters.orderBy, requestParameters.page, requestParameters.pageSize, requestParameters.receivedAtAfter, requestParameters.receivedAtBefore, requestParameters.shortId, requestParameters.updatedAtAfter, requestParameters.updatedAtBefore, requestParameters.userUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Current User\'s Breeding Sites
     * @param {BreedingSitesApiListMineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedingSitesApi
     */
    public listMine(requestParameters: BreedingSitesApiListMineRequest = {}, options?: RawAxiosRequestConfig) {
        return BreedingSitesApiFp(this.configuration).listMine(requestParameters.countryId, requestParameters.createdAtAfter, requestParameters.createdAtBefore, requestParameters.hasPhotos, requestParameters.orderBy, requestParameters.page, requestParameters.pageSize, requestParameters.receivedAtAfter, requestParameters.receivedAtBefore, requestParameters.shortId, requestParameters.updatedAtAfter, requestParameters.updatedAtBefore, requestParameters.userUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BreedingSitesApiRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedingSitesApi
     */
    public retrieve(requestParameters: BreedingSitesApiRetrieveRequest, options?: RawAxiosRequestConfig) {
        return BreedingSitesApiFp(this.configuration).retrieve(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }
}

