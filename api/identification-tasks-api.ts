/* tslint:disable */
/* eslint-disable */
/**
 * Mosquito Alert API
 * Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.
 *
 * The version of the OpenAPI document: v1
 * Contact: it@mosquitoalert.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreatePhotoPrediction } from '../models';
// @ts-ignore
import type { CreatePhotoPredictionRequest } from '../models';
// @ts-ignore
import type { ErrorResponse401 } from '../models';
// @ts-ignore
import type { ErrorResponse403 } from '../models';
// @ts-ignore
import type { ErrorResponse404 } from '../models';
// @ts-ignore
import type { IdentificationTask } from '../models';
// @ts-ignore
import type { IdentificationtasksListOrderByParameter } from '../models';
// @ts-ignore
import type { IdentificationtasksListRevisionTypeParameter } from '../models';
// @ts-ignore
import type { IdentificationtasksListStatusParameter } from '../models';
// @ts-ignore
import type { IdentificationtasksListValidationError } from '../models';
// @ts-ignore
import type { IdentificationtasksPredictionsCreateValidationError } from '../models';
// @ts-ignore
import type { IdentificationtasksPredictionsPartialUpdateValidationError } from '../models';
// @ts-ignore
import type { IdentificationtasksPredictionsUpdateValidationError } from '../models';
// @ts-ignore
import type { PaginatedIdentificationTaskList } from '../models';
// @ts-ignore
import type { PaginatedPhotoPredictionList } from '../models';
// @ts-ignore
import type { PaginatedSimplePhotoList } from '../models';
// @ts-ignore
import type { PatchedPhotoPredictionRequest } from '../models';
// @ts-ignore
import type { PhotoPrediction } from '../models';
// @ts-ignore
import type { PhotoPredictionRequest } from '../models';
// @ts-ignore
import type { SimplePhoto } from '../models';
/**
 * IdentificationTasksApi - axios parameter creator
 * @export
 */
export const IdentificationTasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Array<number>} [assignees] 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [fullyPredicted] Filters identification task based on whether all associated photos have predictions. Set to True to include identification tasks where every photo has a prediction; set to False to include identification tasks where at least one photo is missing a prediction.
         * @param {boolean} [isFlagged] 
         * @param {boolean} [isSafe] 
         * @param {number} [numAnnotationsMax] 
         * @param {number} [numAnnotationsMin] 
         * @param {number} [numAssignationsMax] 
         * @param {number} [numAssignationsMin] 
         * @param {Array<IdentificationtasksListOrderByParameter>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {IdentificationtasksListRevisionTypeParameter} [revisionType] 
         * @param {IdentificationtasksListStatusParameter} [status] 
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (assignees?: Array<number>, createdAtAfter?: string, createdAtBefore?: string, fullyPredicted?: boolean, isFlagged?: boolean, isSafe?: boolean, numAnnotationsMax?: number, numAnnotationsMin?: number, numAssignationsMax?: number, numAssignationsMin?: number, orderBy?: Array<IdentificationtasksListOrderByParameter>, page?: number, pageSize?: number, revisionType?: IdentificationtasksListRevisionTypeParameter, status?: IdentificationtasksListStatusParameter, updatedAtAfter?: string, updatedAtBefore?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/identification-tasks/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (assignees) {
                localVarQueryParameter['assignees'] = assignees;
            }

            if (createdAtAfter !== undefined) {
                localVarQueryParameter['created_at_after'] = (createdAtAfter as any instanceof Date) ?
                    (createdAtAfter as any).toISOString() :
                    createdAtAfter;
            }

            if (createdAtBefore !== undefined) {
                localVarQueryParameter['created_at_before'] = (createdAtBefore as any instanceof Date) ?
                    (createdAtBefore as any).toISOString() :
                    createdAtBefore;
            }

            if (fullyPredicted !== undefined) {
                localVarQueryParameter['fully_predicted'] = fullyPredicted;
            }

            if (isFlagged !== undefined) {
                localVarQueryParameter['is_flagged'] = isFlagged;
            }

            if (isSafe !== undefined) {
                localVarQueryParameter['is_safe'] = isSafe;
            }

            if (numAnnotationsMax !== undefined) {
                localVarQueryParameter['num_annotations_max'] = numAnnotationsMax;
            }

            if (numAnnotationsMin !== undefined) {
                localVarQueryParameter['num_annotations_min'] = numAnnotationsMin;
            }

            if (numAssignationsMax !== undefined) {
                localVarQueryParameter['num_assignations_max'] = numAssignationsMax;
            }

            if (numAssignationsMin !== undefined) {
                localVarQueryParameter['num_assignations_min'] = numAssignationsMin;
            }

            if (orderBy) {
                localVarQueryParameter['order_by'] = orderBy.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (revisionType !== undefined) {
                localVarQueryParameter['revision_type'] = revisionType;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (updatedAtAfter !== undefined) {
                localVarQueryParameter['updated_at_after'] = (updatedAtAfter as any instanceof Date) ?
                    (updatedAtAfter as any).toISOString() :
                    updatedAtAfter;
            }

            if (updatedAtBefore !== undefined) {
                localVarQueryParameter['updated_at_before'] = (updatedAtBefore as any instanceof Date) ?
                    (updatedAtBefore as any).toISOString() :
                    updatedAtBefore;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosList: async (identificationTaskUuid: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationTaskUuid' is not null or undefined
            assertParamExists('photosList', 'identificationTaskUuid', identificationTaskUuid)
            const localVarPath = `/identification-tasks/{identification_task_uuid}/photos/`
                .replace(`{${"identification_task_uuid"}}`, encodeURIComponent(String(identificationTaskUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosRetrieve: async (identificationTaskUuid: string, uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationTaskUuid' is not null or undefined
            assertParamExists('photosRetrieve', 'identificationTaskUuid', identificationTaskUuid)
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('photosRetrieve', 'uuid', uuid)
            const localVarPath = `/identification-tasks/{identification_task_uuid}/photos/{uuid}/`
                .replace(`{${"identification_task_uuid"}}`, encodeURIComponent(String(identificationTaskUuid)))
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {CreatePhotoPredictionRequest} createPhotoPredictionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsCreate: async (identificationTaskUuid: string, createPhotoPredictionRequest: CreatePhotoPredictionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationTaskUuid' is not null or undefined
            assertParamExists('predictionsCreate', 'identificationTaskUuid', identificationTaskUuid)
            // verify required parameter 'createPhotoPredictionRequest' is not null or undefined
            assertParamExists('predictionsCreate', 'createPhotoPredictionRequest', createPhotoPredictionRequest)
            const localVarPath = `/identification-tasks/{identification_task_uuid}/predictions/`
                .replace(`{${"identification_task_uuid"}}`, encodeURIComponent(String(identificationTaskUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPhotoPredictionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {string} photoUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsDestroy: async (identificationTaskUuid: string, photoUuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationTaskUuid' is not null or undefined
            assertParamExists('predictionsDestroy', 'identificationTaskUuid', identificationTaskUuid)
            // verify required parameter 'photoUuid' is not null or undefined
            assertParamExists('predictionsDestroy', 'photoUuid', photoUuid)
            const localVarPath = `/identification-tasks/{identification_task_uuid}/predictions/{photo_uuid}/`
                .replace(`{${"identification_task_uuid"}}`, encodeURIComponent(String(identificationTaskUuid)))
                .replace(`{${"photo_uuid"}}`, encodeURIComponent(String(photoUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsList: async (identificationTaskUuid: string, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationTaskUuid' is not null or undefined
            assertParamExists('predictionsList', 'identificationTaskUuid', identificationTaskUuid)
            const localVarPath = `/identification-tasks/{identification_task_uuid}/predictions/`
                .replace(`{${"identification_task_uuid"}}`, encodeURIComponent(String(identificationTaskUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {string} photoUuid 
         * @param {PatchedPhotoPredictionRequest} [patchedPhotoPredictionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsPartialUpdate: async (identificationTaskUuid: string, photoUuid: string, patchedPhotoPredictionRequest?: PatchedPhotoPredictionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationTaskUuid' is not null or undefined
            assertParamExists('predictionsPartialUpdate', 'identificationTaskUuid', identificationTaskUuid)
            // verify required parameter 'photoUuid' is not null or undefined
            assertParamExists('predictionsPartialUpdate', 'photoUuid', photoUuid)
            const localVarPath = `/identification-tasks/{identification_task_uuid}/predictions/{photo_uuid}/`
                .replace(`{${"identification_task_uuid"}}`, encodeURIComponent(String(identificationTaskUuid)))
                .replace(`{${"photo_uuid"}}`, encodeURIComponent(String(photoUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedPhotoPredictionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {string} photoUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsRetrieve: async (identificationTaskUuid: string, photoUuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationTaskUuid' is not null or undefined
            assertParamExists('predictionsRetrieve', 'identificationTaskUuid', identificationTaskUuid)
            // verify required parameter 'photoUuid' is not null or undefined
            assertParamExists('predictionsRetrieve', 'photoUuid', photoUuid)
            const localVarPath = `/identification-tasks/{identification_task_uuid}/predictions/{photo_uuid}/`
                .replace(`{${"identification_task_uuid"}}`, encodeURIComponent(String(identificationTaskUuid)))
                .replace(`{${"photo_uuid"}}`, encodeURIComponent(String(photoUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {string} photoUuid 
         * @param {PhotoPredictionRequest} photoPredictionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsUpdate: async (identificationTaskUuid: string, photoUuid: string, photoPredictionRequest: PhotoPredictionRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'identificationTaskUuid' is not null or undefined
            assertParamExists('predictionsUpdate', 'identificationTaskUuid', identificationTaskUuid)
            // verify required parameter 'photoUuid' is not null or undefined
            assertParamExists('predictionsUpdate', 'photoUuid', photoUuid)
            // verify required parameter 'photoPredictionRequest' is not null or undefined
            assertParamExists('predictionsUpdate', 'photoPredictionRequest', photoPredictionRequest)
            const localVarPath = `/identification-tasks/{identification_task_uuid}/predictions/{photo_uuid}/`
                .replace(`{${"identification_task_uuid"}}`, encodeURIComponent(String(identificationTaskUuid)))
                .replace(`{${"photo_uuid"}}`, encodeURIComponent(String(photoUuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(photoPredictionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('retrieve', 'uuid', uuid)
            const localVarPath = `/identification-tasks/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentificationTasksApi - functional programming interface
 * @export
 */
export const IdentificationTasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdentificationTasksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Array<number>} [assignees] 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [fullyPredicted] Filters identification task based on whether all associated photos have predictions. Set to True to include identification tasks where every photo has a prediction; set to False to include identification tasks where at least one photo is missing a prediction.
         * @param {boolean} [isFlagged] 
         * @param {boolean} [isSafe] 
         * @param {number} [numAnnotationsMax] 
         * @param {number} [numAnnotationsMin] 
         * @param {number} [numAssignationsMax] 
         * @param {number} [numAssignationsMin] 
         * @param {Array<IdentificationtasksListOrderByParameter>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {IdentificationtasksListRevisionTypeParameter} [revisionType] 
         * @param {IdentificationtasksListStatusParameter} [status] 
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(assignees?: Array<number>, createdAtAfter?: string, createdAtBefore?: string, fullyPredicted?: boolean, isFlagged?: boolean, isSafe?: boolean, numAnnotationsMax?: number, numAnnotationsMin?: number, numAssignationsMax?: number, numAssignationsMin?: number, orderBy?: Array<IdentificationtasksListOrderByParameter>, page?: number, pageSize?: number, revisionType?: IdentificationtasksListRevisionTypeParameter, status?: IdentificationtasksListStatusParameter, updatedAtAfter?: string, updatedAtBefore?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedIdentificationTaskList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(assignees, createdAtAfter, createdAtBefore, fullyPredicted, isFlagged, isSafe, numAnnotationsMax, numAnnotationsMin, numAssignationsMax, numAssignationsMin, orderBy, page, pageSize, revisionType, status, updatedAtAfter, updatedAtBefore, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentificationTasksApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photosList(identificationTaskUuid: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedSimplePhotoList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photosList(identificationTaskUuid, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentificationTasksApi.photosList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async photosRetrieve(identificationTaskUuid: string, uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SimplePhoto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.photosRetrieve(identificationTaskUuid, uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentificationTasksApi.photosRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {CreatePhotoPredictionRequest} createPhotoPredictionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async predictionsCreate(identificationTaskUuid: string, createPhotoPredictionRequest: CreatePhotoPredictionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreatePhotoPrediction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.predictionsCreate(identificationTaskUuid, createPhotoPredictionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentificationTasksApi.predictionsCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {string} photoUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async predictionsDestroy(identificationTaskUuid: string, photoUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.predictionsDestroy(identificationTaskUuid, photoUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentificationTasksApi.predictionsDestroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async predictionsList(identificationTaskUuid: string, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPhotoPredictionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.predictionsList(identificationTaskUuid, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentificationTasksApi.predictionsList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {string} photoUuid 
         * @param {PatchedPhotoPredictionRequest} [patchedPhotoPredictionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async predictionsPartialUpdate(identificationTaskUuid: string, photoUuid: string, patchedPhotoPredictionRequest?: PatchedPhotoPredictionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotoPrediction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.predictionsPartialUpdate(identificationTaskUuid, photoUuid, patchedPhotoPredictionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentificationTasksApi.predictionsPartialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {string} photoUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async predictionsRetrieve(identificationTaskUuid: string, photoUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotoPrediction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.predictionsRetrieve(identificationTaskUuid, photoUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentificationTasksApi.predictionsRetrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} identificationTaskUuid UUID of the related Identification Task
         * @param {string} photoUuid 
         * @param {PhotoPredictionRequest} photoPredictionRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async predictionsUpdate(identificationTaskUuid: string, photoUuid: string, photoPredictionRequest: PhotoPredictionRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PhotoPrediction>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.predictionsUpdate(identificationTaskUuid, photoUuid, photoPredictionRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentificationTasksApi.predictionsUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IdentificationTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['IdentificationTasksApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * IdentificationTasksApi - factory interface
 * @export
 */
export const IdentificationTasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdentificationTasksApiFp(configuration)
    return {
        /**
         * 
         * @param {IdentificationTasksApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: IdentificationTasksApiListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedIdentificationTaskList> {
            return localVarFp.list(requestParameters.assignees, requestParameters.createdAtAfter, requestParameters.createdAtBefore, requestParameters.fullyPredicted, requestParameters.isFlagged, requestParameters.isSafe, requestParameters.numAnnotationsMax, requestParameters.numAnnotationsMin, requestParameters.numAssignationsMax, requestParameters.numAssignationsMin, requestParameters.orderBy, requestParameters.page, requestParameters.pageSize, requestParameters.revisionType, requestParameters.status, requestParameters.updatedAtAfter, requestParameters.updatedAtBefore, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdentificationTasksApiPhotosListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosList(requestParameters: IdentificationTasksApiPhotosListRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedSimplePhotoList> {
            return localVarFp.photosList(requestParameters.identificationTaskUuid, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdentificationTasksApiPhotosRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        photosRetrieve(requestParameters: IdentificationTasksApiPhotosRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<SimplePhoto> {
            return localVarFp.photosRetrieve(requestParameters.identificationTaskUuid, requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdentificationTasksApiPredictionsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsCreate(requestParameters: IdentificationTasksApiPredictionsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreatePhotoPrediction> {
            return localVarFp.predictionsCreate(requestParameters.identificationTaskUuid, requestParameters.createPhotoPredictionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdentificationTasksApiPredictionsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsDestroy(requestParameters: IdentificationTasksApiPredictionsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.predictionsDestroy(requestParameters.identificationTaskUuid, requestParameters.photoUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdentificationTasksApiPredictionsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsList(requestParameters: IdentificationTasksApiPredictionsListRequest, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedPhotoPredictionList> {
            return localVarFp.predictionsList(requestParameters.identificationTaskUuid, requestParameters.page, requestParameters.pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdentificationTasksApiPredictionsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsPartialUpdate(requestParameters: IdentificationTasksApiPredictionsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<PhotoPrediction> {
            return localVarFp.predictionsPartialUpdate(requestParameters.identificationTaskUuid, requestParameters.photoUuid, requestParameters.patchedPhotoPredictionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdentificationTasksApiPredictionsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsRetrieve(requestParameters: IdentificationTasksApiPredictionsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<PhotoPrediction> {
            return localVarFp.predictionsRetrieve(requestParameters.identificationTaskUuid, requestParameters.photoUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdentificationTasksApiPredictionsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        predictionsUpdate(requestParameters: IdentificationTasksApiPredictionsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<PhotoPrediction> {
            return localVarFp.predictionsUpdate(requestParameters.identificationTaskUuid, requestParameters.photoUuid, requestParameters.photoPredictionRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IdentificationTasksApiRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(requestParameters: IdentificationTasksApiRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<IdentificationTask> {
            return localVarFp.retrieve(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for list operation in IdentificationTasksApi.
 * @export
 * @interface IdentificationTasksApiListRequest
 */
export interface IdentificationTasksApiListRequest {
    /**
     * 
     * @type {Array<number>}
     * @memberof IdentificationTasksApiList
     */
    readonly assignees?: Array<number>

    /**
     * Created at
     * @type {string}
     * @memberof IdentificationTasksApiList
     */
    readonly createdAtAfter?: string

    /**
     * Created at
     * @type {string}
     * @memberof IdentificationTasksApiList
     */
    readonly createdAtBefore?: string

    /**
     * Filters identification task based on whether all associated photos have predictions. Set to True to include identification tasks where every photo has a prediction; set to False to include identification tasks where at least one photo is missing a prediction.
     * @type {boolean}
     * @memberof IdentificationTasksApiList
     */
    readonly fullyPredicted?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof IdentificationTasksApiList
     */
    readonly isFlagged?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof IdentificationTasksApiList
     */
    readonly isSafe?: boolean

    /**
     * 
     * @type {number}
     * @memberof IdentificationTasksApiList
     */
    readonly numAnnotationsMax?: number

    /**
     * 
     * @type {number}
     * @memberof IdentificationTasksApiList
     */
    readonly numAnnotationsMin?: number

    /**
     * 
     * @type {number}
     * @memberof IdentificationTasksApiList
     */
    readonly numAssignationsMax?: number

    /**
     * 
     * @type {number}
     * @memberof IdentificationTasksApiList
     */
    readonly numAssignationsMin?: number

    /**
     * Ordenado  
     * @type {Array<IdentificationtasksListOrderByParameter>}
     * @memberof IdentificationTasksApiList
     */
    readonly orderBy?: Array<IdentificationtasksListOrderByParameter>

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof IdentificationTasksApiList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof IdentificationTasksApiList
     */
    readonly pageSize?: number

    /**
     * 
     * @type {IdentificationtasksListRevisionTypeParameter}
     * @memberof IdentificationTasksApiList
     */
    readonly revisionType?: IdentificationtasksListRevisionTypeParameter

    /**
     * 
     * @type {IdentificationtasksListStatusParameter}
     * @memberof IdentificationTasksApiList
     */
    readonly status?: IdentificationtasksListStatusParameter

    /**
     * Update at
     * @type {string}
     * @memberof IdentificationTasksApiList
     */
    readonly updatedAtAfter?: string

    /**
     * Update at
     * @type {string}
     * @memberof IdentificationTasksApiList
     */
    readonly updatedAtBefore?: string
}

/**
 * Request parameters for photosList operation in IdentificationTasksApi.
 * @export
 * @interface IdentificationTasksApiPhotosListRequest
 */
export interface IdentificationTasksApiPhotosListRequest {
    /**
     * UUID of the related Identification Task
     * @type {string}
     * @memberof IdentificationTasksApiPhotosList
     */
    readonly identificationTaskUuid: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof IdentificationTasksApiPhotosList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof IdentificationTasksApiPhotosList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for photosRetrieve operation in IdentificationTasksApi.
 * @export
 * @interface IdentificationTasksApiPhotosRetrieveRequest
 */
export interface IdentificationTasksApiPhotosRetrieveRequest {
    /**
     * UUID of the related Identification Task
     * @type {string}
     * @memberof IdentificationTasksApiPhotosRetrieve
     */
    readonly identificationTaskUuid: string

    /**
     * 
     * @type {string}
     * @memberof IdentificationTasksApiPhotosRetrieve
     */
    readonly uuid: string
}

/**
 * Request parameters for predictionsCreate operation in IdentificationTasksApi.
 * @export
 * @interface IdentificationTasksApiPredictionsCreateRequest
 */
export interface IdentificationTasksApiPredictionsCreateRequest {
    /**
     * UUID of the related Identification Task
     * @type {string}
     * @memberof IdentificationTasksApiPredictionsCreate
     */
    readonly identificationTaskUuid: string

    /**
     * 
     * @type {CreatePhotoPredictionRequest}
     * @memberof IdentificationTasksApiPredictionsCreate
     */
    readonly createPhotoPredictionRequest: CreatePhotoPredictionRequest
}

/**
 * Request parameters for predictionsDestroy operation in IdentificationTasksApi.
 * @export
 * @interface IdentificationTasksApiPredictionsDestroyRequest
 */
export interface IdentificationTasksApiPredictionsDestroyRequest {
    /**
     * UUID of the related Identification Task
     * @type {string}
     * @memberof IdentificationTasksApiPredictionsDestroy
     */
    readonly identificationTaskUuid: string

    /**
     * 
     * @type {string}
     * @memberof IdentificationTasksApiPredictionsDestroy
     */
    readonly photoUuid: string
}

/**
 * Request parameters for predictionsList operation in IdentificationTasksApi.
 * @export
 * @interface IdentificationTasksApiPredictionsListRequest
 */
export interface IdentificationTasksApiPredictionsListRequest {
    /**
     * UUID of the related Identification Task
     * @type {string}
     * @memberof IdentificationTasksApiPredictionsList
     */
    readonly identificationTaskUuid: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof IdentificationTasksApiPredictionsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof IdentificationTasksApiPredictionsList
     */
    readonly pageSize?: number
}

/**
 * Request parameters for predictionsPartialUpdate operation in IdentificationTasksApi.
 * @export
 * @interface IdentificationTasksApiPredictionsPartialUpdateRequest
 */
export interface IdentificationTasksApiPredictionsPartialUpdateRequest {
    /**
     * UUID of the related Identification Task
     * @type {string}
     * @memberof IdentificationTasksApiPredictionsPartialUpdate
     */
    readonly identificationTaskUuid: string

    /**
     * 
     * @type {string}
     * @memberof IdentificationTasksApiPredictionsPartialUpdate
     */
    readonly photoUuid: string

    /**
     * 
     * @type {PatchedPhotoPredictionRequest}
     * @memberof IdentificationTasksApiPredictionsPartialUpdate
     */
    readonly patchedPhotoPredictionRequest?: PatchedPhotoPredictionRequest
}

/**
 * Request parameters for predictionsRetrieve operation in IdentificationTasksApi.
 * @export
 * @interface IdentificationTasksApiPredictionsRetrieveRequest
 */
export interface IdentificationTasksApiPredictionsRetrieveRequest {
    /**
     * UUID of the related Identification Task
     * @type {string}
     * @memberof IdentificationTasksApiPredictionsRetrieve
     */
    readonly identificationTaskUuid: string

    /**
     * 
     * @type {string}
     * @memberof IdentificationTasksApiPredictionsRetrieve
     */
    readonly photoUuid: string
}

/**
 * Request parameters for predictionsUpdate operation in IdentificationTasksApi.
 * @export
 * @interface IdentificationTasksApiPredictionsUpdateRequest
 */
export interface IdentificationTasksApiPredictionsUpdateRequest {
    /**
     * UUID of the related Identification Task
     * @type {string}
     * @memberof IdentificationTasksApiPredictionsUpdate
     */
    readonly identificationTaskUuid: string

    /**
     * 
     * @type {string}
     * @memberof IdentificationTasksApiPredictionsUpdate
     */
    readonly photoUuid: string

    /**
     * 
     * @type {PhotoPredictionRequest}
     * @memberof IdentificationTasksApiPredictionsUpdate
     */
    readonly photoPredictionRequest: PhotoPredictionRequest
}

/**
 * Request parameters for retrieve operation in IdentificationTasksApi.
 * @export
 * @interface IdentificationTasksApiRetrieveRequest
 */
export interface IdentificationTasksApiRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof IdentificationTasksApiRetrieve
     */
    readonly uuid: string
}

/**
 * IdentificationTasksApi - object-oriented interface
 * @export
 * @class IdentificationTasksApi
 * @extends {BaseAPI}
 */
export class IdentificationTasksApi extends BaseAPI {
    /**
     * 
     * @param {IdentificationTasksApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationTasksApi
     */
    public list(requestParameters: IdentificationTasksApiListRequest = {}, options?: RawAxiosRequestConfig) {
        return IdentificationTasksApiFp(this.configuration).list(requestParameters.assignees, requestParameters.createdAtAfter, requestParameters.createdAtBefore, requestParameters.fullyPredicted, requestParameters.isFlagged, requestParameters.isSafe, requestParameters.numAnnotationsMax, requestParameters.numAnnotationsMin, requestParameters.numAssignationsMax, requestParameters.numAssignationsMin, requestParameters.orderBy, requestParameters.page, requestParameters.pageSize, requestParameters.revisionType, requestParameters.status, requestParameters.updatedAtAfter, requestParameters.updatedAtBefore, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentificationTasksApiPhotosListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationTasksApi
     */
    public photosList(requestParameters: IdentificationTasksApiPhotosListRequest, options?: RawAxiosRequestConfig) {
        return IdentificationTasksApiFp(this.configuration).photosList(requestParameters.identificationTaskUuid, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentificationTasksApiPhotosRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationTasksApi
     */
    public photosRetrieve(requestParameters: IdentificationTasksApiPhotosRetrieveRequest, options?: RawAxiosRequestConfig) {
        return IdentificationTasksApiFp(this.configuration).photosRetrieve(requestParameters.identificationTaskUuid, requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentificationTasksApiPredictionsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationTasksApi
     */
    public predictionsCreate(requestParameters: IdentificationTasksApiPredictionsCreateRequest, options?: RawAxiosRequestConfig) {
        return IdentificationTasksApiFp(this.configuration).predictionsCreate(requestParameters.identificationTaskUuid, requestParameters.createPhotoPredictionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentificationTasksApiPredictionsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationTasksApi
     */
    public predictionsDestroy(requestParameters: IdentificationTasksApiPredictionsDestroyRequest, options?: RawAxiosRequestConfig) {
        return IdentificationTasksApiFp(this.configuration).predictionsDestroy(requestParameters.identificationTaskUuid, requestParameters.photoUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentificationTasksApiPredictionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationTasksApi
     */
    public predictionsList(requestParameters: IdentificationTasksApiPredictionsListRequest, options?: RawAxiosRequestConfig) {
        return IdentificationTasksApiFp(this.configuration).predictionsList(requestParameters.identificationTaskUuid, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentificationTasksApiPredictionsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationTasksApi
     */
    public predictionsPartialUpdate(requestParameters: IdentificationTasksApiPredictionsPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return IdentificationTasksApiFp(this.configuration).predictionsPartialUpdate(requestParameters.identificationTaskUuid, requestParameters.photoUuid, requestParameters.patchedPhotoPredictionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentificationTasksApiPredictionsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationTasksApi
     */
    public predictionsRetrieve(requestParameters: IdentificationTasksApiPredictionsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return IdentificationTasksApiFp(this.configuration).predictionsRetrieve(requestParameters.identificationTaskUuid, requestParameters.photoUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentificationTasksApiPredictionsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationTasksApi
     */
    public predictionsUpdate(requestParameters: IdentificationTasksApiPredictionsUpdateRequest, options?: RawAxiosRequestConfig) {
        return IdentificationTasksApiFp(this.configuration).predictionsUpdate(requestParameters.identificationTaskUuid, requestParameters.photoUuid, requestParameters.photoPredictionRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IdentificationTasksApiRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentificationTasksApi
     */
    public retrieve(requestParameters: IdentificationTasksApiRetrieveRequest, options?: RawAxiosRequestConfig) {
        return IdentificationTasksApiFp(this.configuration).retrieve(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }
}

