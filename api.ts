/* tslint:disable */
/* eslint-disable */
/**
 * Mosquito Alert API
 * Introducing API v1 for Mosquito Alert platform, a project desgined to facilitate citizen science initiatives and enable collaboration among scientists, public health officials, and environmental managers in the investigation and control of disease-carrying mosquitoes.
 *
 * The version of the OpenAPI document: v1
 * Contact: it@mosquitoalert.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AppUserTokenObtainPair
 */
export interface AppUserTokenObtainPair {
    /**
     * 
     * @type {string}
     * @memberof AppUserTokenObtainPair
     */
    'access': string;
    /**
     * 
     * @type {string}
     * @memberof AppUserTokenObtainPair
     */
    'refresh': string;
}
/**
 * 
 * @export
 * @interface AppUserTokenObtainPairRequest
 */
export interface AppUserTokenObtainPairRequest {
    /**
     * 
     * @type {string}
     * @memberof AppUserTokenObtainPairRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof AppUserTokenObtainPairRequest
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof AppUserTokenObtainPairRequest
     */
    'device_id'?: string;
}
/**
 * @type AuthChangePasswordError
 * @export
 */
export type AuthChangePasswordError = { attr: 'non_field_errors' } & AuthChangePasswordNonFieldErrorsErrorComponent | { attr: 'password' } & AuthChangePasswordPasswordErrorComponent;

/**
 * 
 * @export
 * @interface AuthChangePasswordNonFieldErrorsErrorComponent
 */
export interface AuthChangePasswordNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordNonFieldErrorsErrorComponent
     */
    'attr': AuthChangePasswordNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordNonFieldErrorsErrorComponent
     */
    'code': AuthChangePasswordNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const AuthChangePasswordNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type AuthChangePasswordNonFieldErrorsErrorComponentAttrEnum = typeof AuthChangePasswordNonFieldErrorsErrorComponentAttrEnum[keyof typeof AuthChangePasswordNonFieldErrorsErrorComponentAttrEnum];
export const AuthChangePasswordNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type AuthChangePasswordNonFieldErrorsErrorComponentCodeEnum = typeof AuthChangePasswordNonFieldErrorsErrorComponentCodeEnum[keyof typeof AuthChangePasswordNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface AuthChangePasswordPasswordErrorComponent
 */
export interface AuthChangePasswordPasswordErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPasswordErrorComponent
     */
    'attr': AuthChangePasswordPasswordErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPasswordErrorComponent
     */
    'code': AuthChangePasswordPasswordErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordPasswordErrorComponent
     */
    'detail': string;
}

export const AuthChangePasswordPasswordErrorComponentAttrEnum = {
    Password: 'password'
} as const;

export type AuthChangePasswordPasswordErrorComponentAttrEnum = typeof AuthChangePasswordPasswordErrorComponentAttrEnum[keyof typeof AuthChangePasswordPasswordErrorComponentAttrEnum];
export const AuthChangePasswordPasswordErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MinLength: 'min_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type AuthChangePasswordPasswordErrorComponentCodeEnum = typeof AuthChangePasswordPasswordErrorComponentCodeEnum[keyof typeof AuthChangePasswordPasswordErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface AuthChangePasswordValidationError
 */
export interface AuthChangePasswordValidationError {
    /**
     * 
     * @type {string}
     * @memberof AuthChangePasswordValidationError
     */
    'type': AuthChangePasswordValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<AuthChangePasswordError>}
     * @memberof AuthChangePasswordValidationError
     */
    'errors': Array<AuthChangePasswordError>;
}

export const AuthChangePasswordValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type AuthChangePasswordValidationErrorTypeEnum = typeof AuthChangePasswordValidationErrorTypeEnum[keyof typeof AuthChangePasswordValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface AuthObtainTokenDeviceIdErrorComponent
 */
export interface AuthObtainTokenDeviceIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenDeviceIdErrorComponent
     */
    'attr': AuthObtainTokenDeviceIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenDeviceIdErrorComponent
     */
    'code': AuthObtainTokenDeviceIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenDeviceIdErrorComponent
     */
    'detail': string;
}

export const AuthObtainTokenDeviceIdErrorComponentAttrEnum = {
    DeviceId: 'device_id'
} as const;

export type AuthObtainTokenDeviceIdErrorComponentAttrEnum = typeof AuthObtainTokenDeviceIdErrorComponentAttrEnum[keyof typeof AuthObtainTokenDeviceIdErrorComponentAttrEnum];
export const AuthObtainTokenDeviceIdErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type AuthObtainTokenDeviceIdErrorComponentCodeEnum = typeof AuthObtainTokenDeviceIdErrorComponentCodeEnum[keyof typeof AuthObtainTokenDeviceIdErrorComponentCodeEnum];

/**
 * @type AuthObtainTokenError
 * @export
 */
export type AuthObtainTokenError = { attr: 'device_id' } & AuthObtainTokenDeviceIdErrorComponent | { attr: 'non_field_errors' } & AuthObtainTokenNonFieldErrorsErrorComponent | { attr: 'password' } & AuthObtainTokenPasswordErrorComponent | { attr: 'username' } & AuthObtainTokenUsernameErrorComponent;

/**
 * 
 * @export
 * @interface AuthObtainTokenNonFieldErrorsErrorComponent
 */
export interface AuthObtainTokenNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenNonFieldErrorsErrorComponent
     */
    'attr': AuthObtainTokenNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenNonFieldErrorsErrorComponent
     */
    'code': AuthObtainTokenNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const AuthObtainTokenNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type AuthObtainTokenNonFieldErrorsErrorComponentAttrEnum = typeof AuthObtainTokenNonFieldErrorsErrorComponentAttrEnum[keyof typeof AuthObtainTokenNonFieldErrorsErrorComponentAttrEnum];
export const AuthObtainTokenNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    NoActiveAccount: 'no_active_account',
    Null: 'null'
} as const;

export type AuthObtainTokenNonFieldErrorsErrorComponentCodeEnum = typeof AuthObtainTokenNonFieldErrorsErrorComponentCodeEnum[keyof typeof AuthObtainTokenNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface AuthObtainTokenPasswordErrorComponent
 */
export interface AuthObtainTokenPasswordErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenPasswordErrorComponent
     */
    'attr': AuthObtainTokenPasswordErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenPasswordErrorComponent
     */
    'code': AuthObtainTokenPasswordErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenPasswordErrorComponent
     */
    'detail': string;
}

export const AuthObtainTokenPasswordErrorComponentAttrEnum = {
    Password: 'password'
} as const;

export type AuthObtainTokenPasswordErrorComponentAttrEnum = typeof AuthObtainTokenPasswordErrorComponentAttrEnum[keyof typeof AuthObtainTokenPasswordErrorComponentAttrEnum];
export const AuthObtainTokenPasswordErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type AuthObtainTokenPasswordErrorComponentCodeEnum = typeof AuthObtainTokenPasswordErrorComponentCodeEnum[keyof typeof AuthObtainTokenPasswordErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface AuthObtainTokenUsernameErrorComponent
 */
export interface AuthObtainTokenUsernameErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenUsernameErrorComponent
     */
    'attr': AuthObtainTokenUsernameErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenUsernameErrorComponent
     */
    'code': AuthObtainTokenUsernameErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenUsernameErrorComponent
     */
    'detail': string;
}

export const AuthObtainTokenUsernameErrorComponentAttrEnum = {
    Username: 'username'
} as const;

export type AuthObtainTokenUsernameErrorComponentAttrEnum = typeof AuthObtainTokenUsernameErrorComponentAttrEnum[keyof typeof AuthObtainTokenUsernameErrorComponentAttrEnum];
export const AuthObtainTokenUsernameErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type AuthObtainTokenUsernameErrorComponentCodeEnum = typeof AuthObtainTokenUsernameErrorComponentCodeEnum[keyof typeof AuthObtainTokenUsernameErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface AuthObtainTokenValidationError
 */
export interface AuthObtainTokenValidationError {
    /**
     * 
     * @type {string}
     * @memberof AuthObtainTokenValidationError
     */
    'type': AuthObtainTokenValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<AuthObtainTokenError>}
     * @memberof AuthObtainTokenValidationError
     */
    'errors': Array<AuthObtainTokenError>;
}

export const AuthObtainTokenValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type AuthObtainTokenValidationErrorTypeEnum = typeof AuthObtainTokenValidationErrorTypeEnum[keyof typeof AuthObtainTokenValidationErrorTypeEnum];

/**
 * @type AuthRefreshTokenError
 * @export
 */
export type AuthRefreshTokenError = { attr: 'non_field_errors' } & AuthRefreshTokenNonFieldErrorsErrorComponent | { attr: 'refresh' } & AuthRefreshTokenRefreshErrorComponent;

/**
 * 
 * @export
 * @interface AuthRefreshTokenNonFieldErrorsErrorComponent
 */
export interface AuthRefreshTokenNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof AuthRefreshTokenNonFieldErrorsErrorComponent
     */
    'attr': AuthRefreshTokenNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthRefreshTokenNonFieldErrorsErrorComponent
     */
    'code': AuthRefreshTokenNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthRefreshTokenNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const AuthRefreshTokenNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type AuthRefreshTokenNonFieldErrorsErrorComponentAttrEnum = typeof AuthRefreshTokenNonFieldErrorsErrorComponentAttrEnum[keyof typeof AuthRefreshTokenNonFieldErrorsErrorComponentAttrEnum];
export const AuthRefreshTokenNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type AuthRefreshTokenNonFieldErrorsErrorComponentCodeEnum = typeof AuthRefreshTokenNonFieldErrorsErrorComponentCodeEnum[keyof typeof AuthRefreshTokenNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface AuthRefreshTokenRefreshErrorComponent
 */
export interface AuthRefreshTokenRefreshErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof AuthRefreshTokenRefreshErrorComponent
     */
    'attr': AuthRefreshTokenRefreshErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthRefreshTokenRefreshErrorComponent
     */
    'code': AuthRefreshTokenRefreshErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthRefreshTokenRefreshErrorComponent
     */
    'detail': string;
}

export const AuthRefreshTokenRefreshErrorComponentAttrEnum = {
    Refresh: 'refresh'
} as const;

export type AuthRefreshTokenRefreshErrorComponentAttrEnum = typeof AuthRefreshTokenRefreshErrorComponentAttrEnum[keyof typeof AuthRefreshTokenRefreshErrorComponentAttrEnum];
export const AuthRefreshTokenRefreshErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type AuthRefreshTokenRefreshErrorComponentCodeEnum = typeof AuthRefreshTokenRefreshErrorComponentCodeEnum[keyof typeof AuthRefreshTokenRefreshErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface AuthRefreshTokenValidationError
 */
export interface AuthRefreshTokenValidationError {
    /**
     * 
     * @type {string}
     * @memberof AuthRefreshTokenValidationError
     */
    'type': AuthRefreshTokenValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<AuthRefreshTokenError>}
     * @memberof AuthRefreshTokenValidationError
     */
    'errors': Array<AuthRefreshTokenError>;
}

export const AuthRefreshTokenValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type AuthRefreshTokenValidationErrorTypeEnum = typeof AuthRefreshTokenValidationErrorTypeEnum[keyof typeof AuthRefreshTokenValidationErrorTypeEnum];

/**
 * @type AuthSignupGuestError
 * @export
 */
export type AuthSignupGuestError = { attr: 'non_field_errors' } & AuthSignupGuestNonFieldErrorsErrorComponent | { attr: 'password' } & AuthSignupGuestPasswordErrorComponent;

/**
 * 
 * @export
 * @interface AuthSignupGuestNonFieldErrorsErrorComponent
 */
export interface AuthSignupGuestNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof AuthSignupGuestNonFieldErrorsErrorComponent
     */
    'attr': AuthSignupGuestNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthSignupGuestNonFieldErrorsErrorComponent
     */
    'code': AuthSignupGuestNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthSignupGuestNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const AuthSignupGuestNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type AuthSignupGuestNonFieldErrorsErrorComponentAttrEnum = typeof AuthSignupGuestNonFieldErrorsErrorComponentAttrEnum[keyof typeof AuthSignupGuestNonFieldErrorsErrorComponentAttrEnum];
export const AuthSignupGuestNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type AuthSignupGuestNonFieldErrorsErrorComponentCodeEnum = typeof AuthSignupGuestNonFieldErrorsErrorComponentCodeEnum[keyof typeof AuthSignupGuestNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface AuthSignupGuestPasswordErrorComponent
 */
export interface AuthSignupGuestPasswordErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof AuthSignupGuestPasswordErrorComponent
     */
    'attr': AuthSignupGuestPasswordErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthSignupGuestPasswordErrorComponent
     */
    'code': AuthSignupGuestPasswordErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthSignupGuestPasswordErrorComponent
     */
    'detail': string;
}

export const AuthSignupGuestPasswordErrorComponentAttrEnum = {
    Password: 'password'
} as const;

export type AuthSignupGuestPasswordErrorComponentAttrEnum = typeof AuthSignupGuestPasswordErrorComponentAttrEnum[keyof typeof AuthSignupGuestPasswordErrorComponentAttrEnum];
export const AuthSignupGuestPasswordErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MinLength: 'min_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type AuthSignupGuestPasswordErrorComponentCodeEnum = typeof AuthSignupGuestPasswordErrorComponentCodeEnum[keyof typeof AuthSignupGuestPasswordErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface AuthSignupGuestValidationError
 */
export interface AuthSignupGuestValidationError {
    /**
     * 
     * @type {string}
     * @memberof AuthSignupGuestValidationError
     */
    'type': AuthSignupGuestValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<AuthSignupGuestError>}
     * @memberof AuthSignupGuestValidationError
     */
    'errors': Array<AuthSignupGuestError>;
}

export const AuthSignupGuestValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type AuthSignupGuestValidationErrorTypeEnum = typeof AuthSignupGuestValidationErrorTypeEnum[keyof typeof AuthSignupGuestValidationErrorTypeEnum];

/**
 * @type AuthVerifyTokenError
 * @export
 */
export type AuthVerifyTokenError = { attr: 'non_field_errors' } & AuthVerifyTokenNonFieldErrorsErrorComponent | { attr: 'token' } & AuthVerifyTokenTokenErrorComponent;

/**
 * 
 * @export
 * @interface AuthVerifyTokenNonFieldErrorsErrorComponent
 */
export interface AuthVerifyTokenNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyTokenNonFieldErrorsErrorComponent
     */
    'attr': AuthVerifyTokenNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyTokenNonFieldErrorsErrorComponent
     */
    'code': AuthVerifyTokenNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyTokenNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const AuthVerifyTokenNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type AuthVerifyTokenNonFieldErrorsErrorComponentAttrEnum = typeof AuthVerifyTokenNonFieldErrorsErrorComponentAttrEnum[keyof typeof AuthVerifyTokenNonFieldErrorsErrorComponentAttrEnum];
export const AuthVerifyTokenNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type AuthVerifyTokenNonFieldErrorsErrorComponentCodeEnum = typeof AuthVerifyTokenNonFieldErrorsErrorComponentCodeEnum[keyof typeof AuthVerifyTokenNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface AuthVerifyTokenTokenErrorComponent
 */
export interface AuthVerifyTokenTokenErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyTokenTokenErrorComponent
     */
    'attr': AuthVerifyTokenTokenErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyTokenTokenErrorComponent
     */
    'code': AuthVerifyTokenTokenErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyTokenTokenErrorComponent
     */
    'detail': string;
}

export const AuthVerifyTokenTokenErrorComponentAttrEnum = {
    Token: 'token'
} as const;

export type AuthVerifyTokenTokenErrorComponentAttrEnum = typeof AuthVerifyTokenTokenErrorComponentAttrEnum[keyof typeof AuthVerifyTokenTokenErrorComponentAttrEnum];
export const AuthVerifyTokenTokenErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type AuthVerifyTokenTokenErrorComponentCodeEnum = typeof AuthVerifyTokenTokenErrorComponentCodeEnum[keyof typeof AuthVerifyTokenTokenErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface AuthVerifyTokenValidationError
 */
export interface AuthVerifyTokenValidationError {
    /**
     * 
     * @type {string}
     * @memberof AuthVerifyTokenValidationError
     */
    'type': AuthVerifyTokenValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<AuthVerifyTokenError>}
     * @memberof AuthVerifyTokenValidationError
     */
    'errors': Array<AuthVerifyTokenError>;
}

export const AuthVerifyTokenValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type AuthVerifyTokenValidationErrorTypeEnum = typeof AuthVerifyTokenValidationErrorTypeEnum[keyof typeof AuthVerifyTokenValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface Bite
 */
export interface Bite {
    /**
     * 
     * @type {string}
     * @memberof Bite
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Bite
     */
    'short_id': string;
    /**
     * 
     * @type {string}
     * @memberof Bite
     */
    'user_uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Bite
     */
    'created_at': string;
    /**
     * The date and time when the record was created, displayed in the local timezone specified for this entry.
     * @type {string}
     * @memberof Bite
     */
    'created_at_local': string;
    /**
     * 
     * @type {string}
     * @memberof Bite
     */
    'sent_at': string;
    /**
     * 
     * @type {string}
     * @memberof Bite
     */
    'received_at': string;
    /**
     * Date and time when the report was last modified
     * @type {string}
     * @memberof Bite
     */
    'updated_at': string;
    /**
     * 
     * @type {Location}
     * @memberof Bite
     */
    'location': Location;
    /**
     * Note user attached to report.
     * @type {string}
     * @memberof Bite
     */
    'note'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Bite
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof Bite
     */
    'published': boolean;
    /**
     * The environment where the event took place.
     * @type {string}
     * @memberof Bite
     */
    'event_environment'?: BiteEventEnvironmentEnum | null;
    /**
     * The moment of the day when the event took place.
     * @type {string}
     * @memberof Bite
     */
    'event_moment'?: BiteEventMomentEnum | null;
    /**
     * Total number of bites reported.
     * @type {number}
     * @memberof Bite
     */
    'bite_count': number;
    /**
     * Number of bites reported in the head.
     * @type {number}
     * @memberof Bite
     */
    'head_bite_count'?: number | null;
    /**
     * Number of bites reported in the left arm.
     * @type {number}
     * @memberof Bite
     */
    'left_arm_bite_count'?: number | null;
    /**
     * Number of bites reported in the right arm.
     * @type {number}
     * @memberof Bite
     */
    'right_arm_bite_count'?: number | null;
    /**
     * Number of bites reported in the chest.
     * @type {number}
     * @memberof Bite
     */
    'chest_bite_count'?: number | null;
    /**
     * Number of bites reported in the left leg.
     * @type {number}
     * @memberof Bite
     */
    'left_leg_bite_count'?: number | null;
    /**
     * Number of bites reported in the right leg.
     * @type {number}
     * @memberof Bite
     */
    'right_leg_bite_count'?: number | null;
}

export const BiteEventEnvironmentEnum = {
    Indoors: 'indoors',
    Outdoors: 'outdoors',
    Vehicle: 'vehicle',
    Empty: ''
} as const;

export type BiteEventEnvironmentEnum = typeof BiteEventEnvironmentEnum[keyof typeof BiteEventEnvironmentEnum];
export const BiteEventMomentEnum = {
    Now: 'now',
    LastMorning: 'last_morning',
    LastMidday: 'last_midday',
    LastAfternoon: 'last_afternoon',
    LastNight: 'last_night',
    Empty: ''
} as const;

export type BiteEventMomentEnum = typeof BiteEventMomentEnum[keyof typeof BiteEventMomentEnum];

/**
 * 
 * @export
 * @interface BiteRequest
 */
export interface BiteRequest {
    /**
     * 
     * @type {string}
     * @memberof BiteRequest
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof BiteRequest
     */
    'sent_at': string;
    /**
     * 
     * @type {LocationRequest}
     * @memberof BiteRequest
     */
    'location': LocationRequest;
    /**
     * Note user attached to report.
     * @type {string}
     * @memberof BiteRequest
     */
    'note'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof BiteRequest
     */
    'tags'?: Array<string>;
    /**
     * The environment where the event took place.
     * @type {string}
     * @memberof BiteRequest
     */
    'event_environment'?: BiteRequestEventEnvironmentEnum | null;
    /**
     * The moment of the day when the event took place.
     * @type {string}
     * @memberof BiteRequest
     */
    'event_moment'?: BiteRequestEventMomentEnum | null;
    /**
     * Number of bites reported in the head.
     * @type {number}
     * @memberof BiteRequest
     */
    'head_bite_count'?: number | null;
    /**
     * Number of bites reported in the left arm.
     * @type {number}
     * @memberof BiteRequest
     */
    'left_arm_bite_count'?: number | null;
    /**
     * Number of bites reported in the right arm.
     * @type {number}
     * @memberof BiteRequest
     */
    'right_arm_bite_count'?: number | null;
    /**
     * Number of bites reported in the chest.
     * @type {number}
     * @memberof BiteRequest
     */
    'chest_bite_count'?: number | null;
    /**
     * Number of bites reported in the left leg.
     * @type {number}
     * @memberof BiteRequest
     */
    'left_leg_bite_count'?: number | null;
    /**
     * Number of bites reported in the right leg.
     * @type {number}
     * @memberof BiteRequest
     */
    'right_leg_bite_count'?: number | null;
}

export const BiteRequestEventEnvironmentEnum = {
    Indoors: 'indoors',
    Outdoors: 'outdoors',
    Vehicle: 'vehicle',
    Empty: ''
} as const;

export type BiteRequestEventEnvironmentEnum = typeof BiteRequestEventEnvironmentEnum[keyof typeof BiteRequestEventEnvironmentEnum];
export const BiteRequestEventMomentEnum = {
    Now: 'now',
    LastMorning: 'last_morning',
    LastMidday: 'last_midday',
    LastAfternoon: 'last_afternoon',
    LastNight: 'last_night',
    Empty: ''
} as const;

export type BiteRequestEventMomentEnum = typeof BiteRequestEventMomentEnum[keyof typeof BiteRequestEventMomentEnum];

/**
 * 
 * @export
 * @interface BitesCreateChestBiteCountErrorComponent
 */
export interface BitesCreateChestBiteCountErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateChestBiteCountErrorComponent
     */
    'attr': BitesCreateChestBiteCountErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateChestBiteCountErrorComponent
     */
    'code': BitesCreateChestBiteCountErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateChestBiteCountErrorComponent
     */
    'detail': string;
}

export const BitesCreateChestBiteCountErrorComponentAttrEnum = {
    ChestBiteCount: 'chest_bite_count'
} as const;

export type BitesCreateChestBiteCountErrorComponentAttrEnum = typeof BitesCreateChestBiteCountErrorComponentAttrEnum[keyof typeof BitesCreateChestBiteCountErrorComponentAttrEnum];
export const BitesCreateChestBiteCountErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxStringLength: 'max_string_length'
} as const;

export type BitesCreateChestBiteCountErrorComponentCodeEnum = typeof BitesCreateChestBiteCountErrorComponentCodeEnum[keyof typeof BitesCreateChestBiteCountErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateCreatedAtErrorComponent
 */
export interface BitesCreateCreatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateCreatedAtErrorComponent
     */
    'attr': BitesCreateCreatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateCreatedAtErrorComponent
     */
    'code': BitesCreateCreatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateCreatedAtErrorComponent
     */
    'detail': string;
}

export const BitesCreateCreatedAtErrorComponentAttrEnum = {
    CreatedAt: 'created_at'
} as const;

export type BitesCreateCreatedAtErrorComponentAttrEnum = typeof BitesCreateCreatedAtErrorComponentAttrEnum[keyof typeof BitesCreateCreatedAtErrorComponentAttrEnum];
export const BitesCreateCreatedAtErrorComponentCodeEnum = {
    Date: 'date',
    Invalid: 'invalid',
    MakeAware: 'make_aware',
    Null: 'null',
    Overflow: 'overflow',
    Required: 'required'
} as const;

export type BitesCreateCreatedAtErrorComponentCodeEnum = typeof BitesCreateCreatedAtErrorComponentCodeEnum[keyof typeof BitesCreateCreatedAtErrorComponentCodeEnum];

/**
 * @type BitesCreateError
 * @export
 */
export type BitesCreateError = { attr: 'chest_bite_count' } & BitesCreateChestBiteCountErrorComponent | { attr: 'created_at' } & BitesCreateCreatedAtErrorComponent | { attr: 'event_environment' } & BitesCreateEventEnvironmentErrorComponent | { attr: 'event_moment' } & BitesCreateEventMomentErrorComponent | { attr: 'head_bite_count' } & BitesCreateHeadBiteCountErrorComponent | { attr: 'left_arm_bite_count' } & BitesCreateLeftArmBiteCountErrorComponent | { attr: 'left_leg_bite_count' } & BitesCreateLeftLegBiteCountErrorComponent | { attr: 'location.non_field_errors' } & BitesCreateLocationNonFieldErrorsErrorComponent | { attr: 'location.point' } & BitesCreateLocationPointErrorComponent | { attr: 'location.type' } & BitesCreateLocationTypeErrorComponent | { attr: 'non_field_errors' } & BitesCreateNonFieldErrorsErrorComponent | { attr: 'note' } & BitesCreateNoteErrorComponent | { attr: 'right_arm_bite_count' } & BitesCreateRightArmBiteCountErrorComponent | { attr: 'right_leg_bite_count' } & BitesCreateRightLegBiteCountErrorComponent | { attr: 'sent_at' } & BitesCreateSentAtErrorComponent | { attr: 'tags' } & BitesCreateTagsErrorComponent | { attr: 'tags.INDEX' } & BitesCreateTagsINDEXErrorComponent;

/**
 * 
 * @export
 * @interface BitesCreateEventEnvironmentErrorComponent
 */
export interface BitesCreateEventEnvironmentErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateEventEnvironmentErrorComponent
     */
    'attr': BitesCreateEventEnvironmentErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateEventEnvironmentErrorComponent
     */
    'code': BitesCreateEventEnvironmentErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateEventEnvironmentErrorComponent
     */
    'detail': string;
}

export const BitesCreateEventEnvironmentErrorComponentAttrEnum = {
    EventEnvironment: 'event_environment'
} as const;

export type BitesCreateEventEnvironmentErrorComponentAttrEnum = typeof BitesCreateEventEnvironmentErrorComponentAttrEnum[keyof typeof BitesCreateEventEnvironmentErrorComponentAttrEnum];
export const BitesCreateEventEnvironmentErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type BitesCreateEventEnvironmentErrorComponentCodeEnum = typeof BitesCreateEventEnvironmentErrorComponentCodeEnum[keyof typeof BitesCreateEventEnvironmentErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateEventMomentErrorComponent
 */
export interface BitesCreateEventMomentErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateEventMomentErrorComponent
     */
    'attr': BitesCreateEventMomentErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateEventMomentErrorComponent
     */
    'code': BitesCreateEventMomentErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateEventMomentErrorComponent
     */
    'detail': string;
}

export const BitesCreateEventMomentErrorComponentAttrEnum = {
    EventMoment: 'event_moment'
} as const;

export type BitesCreateEventMomentErrorComponentAttrEnum = typeof BitesCreateEventMomentErrorComponentAttrEnum[keyof typeof BitesCreateEventMomentErrorComponentAttrEnum];
export const BitesCreateEventMomentErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type BitesCreateEventMomentErrorComponentCodeEnum = typeof BitesCreateEventMomentErrorComponentCodeEnum[keyof typeof BitesCreateEventMomentErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateHeadBiteCountErrorComponent
 */
export interface BitesCreateHeadBiteCountErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateHeadBiteCountErrorComponent
     */
    'attr': BitesCreateHeadBiteCountErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateHeadBiteCountErrorComponent
     */
    'code': BitesCreateHeadBiteCountErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateHeadBiteCountErrorComponent
     */
    'detail': string;
}

export const BitesCreateHeadBiteCountErrorComponentAttrEnum = {
    HeadBiteCount: 'head_bite_count'
} as const;

export type BitesCreateHeadBiteCountErrorComponentAttrEnum = typeof BitesCreateHeadBiteCountErrorComponentAttrEnum[keyof typeof BitesCreateHeadBiteCountErrorComponentAttrEnum];
export const BitesCreateHeadBiteCountErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxStringLength: 'max_string_length'
} as const;

export type BitesCreateHeadBiteCountErrorComponentCodeEnum = typeof BitesCreateHeadBiteCountErrorComponentCodeEnum[keyof typeof BitesCreateHeadBiteCountErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateLeftArmBiteCountErrorComponent
 */
export interface BitesCreateLeftArmBiteCountErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLeftArmBiteCountErrorComponent
     */
    'attr': BitesCreateLeftArmBiteCountErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLeftArmBiteCountErrorComponent
     */
    'code': BitesCreateLeftArmBiteCountErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLeftArmBiteCountErrorComponent
     */
    'detail': string;
}

export const BitesCreateLeftArmBiteCountErrorComponentAttrEnum = {
    LeftArmBiteCount: 'left_arm_bite_count'
} as const;

export type BitesCreateLeftArmBiteCountErrorComponentAttrEnum = typeof BitesCreateLeftArmBiteCountErrorComponentAttrEnum[keyof typeof BitesCreateLeftArmBiteCountErrorComponentAttrEnum];
export const BitesCreateLeftArmBiteCountErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxStringLength: 'max_string_length'
} as const;

export type BitesCreateLeftArmBiteCountErrorComponentCodeEnum = typeof BitesCreateLeftArmBiteCountErrorComponentCodeEnum[keyof typeof BitesCreateLeftArmBiteCountErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateLeftLegBiteCountErrorComponent
 */
export interface BitesCreateLeftLegBiteCountErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLeftLegBiteCountErrorComponent
     */
    'attr': BitesCreateLeftLegBiteCountErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLeftLegBiteCountErrorComponent
     */
    'code': BitesCreateLeftLegBiteCountErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLeftLegBiteCountErrorComponent
     */
    'detail': string;
}

export const BitesCreateLeftLegBiteCountErrorComponentAttrEnum = {
    LeftLegBiteCount: 'left_leg_bite_count'
} as const;

export type BitesCreateLeftLegBiteCountErrorComponentAttrEnum = typeof BitesCreateLeftLegBiteCountErrorComponentAttrEnum[keyof typeof BitesCreateLeftLegBiteCountErrorComponentAttrEnum];
export const BitesCreateLeftLegBiteCountErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxStringLength: 'max_string_length'
} as const;

export type BitesCreateLeftLegBiteCountErrorComponentCodeEnum = typeof BitesCreateLeftLegBiteCountErrorComponentCodeEnum[keyof typeof BitesCreateLeftLegBiteCountErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateLocationNonFieldErrorsErrorComponent
 */
export interface BitesCreateLocationNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLocationNonFieldErrorsErrorComponent
     */
    'attr': BitesCreateLocationNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLocationNonFieldErrorsErrorComponent
     */
    'code': BitesCreateLocationNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLocationNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const BitesCreateLocationNonFieldErrorsErrorComponentAttrEnum = {
    LocationNonFieldErrors: 'location.non_field_errors'
} as const;

export type BitesCreateLocationNonFieldErrorsErrorComponentAttrEnum = typeof BitesCreateLocationNonFieldErrorsErrorComponentAttrEnum[keyof typeof BitesCreateLocationNonFieldErrorsErrorComponentAttrEnum];
export const BitesCreateLocationNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type BitesCreateLocationNonFieldErrorsErrorComponentCodeEnum = typeof BitesCreateLocationNonFieldErrorsErrorComponentCodeEnum[keyof typeof BitesCreateLocationNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateLocationPointErrorComponent
 */
export interface BitesCreateLocationPointErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLocationPointErrorComponent
     */
    'attr': BitesCreateLocationPointErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLocationPointErrorComponent
     */
    'code': BitesCreateLocationPointErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLocationPointErrorComponent
     */
    'detail': string;
}

export const BitesCreateLocationPointErrorComponentAttrEnum = {
    LocationPoint: 'location.point'
} as const;

export type BitesCreateLocationPointErrorComponentAttrEnum = typeof BitesCreateLocationPointErrorComponentAttrEnum[keyof typeof BitesCreateLocationPointErrorComponentAttrEnum];
export const BitesCreateLocationPointErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Required: 'required'
} as const;

export type BitesCreateLocationPointErrorComponentCodeEnum = typeof BitesCreateLocationPointErrorComponentCodeEnum[keyof typeof BitesCreateLocationPointErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateLocationTypeErrorComponent
 */
export interface BitesCreateLocationTypeErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLocationTypeErrorComponent
     */
    'attr': BitesCreateLocationTypeErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLocationTypeErrorComponent
     */
    'code': BitesCreateLocationTypeErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateLocationTypeErrorComponent
     */
    'detail': string;
}

export const BitesCreateLocationTypeErrorComponentAttrEnum = {
    LocationType: 'location.type'
} as const;

export type BitesCreateLocationTypeErrorComponentAttrEnum = typeof BitesCreateLocationTypeErrorComponentAttrEnum[keyof typeof BitesCreateLocationTypeErrorComponentAttrEnum];
export const BitesCreateLocationTypeErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice',
    Null: 'null',
    Required: 'required'
} as const;

export type BitesCreateLocationTypeErrorComponentCodeEnum = typeof BitesCreateLocationTypeErrorComponentCodeEnum[keyof typeof BitesCreateLocationTypeErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateNonFieldErrorsErrorComponent
 */
export interface BitesCreateNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateNonFieldErrorsErrorComponent
     */
    'attr': BitesCreateNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateNonFieldErrorsErrorComponent
     */
    'code': BitesCreateNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const BitesCreateNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type BitesCreateNonFieldErrorsErrorComponentAttrEnum = typeof BitesCreateNonFieldErrorsErrorComponentAttrEnum[keyof typeof BitesCreateNonFieldErrorsErrorComponentAttrEnum];
export const BitesCreateNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type BitesCreateNonFieldErrorsErrorComponentCodeEnum = typeof BitesCreateNonFieldErrorsErrorComponentCodeEnum[keyof typeof BitesCreateNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateNoteErrorComponent
 */
export interface BitesCreateNoteErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateNoteErrorComponent
     */
    'attr': BitesCreateNoteErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateNoteErrorComponent
     */
    'code': BitesCreateNoteErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateNoteErrorComponent
     */
    'detail': string;
}

export const BitesCreateNoteErrorComponentAttrEnum = {
    Note: 'note'
} as const;

export type BitesCreateNoteErrorComponentAttrEnum = typeof BitesCreateNoteErrorComponentAttrEnum[keyof typeof BitesCreateNoteErrorComponentAttrEnum];
export const BitesCreateNoteErrorComponentCodeEnum = {
    Invalid: 'invalid',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type BitesCreateNoteErrorComponentCodeEnum = typeof BitesCreateNoteErrorComponentCodeEnum[keyof typeof BitesCreateNoteErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateRightArmBiteCountErrorComponent
 */
export interface BitesCreateRightArmBiteCountErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateRightArmBiteCountErrorComponent
     */
    'attr': BitesCreateRightArmBiteCountErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateRightArmBiteCountErrorComponent
     */
    'code': BitesCreateRightArmBiteCountErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateRightArmBiteCountErrorComponent
     */
    'detail': string;
}

export const BitesCreateRightArmBiteCountErrorComponentAttrEnum = {
    RightArmBiteCount: 'right_arm_bite_count'
} as const;

export type BitesCreateRightArmBiteCountErrorComponentAttrEnum = typeof BitesCreateRightArmBiteCountErrorComponentAttrEnum[keyof typeof BitesCreateRightArmBiteCountErrorComponentAttrEnum];
export const BitesCreateRightArmBiteCountErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxStringLength: 'max_string_length'
} as const;

export type BitesCreateRightArmBiteCountErrorComponentCodeEnum = typeof BitesCreateRightArmBiteCountErrorComponentCodeEnum[keyof typeof BitesCreateRightArmBiteCountErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateRightLegBiteCountErrorComponent
 */
export interface BitesCreateRightLegBiteCountErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateRightLegBiteCountErrorComponent
     */
    'attr': BitesCreateRightLegBiteCountErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateRightLegBiteCountErrorComponent
     */
    'code': BitesCreateRightLegBiteCountErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateRightLegBiteCountErrorComponent
     */
    'detail': string;
}

export const BitesCreateRightLegBiteCountErrorComponentAttrEnum = {
    RightLegBiteCount: 'right_leg_bite_count'
} as const;

export type BitesCreateRightLegBiteCountErrorComponentAttrEnum = typeof BitesCreateRightLegBiteCountErrorComponentAttrEnum[keyof typeof BitesCreateRightLegBiteCountErrorComponentAttrEnum];
export const BitesCreateRightLegBiteCountErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxStringLength: 'max_string_length'
} as const;

export type BitesCreateRightLegBiteCountErrorComponentCodeEnum = typeof BitesCreateRightLegBiteCountErrorComponentCodeEnum[keyof typeof BitesCreateRightLegBiteCountErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateSentAtErrorComponent
 */
export interface BitesCreateSentAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateSentAtErrorComponent
     */
    'attr': BitesCreateSentAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateSentAtErrorComponent
     */
    'code': BitesCreateSentAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateSentAtErrorComponent
     */
    'detail': string;
}

export const BitesCreateSentAtErrorComponentAttrEnum = {
    SentAt: 'sent_at'
} as const;

export type BitesCreateSentAtErrorComponentAttrEnum = typeof BitesCreateSentAtErrorComponentAttrEnum[keyof typeof BitesCreateSentAtErrorComponentAttrEnum];
export const BitesCreateSentAtErrorComponentCodeEnum = {
    Date: 'date',
    Invalid: 'invalid',
    MakeAware: 'make_aware',
    Null: 'null',
    Overflow: 'overflow',
    Required: 'required'
} as const;

export type BitesCreateSentAtErrorComponentCodeEnum = typeof BitesCreateSentAtErrorComponentCodeEnum[keyof typeof BitesCreateSentAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateTagsErrorComponent
 */
export interface BitesCreateTagsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateTagsErrorComponent
     */
    'attr': BitesCreateTagsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateTagsErrorComponent
     */
    'code': BitesCreateTagsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateTagsErrorComponent
     */
    'detail': string;
}

export const BitesCreateTagsErrorComponentAttrEnum = {
    Tags: 'tags'
} as const;

export type BitesCreateTagsErrorComponentAttrEnum = typeof BitesCreateTagsErrorComponentAttrEnum[keyof typeof BitesCreateTagsErrorComponentAttrEnum];
export const BitesCreateTagsErrorComponentCodeEnum = {
    InvalidJson: 'invalid_json',
    NotAList: 'not_a_list',
    NotAStr: 'not_a_str',
    Null: 'null'
} as const;

export type BitesCreateTagsErrorComponentCodeEnum = typeof BitesCreateTagsErrorComponentCodeEnum[keyof typeof BitesCreateTagsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateTagsINDEXErrorComponent
 */
export interface BitesCreateTagsINDEXErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateTagsINDEXErrorComponent
     */
    'attr': BitesCreateTagsINDEXErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateTagsINDEXErrorComponent
     */
    'code': BitesCreateTagsINDEXErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesCreateTagsINDEXErrorComponent
     */
    'detail': string;
}

export const BitesCreateTagsINDEXErrorComponentAttrEnum = {
    TagsIndex: 'tags.INDEX'
} as const;

export type BitesCreateTagsINDEXErrorComponentAttrEnum = typeof BitesCreateTagsINDEXErrorComponentAttrEnum[keyof typeof BitesCreateTagsINDEXErrorComponentAttrEnum];
export const BitesCreateTagsINDEXErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type BitesCreateTagsINDEXErrorComponentCodeEnum = typeof BitesCreateTagsINDEXErrorComponentCodeEnum[keyof typeof BitesCreateTagsINDEXErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesCreateValidationError
 */
export interface BitesCreateValidationError {
    /**
     * 
     * @type {string}
     * @memberof BitesCreateValidationError
     */
    'type': BitesCreateValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<BitesCreateError>}
     * @memberof BitesCreateValidationError
     */
    'errors': Array<BitesCreateError>;
}

export const BitesCreateValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type BitesCreateValidationErrorTypeEnum = typeof BitesCreateValidationErrorTypeEnum[keyof typeof BitesCreateValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface BitesListCreatedAtErrorComponent
 */
export interface BitesListCreatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListCreatedAtErrorComponent
     */
    'attr': BitesListCreatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListCreatedAtErrorComponent
     */
    'code': BitesListCreatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListCreatedAtErrorComponent
     */
    'detail': string;
}

export const BitesListCreatedAtErrorComponentAttrEnum = {
    CreatedAt: 'created_at'
} as const;

export type BitesListCreatedAtErrorComponentAttrEnum = typeof BitesListCreatedAtErrorComponentAttrEnum[keyof typeof BitesListCreatedAtErrorComponentAttrEnum];
export const BitesListCreatedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BitesListCreatedAtErrorComponentCodeEnum = typeof BitesListCreatedAtErrorComponentCodeEnum[keyof typeof BitesListCreatedAtErrorComponentCodeEnum];

/**
 * @type BitesListError
 * @export
 */
export type BitesListError = { attr: 'created_at' } & BitesListCreatedAtErrorComponent | { attr: 'location_country_id' } & BitesListLocationCountryIdErrorComponent | { attr: 'location_nuts_2' } & BitesListLocationNuts2ErrorComponent | { attr: 'location_nuts_3' } & BitesListLocationNuts3ErrorComponent | { attr: 'order_by' } & BitesListOrderByErrorComponent | { attr: 'received_at' } & BitesListReceivedAtErrorComponent | { attr: 'short_id' } & BitesListShortIdErrorComponent | { attr: 'updated_at' } & BitesListUpdatedAtErrorComponent | { attr: 'user_uuid' } & BitesListUserUuidErrorComponent;

/**
 * 
 * @export
 * @interface BitesListLocationCountryIdErrorComponent
 */
export interface BitesListLocationCountryIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListLocationCountryIdErrorComponent
     */
    'attr': BitesListLocationCountryIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListLocationCountryIdErrorComponent
     */
    'code': BitesListLocationCountryIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListLocationCountryIdErrorComponent
     */
    'detail': string;
}

export const BitesListLocationCountryIdErrorComponentAttrEnum = {
    LocationCountryId: 'location_country_id'
} as const;

export type BitesListLocationCountryIdErrorComponentAttrEnum = typeof BitesListLocationCountryIdErrorComponentAttrEnum[keyof typeof BitesListLocationCountryIdErrorComponentAttrEnum];
export const BitesListLocationCountryIdErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type BitesListLocationCountryIdErrorComponentCodeEnum = typeof BitesListLocationCountryIdErrorComponentCodeEnum[keyof typeof BitesListLocationCountryIdErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListLocationNuts2ErrorComponent
 */
export interface BitesListLocationNuts2ErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListLocationNuts2ErrorComponent
     */
    'attr': BitesListLocationNuts2ErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListLocationNuts2ErrorComponent
     */
    'code': BitesListLocationNuts2ErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListLocationNuts2ErrorComponent
     */
    'detail': string;
}

export const BitesListLocationNuts2ErrorComponentAttrEnum = {
    LocationNuts2: 'location_nuts_2'
} as const;

export type BitesListLocationNuts2ErrorComponentAttrEnum = typeof BitesListLocationNuts2ErrorComponentAttrEnum[keyof typeof BitesListLocationNuts2ErrorComponentAttrEnum];
export const BitesListLocationNuts2ErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BitesListLocationNuts2ErrorComponentCodeEnum = typeof BitesListLocationNuts2ErrorComponentCodeEnum[keyof typeof BitesListLocationNuts2ErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListLocationNuts3ErrorComponent
 */
export interface BitesListLocationNuts3ErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListLocationNuts3ErrorComponent
     */
    'attr': BitesListLocationNuts3ErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListLocationNuts3ErrorComponent
     */
    'code': BitesListLocationNuts3ErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListLocationNuts3ErrorComponent
     */
    'detail': string;
}

export const BitesListLocationNuts3ErrorComponentAttrEnum = {
    LocationNuts3: 'location_nuts_3'
} as const;

export type BitesListLocationNuts3ErrorComponentAttrEnum = typeof BitesListLocationNuts3ErrorComponentAttrEnum[keyof typeof BitesListLocationNuts3ErrorComponentAttrEnum];
export const BitesListLocationNuts3ErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BitesListLocationNuts3ErrorComponentCodeEnum = typeof BitesListLocationNuts3ErrorComponentCodeEnum[keyof typeof BitesListLocationNuts3ErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListMineCreatedAtErrorComponent
 */
export interface BitesListMineCreatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListMineCreatedAtErrorComponent
     */
    'attr': BitesListMineCreatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineCreatedAtErrorComponent
     */
    'code': BitesListMineCreatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineCreatedAtErrorComponent
     */
    'detail': string;
}

export const BitesListMineCreatedAtErrorComponentAttrEnum = {
    CreatedAt: 'created_at'
} as const;

export type BitesListMineCreatedAtErrorComponentAttrEnum = typeof BitesListMineCreatedAtErrorComponentAttrEnum[keyof typeof BitesListMineCreatedAtErrorComponentAttrEnum];
export const BitesListMineCreatedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BitesListMineCreatedAtErrorComponentCodeEnum = typeof BitesListMineCreatedAtErrorComponentCodeEnum[keyof typeof BitesListMineCreatedAtErrorComponentCodeEnum];

/**
 * @type BitesListMineError
 * @export
 */
export type BitesListMineError = { attr: 'created_at' } & BitesListMineCreatedAtErrorComponent | { attr: 'location_country_id' } & BitesListMineLocationCountryIdErrorComponent | { attr: 'location_nuts_2' } & BitesListMineLocationNuts2ErrorComponent | { attr: 'location_nuts_3' } & BitesListMineLocationNuts3ErrorComponent | { attr: 'order_by' } & BitesListMineOrderByErrorComponent | { attr: 'received_at' } & BitesListMineReceivedAtErrorComponent | { attr: 'short_id' } & BitesListMineShortIdErrorComponent | { attr: 'updated_at' } & BitesListMineUpdatedAtErrorComponent | { attr: 'user_uuid' } & BitesListMineUserUuidErrorComponent;

/**
 * 
 * @export
 * @interface BitesListMineLocationCountryIdErrorComponent
 */
export interface BitesListMineLocationCountryIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListMineLocationCountryIdErrorComponent
     */
    'attr': BitesListMineLocationCountryIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineLocationCountryIdErrorComponent
     */
    'code': BitesListMineLocationCountryIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineLocationCountryIdErrorComponent
     */
    'detail': string;
}

export const BitesListMineLocationCountryIdErrorComponentAttrEnum = {
    LocationCountryId: 'location_country_id'
} as const;

export type BitesListMineLocationCountryIdErrorComponentAttrEnum = typeof BitesListMineLocationCountryIdErrorComponentAttrEnum[keyof typeof BitesListMineLocationCountryIdErrorComponentAttrEnum];
export const BitesListMineLocationCountryIdErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type BitesListMineLocationCountryIdErrorComponentCodeEnum = typeof BitesListMineLocationCountryIdErrorComponentCodeEnum[keyof typeof BitesListMineLocationCountryIdErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListMineLocationNuts2ErrorComponent
 */
export interface BitesListMineLocationNuts2ErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListMineLocationNuts2ErrorComponent
     */
    'attr': BitesListMineLocationNuts2ErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineLocationNuts2ErrorComponent
     */
    'code': BitesListMineLocationNuts2ErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineLocationNuts2ErrorComponent
     */
    'detail': string;
}

export const BitesListMineLocationNuts2ErrorComponentAttrEnum = {
    LocationNuts2: 'location_nuts_2'
} as const;

export type BitesListMineLocationNuts2ErrorComponentAttrEnum = typeof BitesListMineLocationNuts2ErrorComponentAttrEnum[keyof typeof BitesListMineLocationNuts2ErrorComponentAttrEnum];
export const BitesListMineLocationNuts2ErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BitesListMineLocationNuts2ErrorComponentCodeEnum = typeof BitesListMineLocationNuts2ErrorComponentCodeEnum[keyof typeof BitesListMineLocationNuts2ErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListMineLocationNuts3ErrorComponent
 */
export interface BitesListMineLocationNuts3ErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListMineLocationNuts3ErrorComponent
     */
    'attr': BitesListMineLocationNuts3ErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineLocationNuts3ErrorComponent
     */
    'code': BitesListMineLocationNuts3ErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineLocationNuts3ErrorComponent
     */
    'detail': string;
}

export const BitesListMineLocationNuts3ErrorComponentAttrEnum = {
    LocationNuts3: 'location_nuts_3'
} as const;

export type BitesListMineLocationNuts3ErrorComponentAttrEnum = typeof BitesListMineLocationNuts3ErrorComponentAttrEnum[keyof typeof BitesListMineLocationNuts3ErrorComponentAttrEnum];
export const BitesListMineLocationNuts3ErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BitesListMineLocationNuts3ErrorComponentCodeEnum = typeof BitesListMineLocationNuts3ErrorComponentCodeEnum[keyof typeof BitesListMineLocationNuts3ErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListMineOrderByErrorComponent
 */
export interface BitesListMineOrderByErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListMineOrderByErrorComponent
     */
    'attr': BitesListMineOrderByErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineOrderByErrorComponent
     */
    'code': BitesListMineOrderByErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineOrderByErrorComponent
     */
    'detail': string;
}

export const BitesListMineOrderByErrorComponentAttrEnum = {
    OrderBy: 'order_by'
} as const;

export type BitesListMineOrderByErrorComponentAttrEnum = typeof BitesListMineOrderByErrorComponentAttrEnum[keyof typeof BitesListMineOrderByErrorComponentAttrEnum];
export const BitesListMineOrderByErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type BitesListMineOrderByErrorComponentCodeEnum = typeof BitesListMineOrderByErrorComponentCodeEnum[keyof typeof BitesListMineOrderByErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListMineReceivedAtErrorComponent
 */
export interface BitesListMineReceivedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListMineReceivedAtErrorComponent
     */
    'attr': BitesListMineReceivedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineReceivedAtErrorComponent
     */
    'code': BitesListMineReceivedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineReceivedAtErrorComponent
     */
    'detail': string;
}

export const BitesListMineReceivedAtErrorComponentAttrEnum = {
    ReceivedAt: 'received_at'
} as const;

export type BitesListMineReceivedAtErrorComponentAttrEnum = typeof BitesListMineReceivedAtErrorComponentAttrEnum[keyof typeof BitesListMineReceivedAtErrorComponentAttrEnum];
export const BitesListMineReceivedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BitesListMineReceivedAtErrorComponentCodeEnum = typeof BitesListMineReceivedAtErrorComponentCodeEnum[keyof typeof BitesListMineReceivedAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListMineShortIdErrorComponent
 */
export interface BitesListMineShortIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListMineShortIdErrorComponent
     */
    'attr': BitesListMineShortIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineShortIdErrorComponent
     */
    'code': BitesListMineShortIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineShortIdErrorComponent
     */
    'detail': string;
}

export const BitesListMineShortIdErrorComponentAttrEnum = {
    ShortId: 'short_id'
} as const;

export type BitesListMineShortIdErrorComponentAttrEnum = typeof BitesListMineShortIdErrorComponentAttrEnum[keyof typeof BitesListMineShortIdErrorComponentAttrEnum];
export const BitesListMineShortIdErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BitesListMineShortIdErrorComponentCodeEnum = typeof BitesListMineShortIdErrorComponentCodeEnum[keyof typeof BitesListMineShortIdErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListMineUpdatedAtErrorComponent
 */
export interface BitesListMineUpdatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListMineUpdatedAtErrorComponent
     */
    'attr': BitesListMineUpdatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineUpdatedAtErrorComponent
     */
    'code': BitesListMineUpdatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineUpdatedAtErrorComponent
     */
    'detail': string;
}

export const BitesListMineUpdatedAtErrorComponentAttrEnum = {
    UpdatedAt: 'updated_at'
} as const;

export type BitesListMineUpdatedAtErrorComponentAttrEnum = typeof BitesListMineUpdatedAtErrorComponentAttrEnum[keyof typeof BitesListMineUpdatedAtErrorComponentAttrEnum];
export const BitesListMineUpdatedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BitesListMineUpdatedAtErrorComponentCodeEnum = typeof BitesListMineUpdatedAtErrorComponentCodeEnum[keyof typeof BitesListMineUpdatedAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListMineUserUuidErrorComponent
 */
export interface BitesListMineUserUuidErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListMineUserUuidErrorComponent
     */
    'attr': BitesListMineUserUuidErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineUserUuidErrorComponent
     */
    'code': BitesListMineUserUuidErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListMineUserUuidErrorComponent
     */
    'detail': string;
}

export const BitesListMineUserUuidErrorComponentAttrEnum = {
    UserUuid: 'user_uuid'
} as const;

export type BitesListMineUserUuidErrorComponentAttrEnum = typeof BitesListMineUserUuidErrorComponentAttrEnum[keyof typeof BitesListMineUserUuidErrorComponentAttrEnum];
export const BitesListMineUserUuidErrorComponentCodeEnum = {
    Invalid: 'invalid',
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BitesListMineUserUuidErrorComponentCodeEnum = typeof BitesListMineUserUuidErrorComponentCodeEnum[keyof typeof BitesListMineUserUuidErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListMineValidationError
 */
export interface BitesListMineValidationError {
    /**
     * 
     * @type {string}
     * @memberof BitesListMineValidationError
     */
    'type': BitesListMineValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<BitesListMineError>}
     * @memberof BitesListMineValidationError
     */
    'errors': Array<BitesListMineError>;
}

export const BitesListMineValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type BitesListMineValidationErrorTypeEnum = typeof BitesListMineValidationErrorTypeEnum[keyof typeof BitesListMineValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface BitesListOrderByErrorComponent
 */
export interface BitesListOrderByErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListOrderByErrorComponent
     */
    'attr': BitesListOrderByErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListOrderByErrorComponent
     */
    'code': BitesListOrderByErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListOrderByErrorComponent
     */
    'detail': string;
}

export const BitesListOrderByErrorComponentAttrEnum = {
    OrderBy: 'order_by'
} as const;

export type BitesListOrderByErrorComponentAttrEnum = typeof BitesListOrderByErrorComponentAttrEnum[keyof typeof BitesListOrderByErrorComponentAttrEnum];
export const BitesListOrderByErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type BitesListOrderByErrorComponentCodeEnum = typeof BitesListOrderByErrorComponentCodeEnum[keyof typeof BitesListOrderByErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListReceivedAtErrorComponent
 */
export interface BitesListReceivedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListReceivedAtErrorComponent
     */
    'attr': BitesListReceivedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListReceivedAtErrorComponent
     */
    'code': BitesListReceivedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListReceivedAtErrorComponent
     */
    'detail': string;
}

export const BitesListReceivedAtErrorComponentAttrEnum = {
    ReceivedAt: 'received_at'
} as const;

export type BitesListReceivedAtErrorComponentAttrEnum = typeof BitesListReceivedAtErrorComponentAttrEnum[keyof typeof BitesListReceivedAtErrorComponentAttrEnum];
export const BitesListReceivedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BitesListReceivedAtErrorComponentCodeEnum = typeof BitesListReceivedAtErrorComponentCodeEnum[keyof typeof BitesListReceivedAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListShortIdErrorComponent
 */
export interface BitesListShortIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListShortIdErrorComponent
     */
    'attr': BitesListShortIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListShortIdErrorComponent
     */
    'code': BitesListShortIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListShortIdErrorComponent
     */
    'detail': string;
}

export const BitesListShortIdErrorComponentAttrEnum = {
    ShortId: 'short_id'
} as const;

export type BitesListShortIdErrorComponentAttrEnum = typeof BitesListShortIdErrorComponentAttrEnum[keyof typeof BitesListShortIdErrorComponentAttrEnum];
export const BitesListShortIdErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BitesListShortIdErrorComponentCodeEnum = typeof BitesListShortIdErrorComponentCodeEnum[keyof typeof BitesListShortIdErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListUpdatedAtErrorComponent
 */
export interface BitesListUpdatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListUpdatedAtErrorComponent
     */
    'attr': BitesListUpdatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListUpdatedAtErrorComponent
     */
    'code': BitesListUpdatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListUpdatedAtErrorComponent
     */
    'detail': string;
}

export const BitesListUpdatedAtErrorComponentAttrEnum = {
    UpdatedAt: 'updated_at'
} as const;

export type BitesListUpdatedAtErrorComponentAttrEnum = typeof BitesListUpdatedAtErrorComponentAttrEnum[keyof typeof BitesListUpdatedAtErrorComponentAttrEnum];
export const BitesListUpdatedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BitesListUpdatedAtErrorComponentCodeEnum = typeof BitesListUpdatedAtErrorComponentCodeEnum[keyof typeof BitesListUpdatedAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListUserUuidErrorComponent
 */
export interface BitesListUserUuidErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BitesListUserUuidErrorComponent
     */
    'attr': BitesListUserUuidErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListUserUuidErrorComponent
     */
    'code': BitesListUserUuidErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BitesListUserUuidErrorComponent
     */
    'detail': string;
}

export const BitesListUserUuidErrorComponentAttrEnum = {
    UserUuid: 'user_uuid'
} as const;

export type BitesListUserUuidErrorComponentAttrEnum = typeof BitesListUserUuidErrorComponentAttrEnum[keyof typeof BitesListUserUuidErrorComponentAttrEnum];
export const BitesListUserUuidErrorComponentCodeEnum = {
    Invalid: 'invalid',
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BitesListUserUuidErrorComponentCodeEnum = typeof BitesListUserUuidErrorComponentCodeEnum[keyof typeof BitesListUserUuidErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BitesListValidationError
 */
export interface BitesListValidationError {
    /**
     * 
     * @type {string}
     * @memberof BitesListValidationError
     */
    'type': BitesListValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<BitesListError>}
     * @memberof BitesListValidationError
     */
    'errors': Array<BitesListError>;
}

export const BitesListValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type BitesListValidationErrorTypeEnum = typeof BitesListValidationErrorTypeEnum[keyof typeof BitesListValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface BreedingSite
 */
export interface BreedingSite {
    /**
     * 
     * @type {string}
     * @memberof BreedingSite
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof BreedingSite
     */
    'short_id': string;
    /**
     * 
     * @type {string}
     * @memberof BreedingSite
     */
    'user_uuid': string;
    /**
     * 
     * @type {string}
     * @memberof BreedingSite
     */
    'created_at': string;
    /**
     * The date and time when the record was created, displayed in the local timezone specified for this entry.
     * @type {string}
     * @memberof BreedingSite
     */
    'created_at_local': string;
    /**
     * 
     * @type {string}
     * @memberof BreedingSite
     */
    'sent_at': string;
    /**
     * 
     * @type {string}
     * @memberof BreedingSite
     */
    'received_at': string;
    /**
     * Date and time when the report was last modified
     * @type {string}
     * @memberof BreedingSite
     */
    'updated_at': string;
    /**
     * 
     * @type {Location}
     * @memberof BreedingSite
     */
    'location': Location;
    /**
     * Note user attached to report.
     * @type {string}
     * @memberof BreedingSite
     */
    'note'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof BreedingSite
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof BreedingSite
     */
    'published': boolean;
    /**
     * 
     * @type {Array<SimplePhoto>}
     * @memberof BreedingSite
     */
    'photos': Array<SimplePhoto>;
    /**
     * Breeding site type.
     * @type {string}
     * @memberof BreedingSite
     */
    'site_type'?: BreedingSiteSiteTypeEnum;
    /**
     * Either if the user perceived water in the breeding site.
     * @type {boolean}
     * @memberof BreedingSite
     */
    'has_water'?: boolean | null;
    /**
     * Either if the breeding site is found in a public area.
     * @type {boolean}
     * @memberof BreedingSite
     */
    'in_public_area'?: boolean | null;
    /**
     * Either if the user perceived mosquitoes near the breeding site (less than 10 meters).
     * @type {boolean}
     * @memberof BreedingSite
     */
    'has_near_mosquitoes'?: boolean | null;
    /**
     * Either if the user perceived larvaes the breeding site.
     * @type {boolean}
     * @memberof BreedingSite
     */
    'has_larvae'?: boolean | null;
}

export const BreedingSiteSiteTypeEnum = {
    Basin: 'basin',
    Bucket: 'bucket',
    Fountain: 'fountain',
    SmallContainer: 'small_container',
    StormDrain: 'storm_drain',
    Well: 'well',
    Other: 'other',
    Empty: ''
} as const;

export type BreedingSiteSiteTypeEnum = typeof BreedingSiteSiteTypeEnum[keyof typeof BreedingSiteSiteTypeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateCreatedAtErrorComponent
 */
export interface BreedingsitesCreateCreatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateCreatedAtErrorComponent
     */
    'attr': BreedingsitesCreateCreatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateCreatedAtErrorComponent
     */
    'code': BreedingsitesCreateCreatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateCreatedAtErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateCreatedAtErrorComponentAttrEnum = {
    CreatedAt: 'created_at'
} as const;

export type BreedingsitesCreateCreatedAtErrorComponentAttrEnum = typeof BreedingsitesCreateCreatedAtErrorComponentAttrEnum[keyof typeof BreedingsitesCreateCreatedAtErrorComponentAttrEnum];
export const BreedingsitesCreateCreatedAtErrorComponentCodeEnum = {
    Date: 'date',
    Invalid: 'invalid',
    MakeAware: 'make_aware',
    Null: 'null',
    Overflow: 'overflow',
    Required: 'required'
} as const;

export type BreedingsitesCreateCreatedAtErrorComponentCodeEnum = typeof BreedingsitesCreateCreatedAtErrorComponentCodeEnum[keyof typeof BreedingsitesCreateCreatedAtErrorComponentCodeEnum];

/**
 * @type BreedingsitesCreateError
 * @export
 */
export type BreedingsitesCreateError = { attr: 'created_at' } & BreedingsitesCreateCreatedAtErrorComponent | { attr: 'has_larvae' } & BreedingsitesCreateHasLarvaeErrorComponent | { attr: 'has_near_mosquitoes' } & BreedingsitesCreateHasNearMosquitoesErrorComponent | { attr: 'has_water' } & BreedingsitesCreateHasWaterErrorComponent | { attr: 'in_public_area' } & BreedingsitesCreateInPublicAreaErrorComponent | { attr: 'location.non_field_errors' } & BreedingsitesCreateLocationNonFieldErrorsErrorComponent | { attr: 'location.point' } & BreedingsitesCreateLocationPointErrorComponent | { attr: 'location.type' } & BreedingsitesCreateLocationTypeErrorComponent | { attr: 'non_field_errors' } & BreedingsitesCreateNonFieldErrorsErrorComponent | { attr: 'note' } & BreedingsitesCreateNoteErrorComponent | { attr: 'photos.INDEX.file' } & BreedingsitesCreatePhotosINDEXFileErrorComponent | { attr: 'photos.INDEX.non_field_errors' } & BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponent | { attr: 'photos.non_field_errors' } & BreedingsitesCreatePhotosNonFieldErrorsErrorComponent | { attr: 'sent_at' } & BreedingsitesCreateSentAtErrorComponent | { attr: 'site_type' } & BreedingsitesCreateSiteTypeErrorComponent | { attr: 'tags' } & BreedingsitesCreateTagsErrorComponent | { attr: 'tags.INDEX' } & BreedingsitesCreateTagsINDEXErrorComponent;

/**
 * 
 * @export
 * @interface BreedingsitesCreateHasLarvaeErrorComponent
 */
export interface BreedingsitesCreateHasLarvaeErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateHasLarvaeErrorComponent
     */
    'attr': BreedingsitesCreateHasLarvaeErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateHasLarvaeErrorComponent
     */
    'code': BreedingsitesCreateHasLarvaeErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateHasLarvaeErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateHasLarvaeErrorComponentAttrEnum = {
    HasLarvae: 'has_larvae'
} as const;

export type BreedingsitesCreateHasLarvaeErrorComponentAttrEnum = typeof BreedingsitesCreateHasLarvaeErrorComponentAttrEnum[keyof typeof BreedingsitesCreateHasLarvaeErrorComponentAttrEnum];
export const BreedingsitesCreateHasLarvaeErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BreedingsitesCreateHasLarvaeErrorComponentCodeEnum = typeof BreedingsitesCreateHasLarvaeErrorComponentCodeEnum[keyof typeof BreedingsitesCreateHasLarvaeErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateHasNearMosquitoesErrorComponent
 */
export interface BreedingsitesCreateHasNearMosquitoesErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateHasNearMosquitoesErrorComponent
     */
    'attr': BreedingsitesCreateHasNearMosquitoesErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateHasNearMosquitoesErrorComponent
     */
    'code': BreedingsitesCreateHasNearMosquitoesErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateHasNearMosquitoesErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateHasNearMosquitoesErrorComponentAttrEnum = {
    HasNearMosquitoes: 'has_near_mosquitoes'
} as const;

export type BreedingsitesCreateHasNearMosquitoesErrorComponentAttrEnum = typeof BreedingsitesCreateHasNearMosquitoesErrorComponentAttrEnum[keyof typeof BreedingsitesCreateHasNearMosquitoesErrorComponentAttrEnum];
export const BreedingsitesCreateHasNearMosquitoesErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BreedingsitesCreateHasNearMosquitoesErrorComponentCodeEnum = typeof BreedingsitesCreateHasNearMosquitoesErrorComponentCodeEnum[keyof typeof BreedingsitesCreateHasNearMosquitoesErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateHasWaterErrorComponent
 */
export interface BreedingsitesCreateHasWaterErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateHasWaterErrorComponent
     */
    'attr': BreedingsitesCreateHasWaterErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateHasWaterErrorComponent
     */
    'code': BreedingsitesCreateHasWaterErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateHasWaterErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateHasWaterErrorComponentAttrEnum = {
    HasWater: 'has_water'
} as const;

export type BreedingsitesCreateHasWaterErrorComponentAttrEnum = typeof BreedingsitesCreateHasWaterErrorComponentAttrEnum[keyof typeof BreedingsitesCreateHasWaterErrorComponentAttrEnum];
export const BreedingsitesCreateHasWaterErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BreedingsitesCreateHasWaterErrorComponentCodeEnum = typeof BreedingsitesCreateHasWaterErrorComponentCodeEnum[keyof typeof BreedingsitesCreateHasWaterErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateInPublicAreaErrorComponent
 */
export interface BreedingsitesCreateInPublicAreaErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateInPublicAreaErrorComponent
     */
    'attr': BreedingsitesCreateInPublicAreaErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateInPublicAreaErrorComponent
     */
    'code': BreedingsitesCreateInPublicAreaErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateInPublicAreaErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateInPublicAreaErrorComponentAttrEnum = {
    InPublicArea: 'in_public_area'
} as const;

export type BreedingsitesCreateInPublicAreaErrorComponentAttrEnum = typeof BreedingsitesCreateInPublicAreaErrorComponentAttrEnum[keyof typeof BreedingsitesCreateInPublicAreaErrorComponentAttrEnum];
export const BreedingsitesCreateInPublicAreaErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BreedingsitesCreateInPublicAreaErrorComponentCodeEnum = typeof BreedingsitesCreateInPublicAreaErrorComponentCodeEnum[keyof typeof BreedingsitesCreateInPublicAreaErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateLocationNonFieldErrorsErrorComponent
 */
export interface BreedingsitesCreateLocationNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateLocationNonFieldErrorsErrorComponent
     */
    'attr': BreedingsitesCreateLocationNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateLocationNonFieldErrorsErrorComponent
     */
    'code': BreedingsitesCreateLocationNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateLocationNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateLocationNonFieldErrorsErrorComponentAttrEnum = {
    LocationNonFieldErrors: 'location.non_field_errors'
} as const;

export type BreedingsitesCreateLocationNonFieldErrorsErrorComponentAttrEnum = typeof BreedingsitesCreateLocationNonFieldErrorsErrorComponentAttrEnum[keyof typeof BreedingsitesCreateLocationNonFieldErrorsErrorComponentAttrEnum];
export const BreedingsitesCreateLocationNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type BreedingsitesCreateLocationNonFieldErrorsErrorComponentCodeEnum = typeof BreedingsitesCreateLocationNonFieldErrorsErrorComponentCodeEnum[keyof typeof BreedingsitesCreateLocationNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateLocationPointErrorComponent
 */
export interface BreedingsitesCreateLocationPointErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateLocationPointErrorComponent
     */
    'attr': BreedingsitesCreateLocationPointErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateLocationPointErrorComponent
     */
    'code': BreedingsitesCreateLocationPointErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateLocationPointErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateLocationPointErrorComponentAttrEnum = {
    LocationPoint: 'location.point'
} as const;

export type BreedingsitesCreateLocationPointErrorComponentAttrEnum = typeof BreedingsitesCreateLocationPointErrorComponentAttrEnum[keyof typeof BreedingsitesCreateLocationPointErrorComponentAttrEnum];
export const BreedingsitesCreateLocationPointErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Required: 'required'
} as const;

export type BreedingsitesCreateLocationPointErrorComponentCodeEnum = typeof BreedingsitesCreateLocationPointErrorComponentCodeEnum[keyof typeof BreedingsitesCreateLocationPointErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateLocationTypeErrorComponent
 */
export interface BreedingsitesCreateLocationTypeErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateLocationTypeErrorComponent
     */
    'attr': BreedingsitesCreateLocationTypeErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateLocationTypeErrorComponent
     */
    'code': BreedingsitesCreateLocationTypeErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateLocationTypeErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateLocationTypeErrorComponentAttrEnum = {
    LocationType: 'location.type'
} as const;

export type BreedingsitesCreateLocationTypeErrorComponentAttrEnum = typeof BreedingsitesCreateLocationTypeErrorComponentAttrEnum[keyof typeof BreedingsitesCreateLocationTypeErrorComponentAttrEnum];
export const BreedingsitesCreateLocationTypeErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice',
    Null: 'null',
    Required: 'required'
} as const;

export type BreedingsitesCreateLocationTypeErrorComponentCodeEnum = typeof BreedingsitesCreateLocationTypeErrorComponentCodeEnum[keyof typeof BreedingsitesCreateLocationTypeErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateNonFieldErrorsErrorComponent
 */
export interface BreedingsitesCreateNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateNonFieldErrorsErrorComponent
     */
    'attr': BreedingsitesCreateNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateNonFieldErrorsErrorComponent
     */
    'code': BreedingsitesCreateNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type BreedingsitesCreateNonFieldErrorsErrorComponentAttrEnum = typeof BreedingsitesCreateNonFieldErrorsErrorComponentAttrEnum[keyof typeof BreedingsitesCreateNonFieldErrorsErrorComponentAttrEnum];
export const BreedingsitesCreateNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type BreedingsitesCreateNonFieldErrorsErrorComponentCodeEnum = typeof BreedingsitesCreateNonFieldErrorsErrorComponentCodeEnum[keyof typeof BreedingsitesCreateNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateNoteErrorComponent
 */
export interface BreedingsitesCreateNoteErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateNoteErrorComponent
     */
    'attr': BreedingsitesCreateNoteErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateNoteErrorComponent
     */
    'code': BreedingsitesCreateNoteErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateNoteErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateNoteErrorComponentAttrEnum = {
    Note: 'note'
} as const;

export type BreedingsitesCreateNoteErrorComponentAttrEnum = typeof BreedingsitesCreateNoteErrorComponentAttrEnum[keyof typeof BreedingsitesCreateNoteErrorComponentAttrEnum];
export const BreedingsitesCreateNoteErrorComponentCodeEnum = {
    Invalid: 'invalid',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type BreedingsitesCreateNoteErrorComponentCodeEnum = typeof BreedingsitesCreateNoteErrorComponentCodeEnum[keyof typeof BreedingsitesCreateNoteErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreatePhotosINDEXFileErrorComponent
 */
export interface BreedingsitesCreatePhotosINDEXFileErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreatePhotosINDEXFileErrorComponent
     */
    'attr': BreedingsitesCreatePhotosINDEXFileErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreatePhotosINDEXFileErrorComponent
     */
    'code': BreedingsitesCreatePhotosINDEXFileErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreatePhotosINDEXFileErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreatePhotosINDEXFileErrorComponentAttrEnum = {
    PhotosIndexFile: 'photos.INDEX.file'
} as const;

export type BreedingsitesCreatePhotosINDEXFileErrorComponentAttrEnum = typeof BreedingsitesCreatePhotosINDEXFileErrorComponentAttrEnum[keyof typeof BreedingsitesCreatePhotosINDEXFileErrorComponentAttrEnum];
export const BreedingsitesCreatePhotosINDEXFileErrorComponentCodeEnum = {
    Empty: 'empty',
    Invalid: 'invalid',
    InvalidImage: 'invalid_image',
    NoName: 'no_name',
    Null: 'null',
    Required: 'required'
} as const;

export type BreedingsitesCreatePhotosINDEXFileErrorComponentCodeEnum = typeof BreedingsitesCreatePhotosINDEXFileErrorComponentCodeEnum[keyof typeof BreedingsitesCreatePhotosINDEXFileErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponent
 */
export interface BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponent
     */
    'attr': BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponent
     */
    'code': BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponentAttrEnum = {
    PhotosIndexNonFieldErrors: 'photos.INDEX.non_field_errors'
} as const;

export type BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponentAttrEnum = typeof BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponentAttrEnum[keyof typeof BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponentAttrEnum];
export const BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponentCodeEnum = typeof BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponentCodeEnum[keyof typeof BreedingsitesCreatePhotosINDEXNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreatePhotosNonFieldErrorsErrorComponent
 */
export interface BreedingsitesCreatePhotosNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreatePhotosNonFieldErrorsErrorComponent
     */
    'attr': BreedingsitesCreatePhotosNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreatePhotosNonFieldErrorsErrorComponent
     */
    'code': BreedingsitesCreatePhotosNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreatePhotosNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreatePhotosNonFieldErrorsErrorComponentAttrEnum = {
    PhotosNonFieldErrors: 'photos.non_field_errors'
} as const;

export type BreedingsitesCreatePhotosNonFieldErrorsErrorComponentAttrEnum = typeof BreedingsitesCreatePhotosNonFieldErrorsErrorComponentAttrEnum[keyof typeof BreedingsitesCreatePhotosNonFieldErrorsErrorComponentAttrEnum];
export const BreedingsitesCreatePhotosNonFieldErrorsErrorComponentCodeEnum = {
    NotAList: 'not_a_list',
    Null: 'null',
    Required: 'required'
} as const;

export type BreedingsitesCreatePhotosNonFieldErrorsErrorComponentCodeEnum = typeof BreedingsitesCreatePhotosNonFieldErrorsErrorComponentCodeEnum[keyof typeof BreedingsitesCreatePhotosNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateSentAtErrorComponent
 */
export interface BreedingsitesCreateSentAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateSentAtErrorComponent
     */
    'attr': BreedingsitesCreateSentAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateSentAtErrorComponent
     */
    'code': BreedingsitesCreateSentAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateSentAtErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateSentAtErrorComponentAttrEnum = {
    SentAt: 'sent_at'
} as const;

export type BreedingsitesCreateSentAtErrorComponentAttrEnum = typeof BreedingsitesCreateSentAtErrorComponentAttrEnum[keyof typeof BreedingsitesCreateSentAtErrorComponentAttrEnum];
export const BreedingsitesCreateSentAtErrorComponentCodeEnum = {
    Date: 'date',
    Invalid: 'invalid',
    MakeAware: 'make_aware',
    Null: 'null',
    Overflow: 'overflow',
    Required: 'required'
} as const;

export type BreedingsitesCreateSentAtErrorComponentCodeEnum = typeof BreedingsitesCreateSentAtErrorComponentCodeEnum[keyof typeof BreedingsitesCreateSentAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateSiteTypeErrorComponent
 */
export interface BreedingsitesCreateSiteTypeErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateSiteTypeErrorComponent
     */
    'attr': BreedingsitesCreateSiteTypeErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateSiteTypeErrorComponent
     */
    'code': BreedingsitesCreateSiteTypeErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateSiteTypeErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateSiteTypeErrorComponentAttrEnum = {
    SiteType: 'site_type'
} as const;

export type BreedingsitesCreateSiteTypeErrorComponentAttrEnum = typeof BreedingsitesCreateSiteTypeErrorComponentAttrEnum[keyof typeof BreedingsitesCreateSiteTypeErrorComponentAttrEnum];
export const BreedingsitesCreateSiteTypeErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice',
    Null: 'null'
} as const;

export type BreedingsitesCreateSiteTypeErrorComponentCodeEnum = typeof BreedingsitesCreateSiteTypeErrorComponentCodeEnum[keyof typeof BreedingsitesCreateSiteTypeErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateTagsErrorComponent
 */
export interface BreedingsitesCreateTagsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateTagsErrorComponent
     */
    'attr': BreedingsitesCreateTagsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateTagsErrorComponent
     */
    'code': BreedingsitesCreateTagsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateTagsErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateTagsErrorComponentAttrEnum = {
    Tags: 'tags'
} as const;

export type BreedingsitesCreateTagsErrorComponentAttrEnum = typeof BreedingsitesCreateTagsErrorComponentAttrEnum[keyof typeof BreedingsitesCreateTagsErrorComponentAttrEnum];
export const BreedingsitesCreateTagsErrorComponentCodeEnum = {
    InvalidJson: 'invalid_json',
    NotAList: 'not_a_list',
    NotAStr: 'not_a_str',
    Null: 'null'
} as const;

export type BreedingsitesCreateTagsErrorComponentCodeEnum = typeof BreedingsitesCreateTagsErrorComponentCodeEnum[keyof typeof BreedingsitesCreateTagsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateTagsINDEXErrorComponent
 */
export interface BreedingsitesCreateTagsINDEXErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateTagsINDEXErrorComponent
     */
    'attr': BreedingsitesCreateTagsINDEXErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateTagsINDEXErrorComponent
     */
    'code': BreedingsitesCreateTagsINDEXErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateTagsINDEXErrorComponent
     */
    'detail': string;
}

export const BreedingsitesCreateTagsINDEXErrorComponentAttrEnum = {
    TagsIndex: 'tags.INDEX'
} as const;

export type BreedingsitesCreateTagsINDEXErrorComponentAttrEnum = typeof BreedingsitesCreateTagsINDEXErrorComponentAttrEnum[keyof typeof BreedingsitesCreateTagsINDEXErrorComponentAttrEnum];
export const BreedingsitesCreateTagsINDEXErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type BreedingsitesCreateTagsINDEXErrorComponentCodeEnum = typeof BreedingsitesCreateTagsINDEXErrorComponentCodeEnum[keyof typeof BreedingsitesCreateTagsINDEXErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesCreateValidationError
 */
export interface BreedingsitesCreateValidationError {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesCreateValidationError
     */
    'type': BreedingsitesCreateValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<BreedingsitesCreateError>}
     * @memberof BreedingsitesCreateValidationError
     */
    'errors': Array<BreedingsitesCreateError>;
}

export const BreedingsitesCreateValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type BreedingsitesCreateValidationErrorTypeEnum = typeof BreedingsitesCreateValidationErrorTypeEnum[keyof typeof BreedingsitesCreateValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListCreatedAtErrorComponent
 */
export interface BreedingsitesListCreatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListCreatedAtErrorComponent
     */
    'attr': BreedingsitesListCreatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListCreatedAtErrorComponent
     */
    'code': BreedingsitesListCreatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListCreatedAtErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListCreatedAtErrorComponentAttrEnum = {
    CreatedAt: 'created_at'
} as const;

export type BreedingsitesListCreatedAtErrorComponentAttrEnum = typeof BreedingsitesListCreatedAtErrorComponentAttrEnum[keyof typeof BreedingsitesListCreatedAtErrorComponentAttrEnum];
export const BreedingsitesListCreatedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BreedingsitesListCreatedAtErrorComponentCodeEnum = typeof BreedingsitesListCreatedAtErrorComponentCodeEnum[keyof typeof BreedingsitesListCreatedAtErrorComponentCodeEnum];

/**
 * @type BreedingsitesListError
 * @export
 */
export type BreedingsitesListError = { attr: 'created_at' } & BreedingsitesListCreatedAtErrorComponent | { attr: 'location_country_id' } & BreedingsitesListLocationCountryIdErrorComponent | { attr: 'location_nuts_2' } & BreedingsitesListLocationNuts2ErrorComponent | { attr: 'location_nuts_3' } & BreedingsitesListLocationNuts3ErrorComponent | { attr: 'order_by' } & BreedingsitesListOrderByErrorComponent | { attr: 'received_at' } & BreedingsitesListReceivedAtErrorComponent | { attr: 'short_id' } & BreedingsitesListShortIdErrorComponent | { attr: 'updated_at' } & BreedingsitesListUpdatedAtErrorComponent | { attr: 'user_uuid' } & BreedingsitesListUserUuidErrorComponent;

/**
 * 
 * @export
 * @interface BreedingsitesListLocationCountryIdErrorComponent
 */
export interface BreedingsitesListLocationCountryIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListLocationCountryIdErrorComponent
     */
    'attr': BreedingsitesListLocationCountryIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListLocationCountryIdErrorComponent
     */
    'code': BreedingsitesListLocationCountryIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListLocationCountryIdErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListLocationCountryIdErrorComponentAttrEnum = {
    LocationCountryId: 'location_country_id'
} as const;

export type BreedingsitesListLocationCountryIdErrorComponentAttrEnum = typeof BreedingsitesListLocationCountryIdErrorComponentAttrEnum[keyof typeof BreedingsitesListLocationCountryIdErrorComponentAttrEnum];
export const BreedingsitesListLocationCountryIdErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type BreedingsitesListLocationCountryIdErrorComponentCodeEnum = typeof BreedingsitesListLocationCountryIdErrorComponentCodeEnum[keyof typeof BreedingsitesListLocationCountryIdErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListLocationNuts2ErrorComponent
 */
export interface BreedingsitesListLocationNuts2ErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListLocationNuts2ErrorComponent
     */
    'attr': BreedingsitesListLocationNuts2ErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListLocationNuts2ErrorComponent
     */
    'code': BreedingsitesListLocationNuts2ErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListLocationNuts2ErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListLocationNuts2ErrorComponentAttrEnum = {
    LocationNuts2: 'location_nuts_2'
} as const;

export type BreedingsitesListLocationNuts2ErrorComponentAttrEnum = typeof BreedingsitesListLocationNuts2ErrorComponentAttrEnum[keyof typeof BreedingsitesListLocationNuts2ErrorComponentAttrEnum];
export const BreedingsitesListLocationNuts2ErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BreedingsitesListLocationNuts2ErrorComponentCodeEnum = typeof BreedingsitesListLocationNuts2ErrorComponentCodeEnum[keyof typeof BreedingsitesListLocationNuts2ErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListLocationNuts3ErrorComponent
 */
export interface BreedingsitesListLocationNuts3ErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListLocationNuts3ErrorComponent
     */
    'attr': BreedingsitesListLocationNuts3ErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListLocationNuts3ErrorComponent
     */
    'code': BreedingsitesListLocationNuts3ErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListLocationNuts3ErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListLocationNuts3ErrorComponentAttrEnum = {
    LocationNuts3: 'location_nuts_3'
} as const;

export type BreedingsitesListLocationNuts3ErrorComponentAttrEnum = typeof BreedingsitesListLocationNuts3ErrorComponentAttrEnum[keyof typeof BreedingsitesListLocationNuts3ErrorComponentAttrEnum];
export const BreedingsitesListLocationNuts3ErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BreedingsitesListLocationNuts3ErrorComponentCodeEnum = typeof BreedingsitesListLocationNuts3ErrorComponentCodeEnum[keyof typeof BreedingsitesListLocationNuts3ErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListMineCreatedAtErrorComponent
 */
export interface BreedingsitesListMineCreatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineCreatedAtErrorComponent
     */
    'attr': BreedingsitesListMineCreatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineCreatedAtErrorComponent
     */
    'code': BreedingsitesListMineCreatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineCreatedAtErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListMineCreatedAtErrorComponentAttrEnum = {
    CreatedAt: 'created_at'
} as const;

export type BreedingsitesListMineCreatedAtErrorComponentAttrEnum = typeof BreedingsitesListMineCreatedAtErrorComponentAttrEnum[keyof typeof BreedingsitesListMineCreatedAtErrorComponentAttrEnum];
export const BreedingsitesListMineCreatedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BreedingsitesListMineCreatedAtErrorComponentCodeEnum = typeof BreedingsitesListMineCreatedAtErrorComponentCodeEnum[keyof typeof BreedingsitesListMineCreatedAtErrorComponentCodeEnum];

/**
 * @type BreedingsitesListMineError
 * @export
 */
export type BreedingsitesListMineError = { attr: 'created_at' } & BreedingsitesListMineCreatedAtErrorComponent | { attr: 'location_country_id' } & BreedingsitesListMineLocationCountryIdErrorComponent | { attr: 'location_nuts_2' } & BreedingsitesListMineLocationNuts2ErrorComponent | { attr: 'location_nuts_3' } & BreedingsitesListMineLocationNuts3ErrorComponent | { attr: 'order_by' } & BreedingsitesListMineOrderByErrorComponent | { attr: 'received_at' } & BreedingsitesListMineReceivedAtErrorComponent | { attr: 'short_id' } & BreedingsitesListMineShortIdErrorComponent | { attr: 'updated_at' } & BreedingsitesListMineUpdatedAtErrorComponent | { attr: 'user_uuid' } & BreedingsitesListMineUserUuidErrorComponent;

/**
 * 
 * @export
 * @interface BreedingsitesListMineLocationCountryIdErrorComponent
 */
export interface BreedingsitesListMineLocationCountryIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineLocationCountryIdErrorComponent
     */
    'attr': BreedingsitesListMineLocationCountryIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineLocationCountryIdErrorComponent
     */
    'code': BreedingsitesListMineLocationCountryIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineLocationCountryIdErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListMineLocationCountryIdErrorComponentAttrEnum = {
    LocationCountryId: 'location_country_id'
} as const;

export type BreedingsitesListMineLocationCountryIdErrorComponentAttrEnum = typeof BreedingsitesListMineLocationCountryIdErrorComponentAttrEnum[keyof typeof BreedingsitesListMineLocationCountryIdErrorComponentAttrEnum];
export const BreedingsitesListMineLocationCountryIdErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type BreedingsitesListMineLocationCountryIdErrorComponentCodeEnum = typeof BreedingsitesListMineLocationCountryIdErrorComponentCodeEnum[keyof typeof BreedingsitesListMineLocationCountryIdErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListMineLocationNuts2ErrorComponent
 */
export interface BreedingsitesListMineLocationNuts2ErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineLocationNuts2ErrorComponent
     */
    'attr': BreedingsitesListMineLocationNuts2ErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineLocationNuts2ErrorComponent
     */
    'code': BreedingsitesListMineLocationNuts2ErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineLocationNuts2ErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListMineLocationNuts2ErrorComponentAttrEnum = {
    LocationNuts2: 'location_nuts_2'
} as const;

export type BreedingsitesListMineLocationNuts2ErrorComponentAttrEnum = typeof BreedingsitesListMineLocationNuts2ErrorComponentAttrEnum[keyof typeof BreedingsitesListMineLocationNuts2ErrorComponentAttrEnum];
export const BreedingsitesListMineLocationNuts2ErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BreedingsitesListMineLocationNuts2ErrorComponentCodeEnum = typeof BreedingsitesListMineLocationNuts2ErrorComponentCodeEnum[keyof typeof BreedingsitesListMineLocationNuts2ErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListMineLocationNuts3ErrorComponent
 */
export interface BreedingsitesListMineLocationNuts3ErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineLocationNuts3ErrorComponent
     */
    'attr': BreedingsitesListMineLocationNuts3ErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineLocationNuts3ErrorComponent
     */
    'code': BreedingsitesListMineLocationNuts3ErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineLocationNuts3ErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListMineLocationNuts3ErrorComponentAttrEnum = {
    LocationNuts3: 'location_nuts_3'
} as const;

export type BreedingsitesListMineLocationNuts3ErrorComponentAttrEnum = typeof BreedingsitesListMineLocationNuts3ErrorComponentAttrEnum[keyof typeof BreedingsitesListMineLocationNuts3ErrorComponentAttrEnum];
export const BreedingsitesListMineLocationNuts3ErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BreedingsitesListMineLocationNuts3ErrorComponentCodeEnum = typeof BreedingsitesListMineLocationNuts3ErrorComponentCodeEnum[keyof typeof BreedingsitesListMineLocationNuts3ErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListMineOrderByErrorComponent
 */
export interface BreedingsitesListMineOrderByErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineOrderByErrorComponent
     */
    'attr': BreedingsitesListMineOrderByErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineOrderByErrorComponent
     */
    'code': BreedingsitesListMineOrderByErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineOrderByErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListMineOrderByErrorComponentAttrEnum = {
    OrderBy: 'order_by'
} as const;

export type BreedingsitesListMineOrderByErrorComponentAttrEnum = typeof BreedingsitesListMineOrderByErrorComponentAttrEnum[keyof typeof BreedingsitesListMineOrderByErrorComponentAttrEnum];
export const BreedingsitesListMineOrderByErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type BreedingsitesListMineOrderByErrorComponentCodeEnum = typeof BreedingsitesListMineOrderByErrorComponentCodeEnum[keyof typeof BreedingsitesListMineOrderByErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListMineReceivedAtErrorComponent
 */
export interface BreedingsitesListMineReceivedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineReceivedAtErrorComponent
     */
    'attr': BreedingsitesListMineReceivedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineReceivedAtErrorComponent
     */
    'code': BreedingsitesListMineReceivedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineReceivedAtErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListMineReceivedAtErrorComponentAttrEnum = {
    ReceivedAt: 'received_at'
} as const;

export type BreedingsitesListMineReceivedAtErrorComponentAttrEnum = typeof BreedingsitesListMineReceivedAtErrorComponentAttrEnum[keyof typeof BreedingsitesListMineReceivedAtErrorComponentAttrEnum];
export const BreedingsitesListMineReceivedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BreedingsitesListMineReceivedAtErrorComponentCodeEnum = typeof BreedingsitesListMineReceivedAtErrorComponentCodeEnum[keyof typeof BreedingsitesListMineReceivedAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListMineShortIdErrorComponent
 */
export interface BreedingsitesListMineShortIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineShortIdErrorComponent
     */
    'attr': BreedingsitesListMineShortIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineShortIdErrorComponent
     */
    'code': BreedingsitesListMineShortIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineShortIdErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListMineShortIdErrorComponentAttrEnum = {
    ShortId: 'short_id'
} as const;

export type BreedingsitesListMineShortIdErrorComponentAttrEnum = typeof BreedingsitesListMineShortIdErrorComponentAttrEnum[keyof typeof BreedingsitesListMineShortIdErrorComponentAttrEnum];
export const BreedingsitesListMineShortIdErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BreedingsitesListMineShortIdErrorComponentCodeEnum = typeof BreedingsitesListMineShortIdErrorComponentCodeEnum[keyof typeof BreedingsitesListMineShortIdErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListMineUpdatedAtErrorComponent
 */
export interface BreedingsitesListMineUpdatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineUpdatedAtErrorComponent
     */
    'attr': BreedingsitesListMineUpdatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineUpdatedAtErrorComponent
     */
    'code': BreedingsitesListMineUpdatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineUpdatedAtErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListMineUpdatedAtErrorComponentAttrEnum = {
    UpdatedAt: 'updated_at'
} as const;

export type BreedingsitesListMineUpdatedAtErrorComponentAttrEnum = typeof BreedingsitesListMineUpdatedAtErrorComponentAttrEnum[keyof typeof BreedingsitesListMineUpdatedAtErrorComponentAttrEnum];
export const BreedingsitesListMineUpdatedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BreedingsitesListMineUpdatedAtErrorComponentCodeEnum = typeof BreedingsitesListMineUpdatedAtErrorComponentCodeEnum[keyof typeof BreedingsitesListMineUpdatedAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListMineUserUuidErrorComponent
 */
export interface BreedingsitesListMineUserUuidErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineUserUuidErrorComponent
     */
    'attr': BreedingsitesListMineUserUuidErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineUserUuidErrorComponent
     */
    'code': BreedingsitesListMineUserUuidErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineUserUuidErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListMineUserUuidErrorComponentAttrEnum = {
    UserUuid: 'user_uuid'
} as const;

export type BreedingsitesListMineUserUuidErrorComponentAttrEnum = typeof BreedingsitesListMineUserUuidErrorComponentAttrEnum[keyof typeof BreedingsitesListMineUserUuidErrorComponentAttrEnum];
export const BreedingsitesListMineUserUuidErrorComponentCodeEnum = {
    Invalid: 'invalid',
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BreedingsitesListMineUserUuidErrorComponentCodeEnum = typeof BreedingsitesListMineUserUuidErrorComponentCodeEnum[keyof typeof BreedingsitesListMineUserUuidErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListMineValidationError
 */
export interface BreedingsitesListMineValidationError {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListMineValidationError
     */
    'type': BreedingsitesListMineValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<BreedingsitesListMineError>}
     * @memberof BreedingsitesListMineValidationError
     */
    'errors': Array<BreedingsitesListMineError>;
}

export const BreedingsitesListMineValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type BreedingsitesListMineValidationErrorTypeEnum = typeof BreedingsitesListMineValidationErrorTypeEnum[keyof typeof BreedingsitesListMineValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListOrderByErrorComponent
 */
export interface BreedingsitesListOrderByErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListOrderByErrorComponent
     */
    'attr': BreedingsitesListOrderByErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListOrderByErrorComponent
     */
    'code': BreedingsitesListOrderByErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListOrderByErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListOrderByErrorComponentAttrEnum = {
    OrderBy: 'order_by'
} as const;

export type BreedingsitesListOrderByErrorComponentAttrEnum = typeof BreedingsitesListOrderByErrorComponentAttrEnum[keyof typeof BreedingsitesListOrderByErrorComponentAttrEnum];
export const BreedingsitesListOrderByErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type BreedingsitesListOrderByErrorComponentCodeEnum = typeof BreedingsitesListOrderByErrorComponentCodeEnum[keyof typeof BreedingsitesListOrderByErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListReceivedAtErrorComponent
 */
export interface BreedingsitesListReceivedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListReceivedAtErrorComponent
     */
    'attr': BreedingsitesListReceivedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListReceivedAtErrorComponent
     */
    'code': BreedingsitesListReceivedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListReceivedAtErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListReceivedAtErrorComponentAttrEnum = {
    ReceivedAt: 'received_at'
} as const;

export type BreedingsitesListReceivedAtErrorComponentAttrEnum = typeof BreedingsitesListReceivedAtErrorComponentAttrEnum[keyof typeof BreedingsitesListReceivedAtErrorComponentAttrEnum];
export const BreedingsitesListReceivedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BreedingsitesListReceivedAtErrorComponentCodeEnum = typeof BreedingsitesListReceivedAtErrorComponentCodeEnum[keyof typeof BreedingsitesListReceivedAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListShortIdErrorComponent
 */
export interface BreedingsitesListShortIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListShortIdErrorComponent
     */
    'attr': BreedingsitesListShortIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListShortIdErrorComponent
     */
    'code': BreedingsitesListShortIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListShortIdErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListShortIdErrorComponentAttrEnum = {
    ShortId: 'short_id'
} as const;

export type BreedingsitesListShortIdErrorComponentAttrEnum = typeof BreedingsitesListShortIdErrorComponentAttrEnum[keyof typeof BreedingsitesListShortIdErrorComponentAttrEnum];
export const BreedingsitesListShortIdErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BreedingsitesListShortIdErrorComponentCodeEnum = typeof BreedingsitesListShortIdErrorComponentCodeEnum[keyof typeof BreedingsitesListShortIdErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListUpdatedAtErrorComponent
 */
export interface BreedingsitesListUpdatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListUpdatedAtErrorComponent
     */
    'attr': BreedingsitesListUpdatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListUpdatedAtErrorComponent
     */
    'code': BreedingsitesListUpdatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListUpdatedAtErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListUpdatedAtErrorComponentAttrEnum = {
    UpdatedAt: 'updated_at'
} as const;

export type BreedingsitesListUpdatedAtErrorComponentAttrEnum = typeof BreedingsitesListUpdatedAtErrorComponentAttrEnum[keyof typeof BreedingsitesListUpdatedAtErrorComponentAttrEnum];
export const BreedingsitesListUpdatedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type BreedingsitesListUpdatedAtErrorComponentCodeEnum = typeof BreedingsitesListUpdatedAtErrorComponentCodeEnum[keyof typeof BreedingsitesListUpdatedAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListUserUuidErrorComponent
 */
export interface BreedingsitesListUserUuidErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListUserUuidErrorComponent
     */
    'attr': BreedingsitesListUserUuidErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListUserUuidErrorComponent
     */
    'code': BreedingsitesListUserUuidErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListUserUuidErrorComponent
     */
    'detail': string;
}

export const BreedingsitesListUserUuidErrorComponentAttrEnum = {
    UserUuid: 'user_uuid'
} as const;

export type BreedingsitesListUserUuidErrorComponentAttrEnum = typeof BreedingsitesListUserUuidErrorComponentAttrEnum[keyof typeof BreedingsitesListUserUuidErrorComponentAttrEnum];
export const BreedingsitesListUserUuidErrorComponentCodeEnum = {
    Invalid: 'invalid',
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type BreedingsitesListUserUuidErrorComponentCodeEnum = typeof BreedingsitesListUserUuidErrorComponentCodeEnum[keyof typeof BreedingsitesListUserUuidErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface BreedingsitesListValidationError
 */
export interface BreedingsitesListValidationError {
    /**
     * 
     * @type {string}
     * @memberof BreedingsitesListValidationError
     */
    'type': BreedingsitesListValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<BreedingsitesListError>}
     * @memberof BreedingsitesListValidationError
     */
    'errors': Array<BreedingsitesListError>;
}

export const BreedingsitesListValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type BreedingsitesListValidationErrorTypeEnum = typeof BreedingsitesListValidationErrorTypeEnum[keyof typeof BreedingsitesListValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface Campaign
 */
export interface Campaign {
    /**
     * 
     * @type {number}
     * @memberof Campaign
     */
    'id': number;
    /**
     * Country in which the campaign is taking place
     * @type {number}
     * @memberof Campaign
     */
    'country_id': number;
    /**
     * Full posting address of the place where the samples will be sent
     * @type {string}
     * @memberof Campaign
     */
    'posting_address': string;
    /**
     * Date when the campaign starts. No samples should be collected BEFORE this date.
     * @type {string}
     * @memberof Campaign
     */
    'start_date': string;
    /**
     * Date when the campaign ends. No samples should be collected AFTER this date.
     * @type {string}
     * @memberof Campaign
     */
    'end_date': string;
}
/**
 * 
 * @export
 * @interface CampaignsListCountryIdErrorComponent
 */
export interface CampaignsListCountryIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof CampaignsListCountryIdErrorComponent
     */
    'attr': CampaignsListCountryIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof CampaignsListCountryIdErrorComponent
     */
    'code': CampaignsListCountryIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof CampaignsListCountryIdErrorComponent
     */
    'detail': string;
}

export const CampaignsListCountryIdErrorComponentAttrEnum = {
    CountryId: 'country_id'
} as const;

export type CampaignsListCountryIdErrorComponentAttrEnum = typeof CampaignsListCountryIdErrorComponentAttrEnum[keyof typeof CampaignsListCountryIdErrorComponentAttrEnum];
export const CampaignsListCountryIdErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type CampaignsListCountryIdErrorComponentCodeEnum = typeof CampaignsListCountryIdErrorComponentCodeEnum[keyof typeof CampaignsListCountryIdErrorComponentCodeEnum];

/**
 * @type CampaignsListError
 * @export
 */
export type CampaignsListError = { attr: 'country_id' } & CampaignsListCountryIdErrorComponent | { attr: 'order_by' } & CampaignsListOrderByErrorComponent;

/**
 * 
 * @export
 * @interface CampaignsListOrderByErrorComponent
 */
export interface CampaignsListOrderByErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof CampaignsListOrderByErrorComponent
     */
    'attr': CampaignsListOrderByErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof CampaignsListOrderByErrorComponent
     */
    'code': CampaignsListOrderByErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof CampaignsListOrderByErrorComponent
     */
    'detail': string;
}

export const CampaignsListOrderByErrorComponentAttrEnum = {
    OrderBy: 'order_by'
} as const;

export type CampaignsListOrderByErrorComponentAttrEnum = typeof CampaignsListOrderByErrorComponentAttrEnum[keyof typeof CampaignsListOrderByErrorComponentAttrEnum];
export const CampaignsListOrderByErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type CampaignsListOrderByErrorComponentCodeEnum = typeof CampaignsListOrderByErrorComponentCodeEnum[keyof typeof CampaignsListOrderByErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface CampaignsListValidationError
 */
export interface CampaignsListValidationError {
    /**
     * 
     * @type {string}
     * @memberof CampaignsListValidationError
     */
    'type': CampaignsListValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<CampaignsListError>}
     * @memberof CampaignsListValidationError
     */
    'errors': Array<CampaignsListError>;
}

export const CampaignsListValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type CampaignsListValidationErrorTypeEnum = typeof CampaignsListValidationErrorTypeEnum[keyof typeof CampaignsListValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * 
     * @type {number}
     * @memberof Country
     */
    'id': number;
    /**
     * Full name of the country in English (e.g., Spain).
     * @type {string}
     * @memberof Country
     */
    'name_en': string;
    /**
     * ISO 3166-1 alpha-3 country code (3-letter code, e.g., ESP).
     * @type {string}
     * @memberof Country
     */
    'iso3_code': string;
}
/**
 * 
 * @export
 * @interface CreateNotification
 */
export interface CreateNotification {
    /**
     * 
     * @type {number}
     * @memberof CreateNotification
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CreateNotification
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface CreateNotificationMessage
 */
export interface CreateNotificationMessage {
    /**
     * Provide the message\'s title in all supported languages
     * @type {LocalizedField}
     * @memberof CreateNotificationMessage
     */
    'title': LocalizedField;
    /**
     * Provide the message\'s body in all supported languages
     * @type {LocalizedField}
     * @memberof CreateNotificationMessage
     */
    'body': LocalizedField;
}
/**
 * 
 * @export
 * @interface CreateNotificationMessageRequest
 */
export interface CreateNotificationMessageRequest {
    /**
     * Provide the message\'s title in all supported languages
     * @type {LocalizedFieldRequest}
     * @memberof CreateNotificationMessageRequest
     */
    'title': LocalizedFieldRequest;
    /**
     * Provide the message\'s body in all supported languages
     * @type {LocalizedFieldRequest}
     * @memberof CreateNotificationMessageRequest
     */
    'body': LocalizedFieldRequest;
}
/**
 * 
 * @export
 * @interface Device
 */
export interface Device {
    /**
     * Unique device identifier
     * @type {string}
     * @memberof Device
     */
    'device_id': string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'type': DeviceTypeEnum;
    /**
     * The manufacturer of the device.
     * @type {string}
     * @memberof Device
     */
    'manufacturer'?: string | null;
    /**
     * The end-user-visible name for the end product.
     * @type {string}
     * @memberof Device
     */
    'model': string;
    /**
     * 
     * @type {DeviceOs}
     * @memberof Device
     */
    'os': DeviceOs;
    /**
     * 
     * @type {MobileApp}
     * @memberof Device
     */
    'mobile_app'?: MobileApp;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'user_uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'last_login': string | null;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Device
     */
    'updated_at': string;
}

export const DeviceTypeEnum = {
    Ios: 'ios',
    Android: 'android',
    Web: 'web'
} as const;

export type DeviceTypeEnum = typeof DeviceTypeEnum[keyof typeof DeviceTypeEnum];

/**
 * 
 * @export
 * @interface DeviceOs
 */
export interface DeviceOs {
    /**
     * Operating system of device from which this report was submitted.
     * @type {string}
     * @memberof DeviceOs
     */
    'name': string;
    /**
     * Operating system version of device from which this report was submitted.
     * @type {string}
     * @memberof DeviceOs
     */
    'version': string;
    /**
     * The locale configured in the device following the BCP 47 standard in \'language\' or \'language-region\' format (e.g., \'en\' for English, \'en-US\' for English (United States), \'fr\' for French). The language is a two-letter ISO 639-1 code, and the region is an optional two-letter ISO 3166-1 alpha-2 code.
     * @type {string}
     * @memberof DeviceOs
     */
    'locale'?: string | null;
}
/**
 * 
 * @export
 * @interface DeviceOsRequest
 */
export interface DeviceOsRequest {
    /**
     * Operating system of device from which this report was submitted.
     * @type {string}
     * @memberof DeviceOsRequest
     */
    'name': string;
    /**
     * Operating system version of device from which this report was submitted.
     * @type {string}
     * @memberof DeviceOsRequest
     */
    'version': string;
    /**
     * The locale configured in the device following the BCP 47 standard in \'language\' or \'language-region\' format (e.g., \'en\' for English, \'en-US\' for English (United States), \'fr\' for French). The language is a two-letter ISO 639-1 code, and the region is an optional two-letter ISO 3166-1 alpha-2 code.
     * @type {string}
     * @memberof DeviceOsRequest
     */
    'locale'?: string | null;
}
/**
 * 
 * @export
 * @interface DeviceRequest
 */
export interface DeviceRequest {
    /**
     * Unique device identifier
     * @type {string}
     * @memberof DeviceRequest
     */
    'device_id': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceRequest
     */
    'fcm_token': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceRequest
     */
    'type': DeviceRequestTypeEnum;
    /**
     * The manufacturer of the device.
     * @type {string}
     * @memberof DeviceRequest
     */
    'manufacturer'?: string | null;
    /**
     * The end-user-visible name for the end product.
     * @type {string}
     * @memberof DeviceRequest
     */
    'model': string;
    /**
     * 
     * @type {DeviceOsRequest}
     * @memberof DeviceRequest
     */
    'os': DeviceOsRequest;
    /**
     * 
     * @type {MobileAppRequest}
     * @memberof DeviceRequest
     */
    'mobile_app'?: MobileAppRequest;
}

export const DeviceRequestTypeEnum = {
    Ios: 'ios',
    Android: 'android',
    Web: 'web'
} as const;

export type DeviceRequestTypeEnum = typeof DeviceRequestTypeEnum[keyof typeof DeviceRequestTypeEnum];

/**
 * 
 * @export
 * @interface DeviceUpdate
 */
export interface DeviceUpdate {
    /**
     * Unique device identifier
     * @type {string}
     * @memberof DeviceUpdate
     */
    'device_id': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceUpdate
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceUpdate
     */
    'type': DeviceUpdateTypeEnum;
    /**
     * The manufacturer of the device.
     * @type {string}
     * @memberof DeviceUpdate
     */
    'manufacturer': string;
    /**
     * The end-user-visible name for the end product.
     * @type {string}
     * @memberof DeviceUpdate
     */
    'model': string;
    /**
     * 
     * @type {DeviceOs}
     * @memberof DeviceUpdate
     */
    'os': DeviceOs;
    /**
     * 
     * @type {MobileApp}
     * @memberof DeviceUpdate
     */
    'mobile_app'?: MobileApp;
    /**
     * 
     * @type {string}
     * @memberof DeviceUpdate
     */
    'user_uuid': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceUpdate
     */
    'last_login': string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceUpdate
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof DeviceUpdate
     */
    'updated_at': string;
}

export const DeviceUpdateTypeEnum = {
    Ios: 'ios',
    Android: 'android',
    Web: 'web'
} as const;

export type DeviceUpdateTypeEnum = typeof DeviceUpdateTypeEnum[keyof typeof DeviceUpdateTypeEnum];

/**
 * 
 * @export
 * @interface DeviceUpdateRequest
 */
export interface DeviceUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof DeviceUpdateRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DeviceUpdateRequest
     */
    'fcm_token': string;
    /**
     * 
     * @type {DeviceOsRequest}
     * @memberof DeviceUpdateRequest
     */
    'os': DeviceOsRequest;
    /**
     * 
     * @type {MobileAppRequest}
     * @memberof DeviceUpdateRequest
     */
    'mobile_app'?: MobileAppRequest;
}
/**
 * 
 * @export
 * @interface DevicesCreateDeviceIdErrorComponent
 */
export interface DevicesCreateDeviceIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateDeviceIdErrorComponent
     */
    'attr': DevicesCreateDeviceIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateDeviceIdErrorComponent
     */
    'code': DevicesCreateDeviceIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateDeviceIdErrorComponent
     */
    'detail': string;
}

export const DevicesCreateDeviceIdErrorComponentAttrEnum = {
    DeviceId: 'device_id'
} as const;

export type DevicesCreateDeviceIdErrorComponentAttrEnum = typeof DevicesCreateDeviceIdErrorComponentAttrEnum[keyof typeof DevicesCreateDeviceIdErrorComponentAttrEnum];
export const DevicesCreateDeviceIdErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesCreateDeviceIdErrorComponentCodeEnum = typeof DevicesCreateDeviceIdErrorComponentCodeEnum[keyof typeof DevicesCreateDeviceIdErrorComponentCodeEnum];

/**
 * @type DevicesCreateError
 * @export
 */
export type DevicesCreateError = { attr: 'device_id' } & DevicesCreateDeviceIdErrorComponent | { attr: 'fcm_token' } & DevicesCreateFcmTokenErrorComponent | { attr: 'manufacturer' } & DevicesCreateManufacturerErrorComponent | { attr: 'mobile_app.non_field_errors' } & DevicesCreateMobileAppNonFieldErrorsErrorComponent | { attr: 'mobile_app.package_name' } & DevicesCreateMobileAppPackageNameErrorComponent | { attr: 'mobile_app.package_version' } & DevicesCreateMobileAppPackageVersionErrorComponent | { attr: 'model' } & DevicesCreateModelErrorComponent | { attr: 'name' } & DevicesCreateNameErrorComponent | { attr: 'non_field_errors' } & DevicesCreateNonFieldErrorsErrorComponent | { attr: 'os.locale' } & DevicesCreateOsLocaleErrorComponent | { attr: 'os.name' } & DevicesCreateOsNameErrorComponent | { attr: 'os.non_field_errors' } & DevicesCreateOsNonFieldErrorsErrorComponent | { attr: 'os.version' } & DevicesCreateOsVersionErrorComponent | { attr: 'type' } & DevicesCreateTypeErrorComponent;

/**
 * 
 * @export
 * @interface DevicesCreateFcmTokenErrorComponent
 */
export interface DevicesCreateFcmTokenErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateFcmTokenErrorComponent
     */
    'attr': DevicesCreateFcmTokenErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateFcmTokenErrorComponent
     */
    'code': DevicesCreateFcmTokenErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateFcmTokenErrorComponent
     */
    'detail': string;
}

export const DevicesCreateFcmTokenErrorComponentAttrEnum = {
    FcmToken: 'fcm_token'
} as const;

export type DevicesCreateFcmTokenErrorComponentAttrEnum = typeof DevicesCreateFcmTokenErrorComponentAttrEnum[keyof typeof DevicesCreateFcmTokenErrorComponentAttrEnum];
export const DevicesCreateFcmTokenErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesCreateFcmTokenErrorComponentCodeEnum = typeof DevicesCreateFcmTokenErrorComponentCodeEnum[keyof typeof DevicesCreateFcmTokenErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateManufacturerErrorComponent
 */
export interface DevicesCreateManufacturerErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateManufacturerErrorComponent
     */
    'attr': DevicesCreateManufacturerErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateManufacturerErrorComponent
     */
    'code': DevicesCreateManufacturerErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateManufacturerErrorComponent
     */
    'detail': string;
}

export const DevicesCreateManufacturerErrorComponentAttrEnum = {
    Manufacturer: 'manufacturer'
} as const;

export type DevicesCreateManufacturerErrorComponentAttrEnum = typeof DevicesCreateManufacturerErrorComponentAttrEnum[keyof typeof DevicesCreateManufacturerErrorComponentAttrEnum];
export const DevicesCreateManufacturerErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesCreateManufacturerErrorComponentCodeEnum = typeof DevicesCreateManufacturerErrorComponentCodeEnum[keyof typeof DevicesCreateManufacturerErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateMobileAppNonFieldErrorsErrorComponent
 */
export interface DevicesCreateMobileAppNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateMobileAppNonFieldErrorsErrorComponent
     */
    'attr': DevicesCreateMobileAppNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateMobileAppNonFieldErrorsErrorComponent
     */
    'code': DevicesCreateMobileAppNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateMobileAppNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const DevicesCreateMobileAppNonFieldErrorsErrorComponentAttrEnum = {
    MobileAppNonFieldErrors: 'mobile_app.non_field_errors'
} as const;

export type DevicesCreateMobileAppNonFieldErrorsErrorComponentAttrEnum = typeof DevicesCreateMobileAppNonFieldErrorsErrorComponentAttrEnum[keyof typeof DevicesCreateMobileAppNonFieldErrorsErrorComponentAttrEnum];
export const DevicesCreateMobileAppNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type DevicesCreateMobileAppNonFieldErrorsErrorComponentCodeEnum = typeof DevicesCreateMobileAppNonFieldErrorsErrorComponentCodeEnum[keyof typeof DevicesCreateMobileAppNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateMobileAppPackageNameErrorComponent
 */
export interface DevicesCreateMobileAppPackageNameErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateMobileAppPackageNameErrorComponent
     */
    'attr': DevicesCreateMobileAppPackageNameErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateMobileAppPackageNameErrorComponent
     */
    'code': DevicesCreateMobileAppPackageNameErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateMobileAppPackageNameErrorComponent
     */
    'detail': string;
}

export const DevicesCreateMobileAppPackageNameErrorComponentAttrEnum = {
    MobileAppPackageName: 'mobile_app.package_name'
} as const;

export type DevicesCreateMobileAppPackageNameErrorComponentAttrEnum = typeof DevicesCreateMobileAppPackageNameErrorComponentAttrEnum[keyof typeof DevicesCreateMobileAppPackageNameErrorComponentAttrEnum];
export const DevicesCreateMobileAppPackageNameErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesCreateMobileAppPackageNameErrorComponentCodeEnum = typeof DevicesCreateMobileAppPackageNameErrorComponentCodeEnum[keyof typeof DevicesCreateMobileAppPackageNameErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateMobileAppPackageVersionErrorComponent
 */
export interface DevicesCreateMobileAppPackageVersionErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateMobileAppPackageVersionErrorComponent
     */
    'attr': DevicesCreateMobileAppPackageVersionErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateMobileAppPackageVersionErrorComponent
     */
    'code': DevicesCreateMobileAppPackageVersionErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateMobileAppPackageVersionErrorComponent
     */
    'detail': string;
}

export const DevicesCreateMobileAppPackageVersionErrorComponentAttrEnum = {
    MobileAppPackageVersion: 'mobile_app.package_version'
} as const;

export type DevicesCreateMobileAppPackageVersionErrorComponentAttrEnum = typeof DevicesCreateMobileAppPackageVersionErrorComponentAttrEnum[keyof typeof DevicesCreateMobileAppPackageVersionErrorComponentAttrEnum];
export const DevicesCreateMobileAppPackageVersionErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesCreateMobileAppPackageVersionErrorComponentCodeEnum = typeof DevicesCreateMobileAppPackageVersionErrorComponentCodeEnum[keyof typeof DevicesCreateMobileAppPackageVersionErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateModelErrorComponent
 */
export interface DevicesCreateModelErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateModelErrorComponent
     */
    'attr': DevicesCreateModelErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateModelErrorComponent
     */
    'code': DevicesCreateModelErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateModelErrorComponent
     */
    'detail': string;
}

export const DevicesCreateModelErrorComponentAttrEnum = {
    Model: 'model'
} as const;

export type DevicesCreateModelErrorComponentAttrEnum = typeof DevicesCreateModelErrorComponentAttrEnum[keyof typeof DevicesCreateModelErrorComponentAttrEnum];
export const DevicesCreateModelErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesCreateModelErrorComponentCodeEnum = typeof DevicesCreateModelErrorComponentCodeEnum[keyof typeof DevicesCreateModelErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateNameErrorComponent
 */
export interface DevicesCreateNameErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateNameErrorComponent
     */
    'attr': DevicesCreateNameErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateNameErrorComponent
     */
    'code': DevicesCreateNameErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateNameErrorComponent
     */
    'detail': string;
}

export const DevicesCreateNameErrorComponentAttrEnum = {
    Name: 'name'
} as const;

export type DevicesCreateNameErrorComponentAttrEnum = typeof DevicesCreateNameErrorComponentAttrEnum[keyof typeof DevicesCreateNameErrorComponentAttrEnum];
export const DevicesCreateNameErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesCreateNameErrorComponentCodeEnum = typeof DevicesCreateNameErrorComponentCodeEnum[keyof typeof DevicesCreateNameErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateNonFieldErrorsErrorComponent
 */
export interface DevicesCreateNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateNonFieldErrorsErrorComponent
     */
    'attr': DevicesCreateNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateNonFieldErrorsErrorComponent
     */
    'code': DevicesCreateNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const DevicesCreateNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type DevicesCreateNonFieldErrorsErrorComponentAttrEnum = typeof DevicesCreateNonFieldErrorsErrorComponentAttrEnum[keyof typeof DevicesCreateNonFieldErrorsErrorComponentAttrEnum];
export const DevicesCreateNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type DevicesCreateNonFieldErrorsErrorComponentCodeEnum = typeof DevicesCreateNonFieldErrorsErrorComponentCodeEnum[keyof typeof DevicesCreateNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateOsLocaleErrorComponent
 */
export interface DevicesCreateOsLocaleErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateOsLocaleErrorComponent
     */
    'attr': DevicesCreateOsLocaleErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateOsLocaleErrorComponent
     */
    'code': DevicesCreateOsLocaleErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateOsLocaleErrorComponent
     */
    'detail': string;
}

export const DevicesCreateOsLocaleErrorComponentAttrEnum = {
    OsLocale: 'os.locale'
} as const;

export type DevicesCreateOsLocaleErrorComponentAttrEnum = typeof DevicesCreateOsLocaleErrorComponentAttrEnum[keyof typeof DevicesCreateOsLocaleErrorComponentAttrEnum];
export const DevicesCreateOsLocaleErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesCreateOsLocaleErrorComponentCodeEnum = typeof DevicesCreateOsLocaleErrorComponentCodeEnum[keyof typeof DevicesCreateOsLocaleErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateOsNameErrorComponent
 */
export interface DevicesCreateOsNameErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateOsNameErrorComponent
     */
    'attr': DevicesCreateOsNameErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateOsNameErrorComponent
     */
    'code': DevicesCreateOsNameErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateOsNameErrorComponent
     */
    'detail': string;
}

export const DevicesCreateOsNameErrorComponentAttrEnum = {
    OsName: 'os.name'
} as const;

export type DevicesCreateOsNameErrorComponentAttrEnum = typeof DevicesCreateOsNameErrorComponentAttrEnum[keyof typeof DevicesCreateOsNameErrorComponentAttrEnum];
export const DevicesCreateOsNameErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesCreateOsNameErrorComponentCodeEnum = typeof DevicesCreateOsNameErrorComponentCodeEnum[keyof typeof DevicesCreateOsNameErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateOsNonFieldErrorsErrorComponent
 */
export interface DevicesCreateOsNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateOsNonFieldErrorsErrorComponent
     */
    'attr': DevicesCreateOsNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateOsNonFieldErrorsErrorComponent
     */
    'code': DevicesCreateOsNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateOsNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const DevicesCreateOsNonFieldErrorsErrorComponentAttrEnum = {
    OsNonFieldErrors: 'os.non_field_errors'
} as const;

export type DevicesCreateOsNonFieldErrorsErrorComponentAttrEnum = typeof DevicesCreateOsNonFieldErrorsErrorComponentAttrEnum[keyof typeof DevicesCreateOsNonFieldErrorsErrorComponentAttrEnum];
export const DevicesCreateOsNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type DevicesCreateOsNonFieldErrorsErrorComponentCodeEnum = typeof DevicesCreateOsNonFieldErrorsErrorComponentCodeEnum[keyof typeof DevicesCreateOsNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateOsVersionErrorComponent
 */
export interface DevicesCreateOsVersionErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateOsVersionErrorComponent
     */
    'attr': DevicesCreateOsVersionErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateOsVersionErrorComponent
     */
    'code': DevicesCreateOsVersionErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateOsVersionErrorComponent
     */
    'detail': string;
}

export const DevicesCreateOsVersionErrorComponentAttrEnum = {
    OsVersion: 'os.version'
} as const;

export type DevicesCreateOsVersionErrorComponentAttrEnum = typeof DevicesCreateOsVersionErrorComponentAttrEnum[keyof typeof DevicesCreateOsVersionErrorComponentAttrEnum];
export const DevicesCreateOsVersionErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesCreateOsVersionErrorComponentCodeEnum = typeof DevicesCreateOsVersionErrorComponentCodeEnum[keyof typeof DevicesCreateOsVersionErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateTypeErrorComponent
 */
export interface DevicesCreateTypeErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateTypeErrorComponent
     */
    'attr': DevicesCreateTypeErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateTypeErrorComponent
     */
    'code': DevicesCreateTypeErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateTypeErrorComponent
     */
    'detail': string;
}

export const DevicesCreateTypeErrorComponentAttrEnum = {
    Type: 'type'
} as const;

export type DevicesCreateTypeErrorComponentAttrEnum = typeof DevicesCreateTypeErrorComponentAttrEnum[keyof typeof DevicesCreateTypeErrorComponentAttrEnum];
export const DevicesCreateTypeErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice',
    Null: 'null',
    Required: 'required'
} as const;

export type DevicesCreateTypeErrorComponentCodeEnum = typeof DevicesCreateTypeErrorComponentCodeEnum[keyof typeof DevicesCreateTypeErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesCreateValidationError
 */
export interface DevicesCreateValidationError {
    /**
     * 
     * @type {string}
     * @memberof DevicesCreateValidationError
     */
    'type': DevicesCreateValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<DevicesCreateError>}
     * @memberof DevicesCreateValidationError
     */
    'errors': Array<DevicesCreateError>;
}

export const DevicesCreateValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type DevicesCreateValidationErrorTypeEnum = typeof DevicesCreateValidationErrorTypeEnum[keyof typeof DevicesCreateValidationErrorTypeEnum];

/**
 * @type DevicesPartialUpdateError
 * @export
 */
export type DevicesPartialUpdateError = { attr: 'fcm_token' } & DevicesPartialUpdateFcmTokenErrorComponent | { attr: 'mobile_app.non_field_errors' } & DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent | { attr: 'mobile_app.package_name' } & DevicesPartialUpdateMobileAppPackageNameErrorComponent | { attr: 'mobile_app.package_version' } & DevicesPartialUpdateMobileAppPackageVersionErrorComponent | { attr: 'name' } & DevicesPartialUpdateNameErrorComponent | { attr: 'non_field_errors' } & DevicesPartialUpdateNonFieldErrorsErrorComponent | { attr: 'os.locale' } & DevicesPartialUpdateOsLocaleErrorComponent | { attr: 'os.name' } & DevicesPartialUpdateOsNameErrorComponent | { attr: 'os.non_field_errors' } & DevicesPartialUpdateOsNonFieldErrorsErrorComponent | { attr: 'os.version' } & DevicesPartialUpdateOsVersionErrorComponent;

/**
 * 
 * @export
 * @interface DevicesPartialUpdateFcmTokenErrorComponent
 */
export interface DevicesPartialUpdateFcmTokenErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateFcmTokenErrorComponent
     */
    'attr': DevicesPartialUpdateFcmTokenErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateFcmTokenErrorComponent
     */
    'code': DevicesPartialUpdateFcmTokenErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateFcmTokenErrorComponent
     */
    'detail': string;
}

export const DevicesPartialUpdateFcmTokenErrorComponentAttrEnum = {
    FcmToken: 'fcm_token'
} as const;

export type DevicesPartialUpdateFcmTokenErrorComponentAttrEnum = typeof DevicesPartialUpdateFcmTokenErrorComponentAttrEnum[keyof typeof DevicesPartialUpdateFcmTokenErrorComponentAttrEnum];
export const DevicesPartialUpdateFcmTokenErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesPartialUpdateFcmTokenErrorComponentCodeEnum = typeof DevicesPartialUpdateFcmTokenErrorComponentCodeEnum[keyof typeof DevicesPartialUpdateFcmTokenErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent
 */
export interface DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent
     */
    'attr': DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent
     */
    'code': DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponentAttrEnum = {
    MobileAppNonFieldErrors: 'mobile_app.non_field_errors'
} as const;

export type DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponentAttrEnum = typeof DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponentAttrEnum[keyof typeof DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponentAttrEnum];
export const DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponentCodeEnum = typeof DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponentCodeEnum[keyof typeof DevicesPartialUpdateMobileAppNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesPartialUpdateMobileAppPackageNameErrorComponent
 */
export interface DevicesPartialUpdateMobileAppPackageNameErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateMobileAppPackageNameErrorComponent
     */
    'attr': DevicesPartialUpdateMobileAppPackageNameErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateMobileAppPackageNameErrorComponent
     */
    'code': DevicesPartialUpdateMobileAppPackageNameErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateMobileAppPackageNameErrorComponent
     */
    'detail': string;
}

export const DevicesPartialUpdateMobileAppPackageNameErrorComponentAttrEnum = {
    MobileAppPackageName: 'mobile_app.package_name'
} as const;

export type DevicesPartialUpdateMobileAppPackageNameErrorComponentAttrEnum = typeof DevicesPartialUpdateMobileAppPackageNameErrorComponentAttrEnum[keyof typeof DevicesPartialUpdateMobileAppPackageNameErrorComponentAttrEnum];
export const DevicesPartialUpdateMobileAppPackageNameErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesPartialUpdateMobileAppPackageNameErrorComponentCodeEnum = typeof DevicesPartialUpdateMobileAppPackageNameErrorComponentCodeEnum[keyof typeof DevicesPartialUpdateMobileAppPackageNameErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesPartialUpdateMobileAppPackageVersionErrorComponent
 */
export interface DevicesPartialUpdateMobileAppPackageVersionErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateMobileAppPackageVersionErrorComponent
     */
    'attr': DevicesPartialUpdateMobileAppPackageVersionErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateMobileAppPackageVersionErrorComponent
     */
    'code': DevicesPartialUpdateMobileAppPackageVersionErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateMobileAppPackageVersionErrorComponent
     */
    'detail': string;
}

export const DevicesPartialUpdateMobileAppPackageVersionErrorComponentAttrEnum = {
    MobileAppPackageVersion: 'mobile_app.package_version'
} as const;

export type DevicesPartialUpdateMobileAppPackageVersionErrorComponentAttrEnum = typeof DevicesPartialUpdateMobileAppPackageVersionErrorComponentAttrEnum[keyof typeof DevicesPartialUpdateMobileAppPackageVersionErrorComponentAttrEnum];
export const DevicesPartialUpdateMobileAppPackageVersionErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesPartialUpdateMobileAppPackageVersionErrorComponentCodeEnum = typeof DevicesPartialUpdateMobileAppPackageVersionErrorComponentCodeEnum[keyof typeof DevicesPartialUpdateMobileAppPackageVersionErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesPartialUpdateNameErrorComponent
 */
export interface DevicesPartialUpdateNameErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateNameErrorComponent
     */
    'attr': DevicesPartialUpdateNameErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateNameErrorComponent
     */
    'code': DevicesPartialUpdateNameErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateNameErrorComponent
     */
    'detail': string;
}

export const DevicesPartialUpdateNameErrorComponentAttrEnum = {
    Name: 'name'
} as const;

export type DevicesPartialUpdateNameErrorComponentAttrEnum = typeof DevicesPartialUpdateNameErrorComponentAttrEnum[keyof typeof DevicesPartialUpdateNameErrorComponentAttrEnum];
export const DevicesPartialUpdateNameErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesPartialUpdateNameErrorComponentCodeEnum = typeof DevicesPartialUpdateNameErrorComponentCodeEnum[keyof typeof DevicesPartialUpdateNameErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesPartialUpdateNonFieldErrorsErrorComponent
 */
export interface DevicesPartialUpdateNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateNonFieldErrorsErrorComponent
     */
    'attr': DevicesPartialUpdateNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateNonFieldErrorsErrorComponent
     */
    'code': DevicesPartialUpdateNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const DevicesPartialUpdateNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type DevicesPartialUpdateNonFieldErrorsErrorComponentAttrEnum = typeof DevicesPartialUpdateNonFieldErrorsErrorComponentAttrEnum[keyof typeof DevicesPartialUpdateNonFieldErrorsErrorComponentAttrEnum];
export const DevicesPartialUpdateNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type DevicesPartialUpdateNonFieldErrorsErrorComponentCodeEnum = typeof DevicesPartialUpdateNonFieldErrorsErrorComponentCodeEnum[keyof typeof DevicesPartialUpdateNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesPartialUpdateOsLocaleErrorComponent
 */
export interface DevicesPartialUpdateOsLocaleErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateOsLocaleErrorComponent
     */
    'attr': DevicesPartialUpdateOsLocaleErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateOsLocaleErrorComponent
     */
    'code': DevicesPartialUpdateOsLocaleErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateOsLocaleErrorComponent
     */
    'detail': string;
}

export const DevicesPartialUpdateOsLocaleErrorComponentAttrEnum = {
    OsLocale: 'os.locale'
} as const;

export type DevicesPartialUpdateOsLocaleErrorComponentAttrEnum = typeof DevicesPartialUpdateOsLocaleErrorComponentAttrEnum[keyof typeof DevicesPartialUpdateOsLocaleErrorComponentAttrEnum];
export const DevicesPartialUpdateOsLocaleErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesPartialUpdateOsLocaleErrorComponentCodeEnum = typeof DevicesPartialUpdateOsLocaleErrorComponentCodeEnum[keyof typeof DevicesPartialUpdateOsLocaleErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesPartialUpdateOsNameErrorComponent
 */
export interface DevicesPartialUpdateOsNameErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateOsNameErrorComponent
     */
    'attr': DevicesPartialUpdateOsNameErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateOsNameErrorComponent
     */
    'code': DevicesPartialUpdateOsNameErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateOsNameErrorComponent
     */
    'detail': string;
}

export const DevicesPartialUpdateOsNameErrorComponentAttrEnum = {
    OsName: 'os.name'
} as const;

export type DevicesPartialUpdateOsNameErrorComponentAttrEnum = typeof DevicesPartialUpdateOsNameErrorComponentAttrEnum[keyof typeof DevicesPartialUpdateOsNameErrorComponentAttrEnum];
export const DevicesPartialUpdateOsNameErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesPartialUpdateOsNameErrorComponentCodeEnum = typeof DevicesPartialUpdateOsNameErrorComponentCodeEnum[keyof typeof DevicesPartialUpdateOsNameErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesPartialUpdateOsNonFieldErrorsErrorComponent
 */
export interface DevicesPartialUpdateOsNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateOsNonFieldErrorsErrorComponent
     */
    'attr': DevicesPartialUpdateOsNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateOsNonFieldErrorsErrorComponent
     */
    'code': DevicesPartialUpdateOsNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateOsNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const DevicesPartialUpdateOsNonFieldErrorsErrorComponentAttrEnum = {
    OsNonFieldErrors: 'os.non_field_errors'
} as const;

export type DevicesPartialUpdateOsNonFieldErrorsErrorComponentAttrEnum = typeof DevicesPartialUpdateOsNonFieldErrorsErrorComponentAttrEnum[keyof typeof DevicesPartialUpdateOsNonFieldErrorsErrorComponentAttrEnum];
export const DevicesPartialUpdateOsNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type DevicesPartialUpdateOsNonFieldErrorsErrorComponentCodeEnum = typeof DevicesPartialUpdateOsNonFieldErrorsErrorComponentCodeEnum[keyof typeof DevicesPartialUpdateOsNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesPartialUpdateOsVersionErrorComponent
 */
export interface DevicesPartialUpdateOsVersionErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateOsVersionErrorComponent
     */
    'attr': DevicesPartialUpdateOsVersionErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateOsVersionErrorComponent
     */
    'code': DevicesPartialUpdateOsVersionErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateOsVersionErrorComponent
     */
    'detail': string;
}

export const DevicesPartialUpdateOsVersionErrorComponentAttrEnum = {
    OsVersion: 'os.version'
} as const;

export type DevicesPartialUpdateOsVersionErrorComponentAttrEnum = typeof DevicesPartialUpdateOsVersionErrorComponentAttrEnum[keyof typeof DevicesPartialUpdateOsVersionErrorComponentAttrEnum];
export const DevicesPartialUpdateOsVersionErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesPartialUpdateOsVersionErrorComponentCodeEnum = typeof DevicesPartialUpdateOsVersionErrorComponentCodeEnum[keyof typeof DevicesPartialUpdateOsVersionErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesPartialUpdateValidationError
 */
export interface DevicesPartialUpdateValidationError {
    /**
     * 
     * @type {string}
     * @memberof DevicesPartialUpdateValidationError
     */
    'type': DevicesPartialUpdateValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<DevicesPartialUpdateError>}
     * @memberof DevicesPartialUpdateValidationError
     */
    'errors': Array<DevicesPartialUpdateError>;
}

export const DevicesPartialUpdateValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type DevicesPartialUpdateValidationErrorTypeEnum = typeof DevicesPartialUpdateValidationErrorTypeEnum[keyof typeof DevicesPartialUpdateValidationErrorTypeEnum];

/**
 * @type DevicesUpdateError
 * @export
 */
export type DevicesUpdateError = { attr: 'fcm_token' } & DevicesUpdateFcmTokenErrorComponent | { attr: 'mobile_app.non_field_errors' } & DevicesUpdateMobileAppNonFieldErrorsErrorComponent | { attr: 'mobile_app.package_name' } & DevicesUpdateMobileAppPackageNameErrorComponent | { attr: 'mobile_app.package_version' } & DevicesUpdateMobileAppPackageVersionErrorComponent | { attr: 'name' } & DevicesUpdateNameErrorComponent | { attr: 'non_field_errors' } & DevicesUpdateNonFieldErrorsErrorComponent | { attr: 'os.locale' } & DevicesUpdateOsLocaleErrorComponent | { attr: 'os.name' } & DevicesUpdateOsNameErrorComponent | { attr: 'os.non_field_errors' } & DevicesUpdateOsNonFieldErrorsErrorComponent | { attr: 'os.version' } & DevicesUpdateOsVersionErrorComponent;

/**
 * 
 * @export
 * @interface DevicesUpdateFcmTokenErrorComponent
 */
export interface DevicesUpdateFcmTokenErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateFcmTokenErrorComponent
     */
    'attr': DevicesUpdateFcmTokenErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateFcmTokenErrorComponent
     */
    'code': DevicesUpdateFcmTokenErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateFcmTokenErrorComponent
     */
    'detail': string;
}

export const DevicesUpdateFcmTokenErrorComponentAttrEnum = {
    FcmToken: 'fcm_token'
} as const;

export type DevicesUpdateFcmTokenErrorComponentAttrEnum = typeof DevicesUpdateFcmTokenErrorComponentAttrEnum[keyof typeof DevicesUpdateFcmTokenErrorComponentAttrEnum];
export const DevicesUpdateFcmTokenErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesUpdateFcmTokenErrorComponentCodeEnum = typeof DevicesUpdateFcmTokenErrorComponentCodeEnum[keyof typeof DevicesUpdateFcmTokenErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesUpdateMobileAppNonFieldErrorsErrorComponent
 */
export interface DevicesUpdateMobileAppNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateMobileAppNonFieldErrorsErrorComponent
     */
    'attr': DevicesUpdateMobileAppNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateMobileAppNonFieldErrorsErrorComponent
     */
    'code': DevicesUpdateMobileAppNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateMobileAppNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const DevicesUpdateMobileAppNonFieldErrorsErrorComponentAttrEnum = {
    MobileAppNonFieldErrors: 'mobile_app.non_field_errors'
} as const;

export type DevicesUpdateMobileAppNonFieldErrorsErrorComponentAttrEnum = typeof DevicesUpdateMobileAppNonFieldErrorsErrorComponentAttrEnum[keyof typeof DevicesUpdateMobileAppNonFieldErrorsErrorComponentAttrEnum];
export const DevicesUpdateMobileAppNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type DevicesUpdateMobileAppNonFieldErrorsErrorComponentCodeEnum = typeof DevicesUpdateMobileAppNonFieldErrorsErrorComponentCodeEnum[keyof typeof DevicesUpdateMobileAppNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesUpdateMobileAppPackageNameErrorComponent
 */
export interface DevicesUpdateMobileAppPackageNameErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateMobileAppPackageNameErrorComponent
     */
    'attr': DevicesUpdateMobileAppPackageNameErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateMobileAppPackageNameErrorComponent
     */
    'code': DevicesUpdateMobileAppPackageNameErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateMobileAppPackageNameErrorComponent
     */
    'detail': string;
}

export const DevicesUpdateMobileAppPackageNameErrorComponentAttrEnum = {
    MobileAppPackageName: 'mobile_app.package_name'
} as const;

export type DevicesUpdateMobileAppPackageNameErrorComponentAttrEnum = typeof DevicesUpdateMobileAppPackageNameErrorComponentAttrEnum[keyof typeof DevicesUpdateMobileAppPackageNameErrorComponentAttrEnum];
export const DevicesUpdateMobileAppPackageNameErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesUpdateMobileAppPackageNameErrorComponentCodeEnum = typeof DevicesUpdateMobileAppPackageNameErrorComponentCodeEnum[keyof typeof DevicesUpdateMobileAppPackageNameErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesUpdateMobileAppPackageVersionErrorComponent
 */
export interface DevicesUpdateMobileAppPackageVersionErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateMobileAppPackageVersionErrorComponent
     */
    'attr': DevicesUpdateMobileAppPackageVersionErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateMobileAppPackageVersionErrorComponent
     */
    'code': DevicesUpdateMobileAppPackageVersionErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateMobileAppPackageVersionErrorComponent
     */
    'detail': string;
}

export const DevicesUpdateMobileAppPackageVersionErrorComponentAttrEnum = {
    MobileAppPackageVersion: 'mobile_app.package_version'
} as const;

export type DevicesUpdateMobileAppPackageVersionErrorComponentAttrEnum = typeof DevicesUpdateMobileAppPackageVersionErrorComponentAttrEnum[keyof typeof DevicesUpdateMobileAppPackageVersionErrorComponentAttrEnum];
export const DevicesUpdateMobileAppPackageVersionErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesUpdateMobileAppPackageVersionErrorComponentCodeEnum = typeof DevicesUpdateMobileAppPackageVersionErrorComponentCodeEnum[keyof typeof DevicesUpdateMobileAppPackageVersionErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesUpdateNameErrorComponent
 */
export interface DevicesUpdateNameErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateNameErrorComponent
     */
    'attr': DevicesUpdateNameErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateNameErrorComponent
     */
    'code': DevicesUpdateNameErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateNameErrorComponent
     */
    'detail': string;
}

export const DevicesUpdateNameErrorComponentAttrEnum = {
    Name: 'name'
} as const;

export type DevicesUpdateNameErrorComponentAttrEnum = typeof DevicesUpdateNameErrorComponentAttrEnum[keyof typeof DevicesUpdateNameErrorComponentAttrEnum];
export const DevicesUpdateNameErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesUpdateNameErrorComponentCodeEnum = typeof DevicesUpdateNameErrorComponentCodeEnum[keyof typeof DevicesUpdateNameErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesUpdateNonFieldErrorsErrorComponent
 */
export interface DevicesUpdateNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateNonFieldErrorsErrorComponent
     */
    'attr': DevicesUpdateNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateNonFieldErrorsErrorComponent
     */
    'code': DevicesUpdateNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const DevicesUpdateNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type DevicesUpdateNonFieldErrorsErrorComponentAttrEnum = typeof DevicesUpdateNonFieldErrorsErrorComponentAttrEnum[keyof typeof DevicesUpdateNonFieldErrorsErrorComponentAttrEnum];
export const DevicesUpdateNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type DevicesUpdateNonFieldErrorsErrorComponentCodeEnum = typeof DevicesUpdateNonFieldErrorsErrorComponentCodeEnum[keyof typeof DevicesUpdateNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesUpdateOsLocaleErrorComponent
 */
export interface DevicesUpdateOsLocaleErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateOsLocaleErrorComponent
     */
    'attr': DevicesUpdateOsLocaleErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateOsLocaleErrorComponent
     */
    'code': DevicesUpdateOsLocaleErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateOsLocaleErrorComponent
     */
    'detail': string;
}

export const DevicesUpdateOsLocaleErrorComponentAttrEnum = {
    OsLocale: 'os.locale'
} as const;

export type DevicesUpdateOsLocaleErrorComponentAttrEnum = typeof DevicesUpdateOsLocaleErrorComponentAttrEnum[keyof typeof DevicesUpdateOsLocaleErrorComponentAttrEnum];
export const DevicesUpdateOsLocaleErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesUpdateOsLocaleErrorComponentCodeEnum = typeof DevicesUpdateOsLocaleErrorComponentCodeEnum[keyof typeof DevicesUpdateOsLocaleErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesUpdateOsNameErrorComponent
 */
export interface DevicesUpdateOsNameErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateOsNameErrorComponent
     */
    'attr': DevicesUpdateOsNameErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateOsNameErrorComponent
     */
    'code': DevicesUpdateOsNameErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateOsNameErrorComponent
     */
    'detail': string;
}

export const DevicesUpdateOsNameErrorComponentAttrEnum = {
    OsName: 'os.name'
} as const;

export type DevicesUpdateOsNameErrorComponentAttrEnum = typeof DevicesUpdateOsNameErrorComponentAttrEnum[keyof typeof DevicesUpdateOsNameErrorComponentAttrEnum];
export const DevicesUpdateOsNameErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesUpdateOsNameErrorComponentCodeEnum = typeof DevicesUpdateOsNameErrorComponentCodeEnum[keyof typeof DevicesUpdateOsNameErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesUpdateOsNonFieldErrorsErrorComponent
 */
export interface DevicesUpdateOsNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateOsNonFieldErrorsErrorComponent
     */
    'attr': DevicesUpdateOsNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateOsNonFieldErrorsErrorComponent
     */
    'code': DevicesUpdateOsNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateOsNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const DevicesUpdateOsNonFieldErrorsErrorComponentAttrEnum = {
    OsNonFieldErrors: 'os.non_field_errors'
} as const;

export type DevicesUpdateOsNonFieldErrorsErrorComponentAttrEnum = typeof DevicesUpdateOsNonFieldErrorsErrorComponentAttrEnum[keyof typeof DevicesUpdateOsNonFieldErrorsErrorComponentAttrEnum];
export const DevicesUpdateOsNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type DevicesUpdateOsNonFieldErrorsErrorComponentCodeEnum = typeof DevicesUpdateOsNonFieldErrorsErrorComponentCodeEnum[keyof typeof DevicesUpdateOsNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesUpdateOsVersionErrorComponent
 */
export interface DevicesUpdateOsVersionErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateOsVersionErrorComponent
     */
    'attr': DevicesUpdateOsVersionErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateOsVersionErrorComponent
     */
    'code': DevicesUpdateOsVersionErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateOsVersionErrorComponent
     */
    'detail': string;
}

export const DevicesUpdateOsVersionErrorComponentAttrEnum = {
    OsVersion: 'os.version'
} as const;

export type DevicesUpdateOsVersionErrorComponentAttrEnum = typeof DevicesUpdateOsVersionErrorComponentAttrEnum[keyof typeof DevicesUpdateOsVersionErrorComponentAttrEnum];
export const DevicesUpdateOsVersionErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type DevicesUpdateOsVersionErrorComponentCodeEnum = typeof DevicesUpdateOsVersionErrorComponentCodeEnum[keyof typeof DevicesUpdateOsVersionErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface DevicesUpdateValidationError
 */
export interface DevicesUpdateValidationError {
    /**
     * 
     * @type {string}
     * @memberof DevicesUpdateValidationError
     */
    'type': DevicesUpdateValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<DevicesUpdateError>}
     * @memberof DevicesUpdateValidationError
     */
    'errors': Array<DevicesUpdateError>;
}

export const DevicesUpdateValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type DevicesUpdateValidationErrorTypeEnum = typeof DevicesUpdateValidationErrorTypeEnum[keyof typeof DevicesUpdateValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface Error401
 */
export interface Error401 {
    /**
     * 
     * @type {string}
     * @memberof Error401
     */
    'code': Error401CodeEnum;
    /**
     * 
     * @type {string}
     * @memberof Error401
     */
    'detail': string;
    /**
     * 
     * @type {string}
     * @memberof Error401
     */
    'attr': string | null;
}

export const Error401CodeEnum = {
    TokenNotValid: 'token_not_valid',
    AuthenticationFailed: 'authentication_failed',
    NotAuthenticated: 'not_authenticated'
} as const;

export type Error401CodeEnum = typeof Error401CodeEnum[keyof typeof Error401CodeEnum];

/**
 * 
 * @export
 * @interface Error403
 */
export interface Error403 {
    /**
     * 
     * @type {string}
     * @memberof Error403
     */
    'code': Error403CodeEnum;
    /**
     * 
     * @type {string}
     * @memberof Error403
     */
    'detail': string;
    /**
     * 
     * @type {string}
     * @memberof Error403
     */
    'attr': string | null;
}

export const Error403CodeEnum = {
    PermissionDenied: 'permission_denied'
} as const;

export type Error403CodeEnum = typeof Error403CodeEnum[keyof typeof Error403CodeEnum];

/**
 * 
 * @export
 * @interface Error404
 */
export interface Error404 {
    /**
     * 
     * @type {string}
     * @memberof Error404
     */
    'code': Error404CodeEnum;
    /**
     * 
     * @type {string}
     * @memberof Error404
     */
    'detail': string;
    /**
     * 
     * @type {string}
     * @memberof Error404
     */
    'attr': string | null;
}

export const Error404CodeEnum = {
    NotFound: 'not_found'
} as const;

export type Error404CodeEnum = typeof Error404CodeEnum[keyof typeof Error404CodeEnum];

/**
 * 
 * @export
 * @interface ErrorResponse401
 */
export interface ErrorResponse401 {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse401
     */
    'type': ErrorResponse401TypeEnum;
    /**
     * 
     * @type {Array<Error401>}
     * @memberof ErrorResponse401
     */
    'errors': Array<Error401>;
}

export const ErrorResponse401TypeEnum = {
    ClientError: 'client_error'
} as const;

export type ErrorResponse401TypeEnum = typeof ErrorResponse401TypeEnum[keyof typeof ErrorResponse401TypeEnum];

/**
 * 
 * @export
 * @interface ErrorResponse403
 */
export interface ErrorResponse403 {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse403
     */
    'type': ErrorResponse403TypeEnum;
    /**
     * 
     * @type {Array<Error403>}
     * @memberof ErrorResponse403
     */
    'errors': Array<Error403>;
}

export const ErrorResponse403TypeEnum = {
    ClientError: 'client_error'
} as const;

export type ErrorResponse403TypeEnum = typeof ErrorResponse403TypeEnum[keyof typeof ErrorResponse403TypeEnum];

/**
 * 
 * @export
 * @interface ErrorResponse404
 */
export interface ErrorResponse404 {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse404
     */
    'type': ErrorResponse404TypeEnum;
    /**
     * 
     * @type {Array<Error404>}
     * @memberof ErrorResponse404
     */
    'errors': Array<Error404>;
}

export const ErrorResponse404TypeEnum = {
    ClientError: 'client_error'
} as const;

export type ErrorResponse404TypeEnum = typeof ErrorResponse404TypeEnum[keyof typeof ErrorResponse404TypeEnum];

/**
 * 
 * @export
 * @interface Fix
 */
export interface Fix {
    /**
     * 
     * @type {string}
     * @memberof Fix
     */
    'coverage_uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Fix
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof Fix
     */
    'sent_at': string;
    /**
     * Date and time registered by server when it received fix upload. Automatically generated by server.
     * @type {string}
     * @memberof Fix
     */
    'received_at': string;
    /**
     * 
     * @type {FixLocation}
     * @memberof Fix
     */
    'point': FixLocation;
    /**
     * Power level of phone at time fix recorded, expressed as proportion of full charge. Range: 0-1.
     * @type {number}
     * @memberof Fix
     */
    'power'?: number | null;
}
/**
 * 
 * @export
 * @interface FixLocation
 */
export interface FixLocation {
    /**
     * Latitude rounded down to nearest 0.025 decimal degree.
     * @type {number}
     * @memberof FixLocation
     */
    'latitude': number;
    /**
     * Longitude rounded down to nearest 0.025 decimal degree.
     * @type {number}
     * @memberof FixLocation
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface FixLocationRequest
 */
export interface FixLocationRequest {
    /**
     * Latitude rounded down to nearest 0.025 decimal degree.
     * @type {number}
     * @memberof FixLocationRequest
     */
    'latitude': number;
    /**
     * Longitude rounded down to nearest 0.025 decimal degree.
     * @type {number}
     * @memberof FixLocationRequest
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface FixRequest
 */
export interface FixRequest {
    /**
     * 
     * @type {string}
     * @memberof FixRequest
     */
    'coverage_uuid': string;
    /**
     * 
     * @type {string}
     * @memberof FixRequest
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof FixRequest
     */
    'sent_at': string;
    /**
     * 
     * @type {FixLocationRequest}
     * @memberof FixRequest
     */
    'point': FixLocationRequest;
    /**
     * Power level of phone at time fix recorded, expressed as proportion of full charge. Range: 0-1.
     * @type {number}
     * @memberof FixRequest
     */
    'power'?: number | null;
}
/**
 * 
 * @export
 * @interface FixesCreateCoverageUuidErrorComponent
 */
export interface FixesCreateCoverageUuidErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof FixesCreateCoverageUuidErrorComponent
     */
    'attr': FixesCreateCoverageUuidErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreateCoverageUuidErrorComponent
     */
    'code': FixesCreateCoverageUuidErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreateCoverageUuidErrorComponent
     */
    'detail': string;
}

export const FixesCreateCoverageUuidErrorComponentAttrEnum = {
    CoverageUuid: 'coverage_uuid'
} as const;

export type FixesCreateCoverageUuidErrorComponentAttrEnum = typeof FixesCreateCoverageUuidErrorComponentAttrEnum[keyof typeof FixesCreateCoverageUuidErrorComponentAttrEnum];
export const FixesCreateCoverageUuidErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type FixesCreateCoverageUuidErrorComponentCodeEnum = typeof FixesCreateCoverageUuidErrorComponentCodeEnum[keyof typeof FixesCreateCoverageUuidErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface FixesCreateCreatedAtErrorComponent
 */
export interface FixesCreateCreatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof FixesCreateCreatedAtErrorComponent
     */
    'attr': FixesCreateCreatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreateCreatedAtErrorComponent
     */
    'code': FixesCreateCreatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreateCreatedAtErrorComponent
     */
    'detail': string;
}

export const FixesCreateCreatedAtErrorComponentAttrEnum = {
    CreatedAt: 'created_at'
} as const;

export type FixesCreateCreatedAtErrorComponentAttrEnum = typeof FixesCreateCreatedAtErrorComponentAttrEnum[keyof typeof FixesCreateCreatedAtErrorComponentAttrEnum];
export const FixesCreateCreatedAtErrorComponentCodeEnum = {
    Date: 'date',
    Invalid: 'invalid',
    MakeAware: 'make_aware',
    Null: 'null',
    Overflow: 'overflow',
    Required: 'required'
} as const;

export type FixesCreateCreatedAtErrorComponentCodeEnum = typeof FixesCreateCreatedAtErrorComponentCodeEnum[keyof typeof FixesCreateCreatedAtErrorComponentCodeEnum];

/**
 * @type FixesCreateError
 * @export
 */
export type FixesCreateError = { attr: 'coverage_uuid' } & FixesCreateCoverageUuidErrorComponent | { attr: 'created_at' } & FixesCreateCreatedAtErrorComponent | { attr: 'non_field_errors' } & FixesCreateNonFieldErrorsErrorComponent | { attr: 'point.latitude' } & FixesCreatePointLatitudeErrorComponent | { attr: 'point.longitude' } & FixesCreatePointLongitudeErrorComponent | { attr: 'point.non_field_errors' } & FixesCreatePointNonFieldErrorsErrorComponent | { attr: 'power' } & FixesCreatePowerErrorComponent | { attr: 'sent_at' } & FixesCreateSentAtErrorComponent;

/**
 * 
 * @export
 * @interface FixesCreateNonFieldErrorsErrorComponent
 */
export interface FixesCreateNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof FixesCreateNonFieldErrorsErrorComponent
     */
    'attr': FixesCreateNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreateNonFieldErrorsErrorComponent
     */
    'code': FixesCreateNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreateNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const FixesCreateNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type FixesCreateNonFieldErrorsErrorComponentAttrEnum = typeof FixesCreateNonFieldErrorsErrorComponentAttrEnum[keyof typeof FixesCreateNonFieldErrorsErrorComponentAttrEnum];
export const FixesCreateNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type FixesCreateNonFieldErrorsErrorComponentCodeEnum = typeof FixesCreateNonFieldErrorsErrorComponentCodeEnum[keyof typeof FixesCreateNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface FixesCreatePointLatitudeErrorComponent
 */
export interface FixesCreatePointLatitudeErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof FixesCreatePointLatitudeErrorComponent
     */
    'attr': FixesCreatePointLatitudeErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreatePointLatitudeErrorComponent
     */
    'code': FixesCreatePointLatitudeErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreatePointLatitudeErrorComponent
     */
    'detail': string;
}

export const FixesCreatePointLatitudeErrorComponentAttrEnum = {
    PointLatitude: 'point.latitude'
} as const;

export type FixesCreatePointLatitudeErrorComponentAttrEnum = typeof FixesCreatePointLatitudeErrorComponentAttrEnum[keyof typeof FixesCreatePointLatitudeErrorComponentAttrEnum];
export const FixesCreatePointLatitudeErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxStringLength: 'max_string_length',
    Null: 'null',
    Required: 'required'
} as const;

export type FixesCreatePointLatitudeErrorComponentCodeEnum = typeof FixesCreatePointLatitudeErrorComponentCodeEnum[keyof typeof FixesCreatePointLatitudeErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface FixesCreatePointLongitudeErrorComponent
 */
export interface FixesCreatePointLongitudeErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof FixesCreatePointLongitudeErrorComponent
     */
    'attr': FixesCreatePointLongitudeErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreatePointLongitudeErrorComponent
     */
    'code': FixesCreatePointLongitudeErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreatePointLongitudeErrorComponent
     */
    'detail': string;
}

export const FixesCreatePointLongitudeErrorComponentAttrEnum = {
    PointLongitude: 'point.longitude'
} as const;

export type FixesCreatePointLongitudeErrorComponentAttrEnum = typeof FixesCreatePointLongitudeErrorComponentAttrEnum[keyof typeof FixesCreatePointLongitudeErrorComponentAttrEnum];
export const FixesCreatePointLongitudeErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxStringLength: 'max_string_length',
    Null: 'null',
    Required: 'required'
} as const;

export type FixesCreatePointLongitudeErrorComponentCodeEnum = typeof FixesCreatePointLongitudeErrorComponentCodeEnum[keyof typeof FixesCreatePointLongitudeErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface FixesCreatePointNonFieldErrorsErrorComponent
 */
export interface FixesCreatePointNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof FixesCreatePointNonFieldErrorsErrorComponent
     */
    'attr': FixesCreatePointNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreatePointNonFieldErrorsErrorComponent
     */
    'code': FixesCreatePointNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreatePointNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const FixesCreatePointNonFieldErrorsErrorComponentAttrEnum = {
    PointNonFieldErrors: 'point.non_field_errors'
} as const;

export type FixesCreatePointNonFieldErrorsErrorComponentAttrEnum = typeof FixesCreatePointNonFieldErrorsErrorComponentAttrEnum[keyof typeof FixesCreatePointNonFieldErrorsErrorComponentAttrEnum];
export const FixesCreatePointNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type FixesCreatePointNonFieldErrorsErrorComponentCodeEnum = typeof FixesCreatePointNonFieldErrorsErrorComponentCodeEnum[keyof typeof FixesCreatePointNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface FixesCreatePowerErrorComponent
 */
export interface FixesCreatePowerErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof FixesCreatePowerErrorComponent
     */
    'attr': FixesCreatePowerErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreatePowerErrorComponent
     */
    'code': FixesCreatePowerErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreatePowerErrorComponent
     */
    'detail': string;
}

export const FixesCreatePowerErrorComponentAttrEnum = {
    Power: 'power'
} as const;

export type FixesCreatePowerErrorComponentAttrEnum = typeof FixesCreatePowerErrorComponentAttrEnum[keyof typeof FixesCreatePowerErrorComponentAttrEnum];
export const FixesCreatePowerErrorComponentCodeEnum = {
    Invalid: 'invalid',
    MaxStringLength: 'max_string_length'
} as const;

export type FixesCreatePowerErrorComponentCodeEnum = typeof FixesCreatePowerErrorComponentCodeEnum[keyof typeof FixesCreatePowerErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface FixesCreateSentAtErrorComponent
 */
export interface FixesCreateSentAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof FixesCreateSentAtErrorComponent
     */
    'attr': FixesCreateSentAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreateSentAtErrorComponent
     */
    'code': FixesCreateSentAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof FixesCreateSentAtErrorComponent
     */
    'detail': string;
}

export const FixesCreateSentAtErrorComponentAttrEnum = {
    SentAt: 'sent_at'
} as const;

export type FixesCreateSentAtErrorComponentAttrEnum = typeof FixesCreateSentAtErrorComponentAttrEnum[keyof typeof FixesCreateSentAtErrorComponentAttrEnum];
export const FixesCreateSentAtErrorComponentCodeEnum = {
    Date: 'date',
    Invalid: 'invalid',
    MakeAware: 'make_aware',
    Null: 'null',
    Overflow: 'overflow',
    Required: 'required'
} as const;

export type FixesCreateSentAtErrorComponentCodeEnum = typeof FixesCreateSentAtErrorComponentCodeEnum[keyof typeof FixesCreateSentAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface FixesCreateValidationError
 */
export interface FixesCreateValidationError {
    /**
     * 
     * @type {string}
     * @memberof FixesCreateValidationError
     */
    'type': FixesCreateValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<FixesCreateError>}
     * @memberof FixesCreateValidationError
     */
    'errors': Array<FixesCreateError>;
}

export const FixesCreateValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type FixesCreateValidationErrorTypeEnum = typeof FixesCreateValidationErrorTypeEnum[keyof typeof FixesCreateValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface GuestRegistration
 */
export interface GuestRegistration {
    /**
     * UUID randomly generated on phone to identify each unique user. Must be exactly 36 characters (32 hex digits plus 4 hyphens).
     * @type {string}
     * @memberof GuestRegistration
     */
    'username': string;
}
/**
 * 
 * @export
 * @interface GuestRegistrationRequest
 */
export interface GuestRegistrationRequest {
    /**
     * 
     * @type {string}
     * @memberof GuestRegistrationRequest
     */
    'password': string;
}
/**
 * A custom serializer field that supports localization for a dynamic field name. Allows calling with arguments such as \'title\', \'message\', max_length, help_text, etc.
 * @export
 * @interface LocalizedField
 */
export interface LocalizedField {
    /**
     * Български
     * @type {string}
     * @memberof LocalizedField
     */
    'bg'?: string;
    /**
     * বাংলা
     * @type {string}
     * @memberof LocalizedField
     */
    'bn'?: string;
    /**
     * Català
     * @type {string}
     * @memberof LocalizedField
     */
    'ca'?: string;
    /**
     * Deutsch
     * @type {string}
     * @memberof LocalizedField
     */
    'de'?: string;
    /**
     * Ελληνικά
     * @type {string}
     * @memberof LocalizedField
     */
    'el'?: string;
    /**
     * English
     * @type {string}
     * @memberof LocalizedField
     */
    'en': string;
    /**
     * Español
     * @type {string}
     * @memberof LocalizedField
     */
    'es'?: string;
    /**
     * Euskara
     * @type {string}
     * @memberof LocalizedField
     */
    'eu'?: string;
    /**
     * Français
     * @type {string}
     * @memberof LocalizedField
     */
    'fr'?: string;
    /**
     * Galego
     * @type {string}
     * @memberof LocalizedField
     */
    'gl'?: string;
    /**
     * Hrvatski
     * @type {string}
     * @memberof LocalizedField
     */
    'hr'?: string;
    /**
     * Magyar
     * @type {string}
     * @memberof LocalizedField
     */
    'hu'?: string;
    /**
     * Italiano
     * @type {string}
     * @memberof LocalizedField
     */
    'it'?: string;
    /**
     * Lëtzebuergesch
     * @type {string}
     * @memberof LocalizedField
     */
    'lb'?: string;
    /**
     * Македонски
     * @type {string}
     * @memberof LocalizedField
     */
    'mk'?: string;
    /**
     * Nederlands
     * @type {string}
     * @memberof LocalizedField
     */
    'nl'?: string;
    /**
     * Português
     * @type {string}
     * @memberof LocalizedField
     */
    'pt'?: string;
    /**
     * Română
     * @type {string}
     * @memberof LocalizedField
     */
    'ro'?: string;
    /**
     * Slovenščina
     * @type {string}
     * @memberof LocalizedField
     */
    'sl'?: string;
    /**
     * Shqip
     * @type {string}
     * @memberof LocalizedField
     */
    'sq'?: string;
    /**
     * Српски
     * @type {string}
     * @memberof LocalizedField
     */
    'sr'?: string;
    /**
     * Svenska
     * @type {string}
     * @memberof LocalizedField
     */
    'sv'?: string;
    /**
     * Türkçe
     * @type {string}
     * @memberof LocalizedField
     */
    'tr'?: string;
    /**
     * 中文（中国）
     * @type {string}
     * @memberof LocalizedField
     */
    'zh-CN'?: string;
}
/**
 * A custom serializer field that supports localization for a dynamic field name. Allows calling with arguments such as \'title\', \'message\', max_length, help_text, etc.
 * @export
 * @interface LocalizedFieldRequest
 */
export interface LocalizedFieldRequest {
    /**
     * Български
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'bg'?: string;
    /**
     * বাংলা
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'bn'?: string;
    /**
     * Català
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'ca'?: string;
    /**
     * Deutsch
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'de'?: string;
    /**
     * Ελληνικά
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'el'?: string;
    /**
     * English
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'en': string;
    /**
     * Español
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'es'?: string;
    /**
     * Euskara
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'eu'?: string;
    /**
     * Français
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'fr'?: string;
    /**
     * Galego
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'gl'?: string;
    /**
     * Hrvatski
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'hr'?: string;
    /**
     * Magyar
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'hu'?: string;
    /**
     * Italiano
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'it'?: string;
    /**
     * Lëtzebuergesch
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'lb'?: string;
    /**
     * Македонски
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'mk'?: string;
    /**
     * Nederlands
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'nl'?: string;
    /**
     * Português
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'pt'?: string;
    /**
     * Română
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'ro'?: string;
    /**
     * Slovenščina
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'sl'?: string;
    /**
     * Shqip
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'sq'?: string;
    /**
     * Српски
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'sr'?: string;
    /**
     * Svenska
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'sv'?: string;
    /**
     * Türkçe
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'tr'?: string;
    /**
     * 中文（中国）
     * @type {string}
     * @memberof LocalizedFieldRequest
     */
    'zh-CN'?: string;
}
/**
 * 
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * Did user indicate that report relates to current location of phone (\'current\') or to a location selected manually on the map (\'selected\')? Or is the choice missing (\'missing\')
     * @type {string}
     * @memberof Location
     */
    'type': LocationTypeEnum;
    /**
     * 
     * @type {LocationPoint}
     * @memberof Location
     */
    'point': LocationPoint | null;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'timezone': LocationTimezoneEnum | null;
    /**
     * 
     * @type {number}
     * @memberof Location
     */
    'country_id': number | null;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'nuts_2': string | null;
    /**
     * 
     * @type {string}
     * @memberof Location
     */
    'nuts_3': string | null;
}

export const LocationTypeEnum = {
    Current: 'current',
    Selected: 'selected',
    Missing: 'missing'
} as const;

export type LocationTypeEnum = typeof LocationTypeEnum[keyof typeof LocationTypeEnum];
export const LocationTimezoneEnum = {
    AfricaAbidjan: 'Africa/Abidjan',
    AfricaAccra: 'Africa/Accra',
    AfricaAddisAbaba: 'Africa/Addis_Ababa',
    AfricaAlgiers: 'Africa/Algiers',
    AfricaAsmara: 'Africa/Asmara',
    AfricaAsmera: 'Africa/Asmera',
    AfricaBamako: 'Africa/Bamako',
    AfricaBangui: 'Africa/Bangui',
    AfricaBanjul: 'Africa/Banjul',
    AfricaBissau: 'Africa/Bissau',
    AfricaBlantyre: 'Africa/Blantyre',
    AfricaBrazzaville: 'Africa/Brazzaville',
    AfricaBujumbura: 'Africa/Bujumbura',
    AfricaCairo: 'Africa/Cairo',
    AfricaCasablanca: 'Africa/Casablanca',
    AfricaCeuta: 'Africa/Ceuta',
    AfricaConakry: 'Africa/Conakry',
    AfricaDakar: 'Africa/Dakar',
    AfricaDarEsSalaam: 'Africa/Dar_es_Salaam',
    AfricaDjibouti: 'Africa/Djibouti',
    AfricaDouala: 'Africa/Douala',
    AfricaElAaiun: 'Africa/El_Aaiun',
    AfricaFreetown: 'Africa/Freetown',
    AfricaGaborone: 'Africa/Gaborone',
    AfricaHarare: 'Africa/Harare',
    AfricaJohannesburg: 'Africa/Johannesburg',
    AfricaJuba: 'Africa/Juba',
    AfricaKampala: 'Africa/Kampala',
    AfricaKhartoum: 'Africa/Khartoum',
    AfricaKigali: 'Africa/Kigali',
    AfricaKinshasa: 'Africa/Kinshasa',
    AfricaLagos: 'Africa/Lagos',
    AfricaLibreville: 'Africa/Libreville',
    AfricaLome: 'Africa/Lome',
    AfricaLuanda: 'Africa/Luanda',
    AfricaLubumbashi: 'Africa/Lubumbashi',
    AfricaLusaka: 'Africa/Lusaka',
    AfricaMalabo: 'Africa/Malabo',
    AfricaMaputo: 'Africa/Maputo',
    AfricaMaseru: 'Africa/Maseru',
    AfricaMbabane: 'Africa/Mbabane',
    AfricaMogadishu: 'Africa/Mogadishu',
    AfricaMonrovia: 'Africa/Monrovia',
    AfricaNairobi: 'Africa/Nairobi',
    AfricaNdjamena: 'Africa/Ndjamena',
    AfricaNiamey: 'Africa/Niamey',
    AfricaNouakchott: 'Africa/Nouakchott',
    AfricaOuagadougou: 'Africa/Ouagadougou',
    AfricaPortoNovo: 'Africa/Porto-Novo',
    AfricaSaoTome: 'Africa/Sao_Tome',
    AfricaTimbuktu: 'Africa/Timbuktu',
    AfricaTripoli: 'Africa/Tripoli',
    AfricaTunis: 'Africa/Tunis',
    AfricaWindhoek: 'Africa/Windhoek',
    AmericaAdak: 'America/Adak',
    AmericaAnchorage: 'America/Anchorage',
    AmericaAnguilla: 'America/Anguilla',
    AmericaAntigua: 'America/Antigua',
    AmericaAraguaina: 'America/Araguaina',
    AmericaArgentinaBuenosAires: 'America/Argentina/Buenos_Aires',
    AmericaArgentinaCatamarca: 'America/Argentina/Catamarca',
    AmericaArgentinaComodRivadavia: 'America/Argentina/ComodRivadavia',
    AmericaArgentinaCordoba: 'America/Argentina/Cordoba',
    AmericaArgentinaJujuy: 'America/Argentina/Jujuy',
    AmericaArgentinaLaRioja: 'America/Argentina/La_Rioja',
    AmericaArgentinaMendoza: 'America/Argentina/Mendoza',
    AmericaArgentinaRioGallegos: 'America/Argentina/Rio_Gallegos',
    AmericaArgentinaSalta: 'America/Argentina/Salta',
    AmericaArgentinaSanJuan: 'America/Argentina/San_Juan',
    AmericaArgentinaSanLuis: 'America/Argentina/San_Luis',
    AmericaArgentinaTucuman: 'America/Argentina/Tucuman',
    AmericaArgentinaUshuaia: 'America/Argentina/Ushuaia',
    AmericaAruba: 'America/Aruba',
    AmericaAsuncion: 'America/Asuncion',
    AmericaAtikokan: 'America/Atikokan',
    AmericaAtka: 'America/Atka',
    AmericaBahia: 'America/Bahia',
    AmericaBahiaBanderas: 'America/Bahia_Banderas',
    AmericaBarbados: 'America/Barbados',
    AmericaBelem: 'America/Belem',
    AmericaBelize: 'America/Belize',
    AmericaBlancSablon: 'America/Blanc-Sablon',
    AmericaBoaVista: 'America/Boa_Vista',
    AmericaBogota: 'America/Bogota',
    AmericaBoise: 'America/Boise',
    AmericaBuenosAires: 'America/Buenos_Aires',
    AmericaCambridgeBay: 'America/Cambridge_Bay',
    AmericaCampoGrande: 'America/Campo_Grande',
    AmericaCancun: 'America/Cancun',
    AmericaCaracas: 'America/Caracas',
    AmericaCatamarca: 'America/Catamarca',
    AmericaCayenne: 'America/Cayenne',
    AmericaCayman: 'America/Cayman',
    AmericaChicago: 'America/Chicago',
    AmericaChihuahua: 'America/Chihuahua',
    AmericaCiudadJuarez: 'America/Ciudad_Juarez',
    AmericaCoralHarbour: 'America/Coral_Harbour',
    AmericaCordoba: 'America/Cordoba',
    AmericaCostaRica: 'America/Costa_Rica',
    AmericaCreston: 'America/Creston',
    AmericaCuiaba: 'America/Cuiaba',
    AmericaCuracao: 'America/Curacao',
    AmericaDanmarkshavn: 'America/Danmarkshavn',
    AmericaDawson: 'America/Dawson',
    AmericaDawsonCreek: 'America/Dawson_Creek',
    AmericaDenver: 'America/Denver',
    AmericaDetroit: 'America/Detroit',
    AmericaDominica: 'America/Dominica',
    AmericaEdmonton: 'America/Edmonton',
    AmericaEirunepe: 'America/Eirunepe',
    AmericaElSalvador: 'America/El_Salvador',
    AmericaEnsenada: 'America/Ensenada',
    AmericaFortNelson: 'America/Fort_Nelson',
    AmericaFortWayne: 'America/Fort_Wayne',
    AmericaFortaleza: 'America/Fortaleza',
    AmericaGlaceBay: 'America/Glace_Bay',
    AmericaGodthab: 'America/Godthab',
    AmericaGooseBay: 'America/Goose_Bay',
    AmericaGrandTurk: 'America/Grand_Turk',
    AmericaGrenada: 'America/Grenada',
    AmericaGuadeloupe: 'America/Guadeloupe',
    AmericaGuatemala: 'America/Guatemala',
    AmericaGuayaquil: 'America/Guayaquil',
    AmericaGuyana: 'America/Guyana',
    AmericaHalifax: 'America/Halifax',
    AmericaHavana: 'America/Havana',
    AmericaHermosillo: 'America/Hermosillo',
    AmericaIndianaIndianapolis: 'America/Indiana/Indianapolis',
    AmericaIndianaKnox: 'America/Indiana/Knox',
    AmericaIndianaMarengo: 'America/Indiana/Marengo',
    AmericaIndianaPetersburg: 'America/Indiana/Petersburg',
    AmericaIndianaTellCity: 'America/Indiana/Tell_City',
    AmericaIndianaVevay: 'America/Indiana/Vevay',
    AmericaIndianaVincennes: 'America/Indiana/Vincennes',
    AmericaIndianaWinamac: 'America/Indiana/Winamac',
    AmericaIndianapolis: 'America/Indianapolis',
    AmericaInuvik: 'America/Inuvik',
    AmericaIqaluit: 'America/Iqaluit',
    AmericaJamaica: 'America/Jamaica',
    AmericaJujuy: 'America/Jujuy',
    AmericaJuneau: 'America/Juneau',
    AmericaKentuckyLouisville: 'America/Kentucky/Louisville',
    AmericaKentuckyMonticello: 'America/Kentucky/Monticello',
    AmericaKnoxIn: 'America/Knox_IN',
    AmericaKralendijk: 'America/Kralendijk',
    AmericaLaPaz: 'America/La_Paz',
    AmericaLima: 'America/Lima',
    AmericaLosAngeles: 'America/Los_Angeles',
    AmericaLouisville: 'America/Louisville',
    AmericaLowerPrinces: 'America/Lower_Princes',
    AmericaMaceio: 'America/Maceio',
    AmericaManagua: 'America/Managua',
    AmericaManaus: 'America/Manaus',
    AmericaMarigot: 'America/Marigot',
    AmericaMartinique: 'America/Martinique',
    AmericaMatamoros: 'America/Matamoros',
    AmericaMazatlan: 'America/Mazatlan',
    AmericaMendoza: 'America/Mendoza',
    AmericaMenominee: 'America/Menominee',
    AmericaMerida: 'America/Merida',
    AmericaMetlakatla: 'America/Metlakatla',
    AmericaMexicoCity: 'America/Mexico_City',
    AmericaMiquelon: 'America/Miquelon',
    AmericaMoncton: 'America/Moncton',
    AmericaMonterrey: 'America/Monterrey',
    AmericaMontevideo: 'America/Montevideo',
    AmericaMontreal: 'America/Montreal',
    AmericaMontserrat: 'America/Montserrat',
    AmericaNassau: 'America/Nassau',
    AmericaNewYork: 'America/New_York',
    AmericaNipigon: 'America/Nipigon',
    AmericaNome: 'America/Nome',
    AmericaNoronha: 'America/Noronha',
    AmericaNorthDakotaBeulah: 'America/North_Dakota/Beulah',
    AmericaNorthDakotaCenter: 'America/North_Dakota/Center',
    AmericaNorthDakotaNewSalem: 'America/North_Dakota/New_Salem',
    AmericaNuuk: 'America/Nuuk',
    AmericaOjinaga: 'America/Ojinaga',
    AmericaPanama: 'America/Panama',
    AmericaPangnirtung: 'America/Pangnirtung',
    AmericaParamaribo: 'America/Paramaribo',
    AmericaPhoenix: 'America/Phoenix',
    AmericaPortAuPrince: 'America/Port-au-Prince',
    AmericaPortOfSpain: 'America/Port_of_Spain',
    AmericaPortoAcre: 'America/Porto_Acre',
    AmericaPortoVelho: 'America/Porto_Velho',
    AmericaPuertoRico: 'America/Puerto_Rico',
    AmericaPuntaArenas: 'America/Punta_Arenas',
    AmericaRainyRiver: 'America/Rainy_River',
    AmericaRankinInlet: 'America/Rankin_Inlet',
    AmericaRecife: 'America/Recife',
    AmericaRegina: 'America/Regina',
    AmericaResolute: 'America/Resolute',
    AmericaRioBranco: 'America/Rio_Branco',
    AmericaRosario: 'America/Rosario',
    AmericaSantaIsabel: 'America/Santa_Isabel',
    AmericaSantarem: 'America/Santarem',
    AmericaSantiago: 'America/Santiago',
    AmericaSantoDomingo: 'America/Santo_Domingo',
    AmericaSaoPaulo: 'America/Sao_Paulo',
    AmericaScoresbysund: 'America/Scoresbysund',
    AmericaShiprock: 'America/Shiprock',
    AmericaSitka: 'America/Sitka',
    AmericaStBarthelemy: 'America/St_Barthelemy',
    AmericaStJohns: 'America/St_Johns',
    AmericaStKitts: 'America/St_Kitts',
    AmericaStLucia: 'America/St_Lucia',
    AmericaStThomas: 'America/St_Thomas',
    AmericaStVincent: 'America/St_Vincent',
    AmericaSwiftCurrent: 'America/Swift_Current',
    AmericaTegucigalpa: 'America/Tegucigalpa',
    AmericaThule: 'America/Thule',
    AmericaThunderBay: 'America/Thunder_Bay',
    AmericaTijuana: 'America/Tijuana',
    AmericaToronto: 'America/Toronto',
    AmericaTortola: 'America/Tortola',
    AmericaVancouver: 'America/Vancouver',
    AmericaVirgin: 'America/Virgin',
    AmericaWhitehorse: 'America/Whitehorse',
    AmericaWinnipeg: 'America/Winnipeg',
    AmericaYakutat: 'America/Yakutat',
    AmericaYellowknife: 'America/Yellowknife',
    AntarcticaCasey: 'Antarctica/Casey',
    AntarcticaDavis: 'Antarctica/Davis',
    AntarcticaDumontDUrville: 'Antarctica/DumontDUrville',
    AntarcticaMacquarie: 'Antarctica/Macquarie',
    AntarcticaMawson: 'Antarctica/Mawson',
    AntarcticaMcMurdo: 'Antarctica/McMurdo',
    AntarcticaPalmer: 'Antarctica/Palmer',
    AntarcticaRothera: 'Antarctica/Rothera',
    AntarcticaSouthPole: 'Antarctica/South_Pole',
    AntarcticaSyowa: 'Antarctica/Syowa',
    AntarcticaTroll: 'Antarctica/Troll',
    AntarcticaVostok: 'Antarctica/Vostok',
    ArcticLongyearbyen: 'Arctic/Longyearbyen',
    AsiaAden: 'Asia/Aden',
    AsiaAlmaty: 'Asia/Almaty',
    AsiaAmman: 'Asia/Amman',
    AsiaAnadyr: 'Asia/Anadyr',
    AsiaAqtau: 'Asia/Aqtau',
    AsiaAqtobe: 'Asia/Aqtobe',
    AsiaAshgabat: 'Asia/Ashgabat',
    AsiaAshkhabad: 'Asia/Ashkhabad',
    AsiaAtyrau: 'Asia/Atyrau',
    AsiaBaghdad: 'Asia/Baghdad',
    AsiaBahrain: 'Asia/Bahrain',
    AsiaBaku: 'Asia/Baku',
    AsiaBangkok: 'Asia/Bangkok',
    AsiaBarnaul: 'Asia/Barnaul',
    AsiaBeirut: 'Asia/Beirut',
    AsiaBishkek: 'Asia/Bishkek',
    AsiaBrunei: 'Asia/Brunei',
    AsiaCalcutta: 'Asia/Calcutta',
    AsiaChita: 'Asia/Chita',
    AsiaChoibalsan: 'Asia/Choibalsan',
    AsiaChongqing: 'Asia/Chongqing',
    AsiaChungking: 'Asia/Chungking',
    AsiaColombo: 'Asia/Colombo',
    AsiaDacca: 'Asia/Dacca',
    AsiaDamascus: 'Asia/Damascus',
    AsiaDhaka: 'Asia/Dhaka',
    AsiaDili: 'Asia/Dili',
    AsiaDubai: 'Asia/Dubai',
    AsiaDushanbe: 'Asia/Dushanbe',
    AsiaFamagusta: 'Asia/Famagusta',
    AsiaGaza: 'Asia/Gaza',
    AsiaHarbin: 'Asia/Harbin',
    AsiaHebron: 'Asia/Hebron',
    AsiaHoChiMinh: 'Asia/Ho_Chi_Minh',
    AsiaHongKong: 'Asia/Hong_Kong',
    AsiaHovd: 'Asia/Hovd',
    AsiaIrkutsk: 'Asia/Irkutsk',
    AsiaIstanbul: 'Asia/Istanbul',
    AsiaJakarta: 'Asia/Jakarta',
    AsiaJayapura: 'Asia/Jayapura',
    AsiaJerusalem: 'Asia/Jerusalem',
    AsiaKabul: 'Asia/Kabul',
    AsiaKamchatka: 'Asia/Kamchatka',
    AsiaKarachi: 'Asia/Karachi',
    AsiaKashgar: 'Asia/Kashgar',
    AsiaKathmandu: 'Asia/Kathmandu',
    AsiaKatmandu: 'Asia/Katmandu',
    AsiaKhandyga: 'Asia/Khandyga',
    AsiaKolkata: 'Asia/Kolkata',
    AsiaKrasnoyarsk: 'Asia/Krasnoyarsk',
    AsiaKualaLumpur: 'Asia/Kuala_Lumpur',
    AsiaKuching: 'Asia/Kuching',
    AsiaKuwait: 'Asia/Kuwait',
    AsiaMacao: 'Asia/Macao',
    AsiaMacau: 'Asia/Macau',
    AsiaMagadan: 'Asia/Magadan',
    AsiaMakassar: 'Asia/Makassar',
    AsiaManila: 'Asia/Manila',
    AsiaMuscat: 'Asia/Muscat',
    AsiaNicosia: 'Asia/Nicosia',
    AsiaNovokuznetsk: 'Asia/Novokuznetsk',
    AsiaNovosibirsk: 'Asia/Novosibirsk',
    AsiaOmsk: 'Asia/Omsk',
    AsiaOral: 'Asia/Oral',
    AsiaPhnomPenh: 'Asia/Phnom_Penh',
    AsiaPontianak: 'Asia/Pontianak',
    AsiaPyongyang: 'Asia/Pyongyang',
    AsiaQatar: 'Asia/Qatar',
    AsiaQostanay: 'Asia/Qostanay',
    AsiaQyzylorda: 'Asia/Qyzylorda',
    AsiaRangoon: 'Asia/Rangoon',
    AsiaRiyadh: 'Asia/Riyadh',
    AsiaSaigon: 'Asia/Saigon',
    AsiaSakhalin: 'Asia/Sakhalin',
    AsiaSamarkand: 'Asia/Samarkand',
    AsiaSeoul: 'Asia/Seoul',
    AsiaShanghai: 'Asia/Shanghai',
    AsiaSingapore: 'Asia/Singapore',
    AsiaSrednekolymsk: 'Asia/Srednekolymsk',
    AsiaTaipei: 'Asia/Taipei',
    AsiaTashkent: 'Asia/Tashkent',
    AsiaTbilisi: 'Asia/Tbilisi',
    AsiaTehran: 'Asia/Tehran',
    AsiaTelAviv: 'Asia/Tel_Aviv',
    AsiaThimbu: 'Asia/Thimbu',
    AsiaThimphu: 'Asia/Thimphu',
    AsiaTokyo: 'Asia/Tokyo',
    AsiaTomsk: 'Asia/Tomsk',
    AsiaUjungPandang: 'Asia/Ujung_Pandang',
    AsiaUlaanbaatar: 'Asia/Ulaanbaatar',
    AsiaUlanBator: 'Asia/Ulan_Bator',
    AsiaUrumqi: 'Asia/Urumqi',
    AsiaUstNera: 'Asia/Ust-Nera',
    AsiaVientiane: 'Asia/Vientiane',
    AsiaVladivostok: 'Asia/Vladivostok',
    AsiaYakutsk: 'Asia/Yakutsk',
    AsiaYangon: 'Asia/Yangon',
    AsiaYekaterinburg: 'Asia/Yekaterinburg',
    AsiaYerevan: 'Asia/Yerevan',
    AtlanticAzores: 'Atlantic/Azores',
    AtlanticBermuda: 'Atlantic/Bermuda',
    AtlanticCanary: 'Atlantic/Canary',
    AtlanticCapeVerde: 'Atlantic/Cape_Verde',
    AtlanticFaeroe: 'Atlantic/Faeroe',
    AtlanticFaroe: 'Atlantic/Faroe',
    AtlanticJanMayen: 'Atlantic/Jan_Mayen',
    AtlanticMadeira: 'Atlantic/Madeira',
    AtlanticReykjavik: 'Atlantic/Reykjavik',
    AtlanticSouthGeorgia: 'Atlantic/South_Georgia',
    AtlanticStHelena: 'Atlantic/St_Helena',
    AtlanticStanley: 'Atlantic/Stanley',
    AustraliaAct: 'Australia/ACT',
    AustraliaAdelaide: 'Australia/Adelaide',
    AustraliaBrisbane: 'Australia/Brisbane',
    AustraliaBrokenHill: 'Australia/Broken_Hill',
    AustraliaCanberra: 'Australia/Canberra',
    AustraliaCurrie: 'Australia/Currie',
    AustraliaDarwin: 'Australia/Darwin',
    AustraliaEucla: 'Australia/Eucla',
    AustraliaHobart: 'Australia/Hobart',
    AustraliaLhi: 'Australia/LHI',
    AustraliaLindeman: 'Australia/Lindeman',
    AustraliaLordHowe: 'Australia/Lord_Howe',
    AustraliaMelbourne: 'Australia/Melbourne',
    AustraliaNsw: 'Australia/NSW',
    AustraliaNorth: 'Australia/North',
    AustraliaPerth: 'Australia/Perth',
    AustraliaQueensland: 'Australia/Queensland',
    AustraliaSouth: 'Australia/South',
    AustraliaSydney: 'Australia/Sydney',
    AustraliaTasmania: 'Australia/Tasmania',
    AustraliaVictoria: 'Australia/Victoria',
    AustraliaWest: 'Australia/West',
    AustraliaYancowinna: 'Australia/Yancowinna',
    BrazilAcre: 'Brazil/Acre',
    BrazilDeNoronha: 'Brazil/DeNoronha',
    BrazilEast: 'Brazil/East',
    BrazilWest: 'Brazil/West',
    Cet: 'CET',
    Cst6Cdt: 'CST6CDT',
    CanadaAtlantic: 'Canada/Atlantic',
    CanadaCentral: 'Canada/Central',
    CanadaEastern: 'Canada/Eastern',
    CanadaMountain: 'Canada/Mountain',
    CanadaNewfoundland: 'Canada/Newfoundland',
    CanadaPacific: 'Canada/Pacific',
    CanadaSaskatchewan: 'Canada/Saskatchewan',
    CanadaYukon: 'Canada/Yukon',
    ChileContinental: 'Chile/Continental',
    ChileEasterIsland: 'Chile/EasterIsland',
    Cuba: 'Cuba',
    Eet: 'EET',
    Est: 'EST',
    Est5Edt: 'EST5EDT',
    Egypt: 'Egypt',
    Eire: 'Eire',
    EtcGmt: 'Etc/GMT',
    EtcGmt0: 'Etc/GMT+0',
    EtcGmt1: 'Etc/GMT+1',
    EtcGmt10: 'Etc/GMT+10',
    EtcGmt11: 'Etc/GMT+11',
    EtcGmt122: 'Etc/GMT+12',
    EtcGmt2: 'Etc/GMT+2',
    EtcGmt3: 'Etc/GMT+3',
    EtcGmt4: 'Etc/GMT+4',
    EtcGmt5: 'Etc/GMT+5',
    EtcGmt6: 'Etc/GMT+6',
    EtcGmt7: 'Etc/GMT+7',
    EtcGmt8: 'Etc/GMT+8',
    EtcGmt9: 'Etc/GMT+9',
    EtcGmt02: 'Etc/GMT-0',
    EtcGmt12: 'Etc/GMT-1',
    EtcGmt102: 'Etc/GMT-10',
    EtcGmt112: 'Etc/GMT-11',
    EtcGmt122: 'Etc/GMT-12',
    EtcGmt13: 'Etc/GMT-13',
    EtcGmt14: 'Etc/GMT-14',
    EtcGmt22: 'Etc/GMT-2',
    EtcGmt32: 'Etc/GMT-3',
    EtcGmt42: 'Etc/GMT-4',
    EtcGmt52: 'Etc/GMT-5',
    EtcGmt62: 'Etc/GMT-6',
    EtcGmt72: 'Etc/GMT-7',
    EtcGmt82: 'Etc/GMT-8',
    EtcGmt92: 'Etc/GMT-9',
    EtcGmt03: 'Etc/GMT0',
    EtcGreenwich: 'Etc/Greenwich',
    EtcUct: 'Etc/UCT',
    EtcUtc: 'Etc/UTC',
    EtcUniversal: 'Etc/Universal',
    EtcZulu: 'Etc/Zulu',
    EuropeAmsterdam: 'Europe/Amsterdam',
    EuropeAndorra: 'Europe/Andorra',
    EuropeAstrakhan: 'Europe/Astrakhan',
    EuropeAthens: 'Europe/Athens',
    EuropeBelfast: 'Europe/Belfast',
    EuropeBelgrade: 'Europe/Belgrade',
    EuropeBerlin: 'Europe/Berlin',
    EuropeBratislava: 'Europe/Bratislava',
    EuropeBrussels: 'Europe/Brussels',
    EuropeBucharest: 'Europe/Bucharest',
    EuropeBudapest: 'Europe/Budapest',
    EuropeBusingen: 'Europe/Busingen',
    EuropeChisinau: 'Europe/Chisinau',
    EuropeCopenhagen: 'Europe/Copenhagen',
    EuropeDublin: 'Europe/Dublin',
    EuropeGibraltar: 'Europe/Gibraltar',
    EuropeGuernsey: 'Europe/Guernsey',
    EuropeHelsinki: 'Europe/Helsinki',
    EuropeIsleOfMan: 'Europe/Isle_of_Man',
    EuropeIstanbul: 'Europe/Istanbul',
    EuropeJersey: 'Europe/Jersey',
    EuropeKaliningrad: 'Europe/Kaliningrad',
    EuropeKiev: 'Europe/Kiev',
    EuropeKirov: 'Europe/Kirov',
    EuropeKyiv: 'Europe/Kyiv',
    EuropeLisbon: 'Europe/Lisbon',
    EuropeLjubljana: 'Europe/Ljubljana',
    EuropeLondon: 'Europe/London',
    EuropeLuxembourg: 'Europe/Luxembourg',
    EuropeMadrid: 'Europe/Madrid',
    EuropeMalta: 'Europe/Malta',
    EuropeMariehamn: 'Europe/Mariehamn',
    EuropeMinsk: 'Europe/Minsk',
    EuropeMonaco: 'Europe/Monaco',
    EuropeMoscow: 'Europe/Moscow',
    EuropeNicosia: 'Europe/Nicosia',
    EuropeOslo: 'Europe/Oslo',
    EuropeParis: 'Europe/Paris',
    EuropePodgorica: 'Europe/Podgorica',
    EuropePrague: 'Europe/Prague',
    EuropeRiga: 'Europe/Riga',
    EuropeRome: 'Europe/Rome',
    EuropeSamara: 'Europe/Samara',
    EuropeSanMarino: 'Europe/San_Marino',
    EuropeSarajevo: 'Europe/Sarajevo',
    EuropeSaratov: 'Europe/Saratov',
    EuropeSimferopol: 'Europe/Simferopol',
    EuropeSkopje: 'Europe/Skopje',
    EuropeSofia: 'Europe/Sofia',
    EuropeStockholm: 'Europe/Stockholm',
    EuropeTallinn: 'Europe/Tallinn',
    EuropeTirane: 'Europe/Tirane',
    EuropeTiraspol: 'Europe/Tiraspol',
    EuropeUlyanovsk: 'Europe/Ulyanovsk',
    EuropeUzhgorod: 'Europe/Uzhgorod',
    EuropeVaduz: 'Europe/Vaduz',
    EuropeVatican: 'Europe/Vatican',
    EuropeVienna: 'Europe/Vienna',
    EuropeVilnius: 'Europe/Vilnius',
    EuropeVolgograd: 'Europe/Volgograd',
    EuropeWarsaw: 'Europe/Warsaw',
    EuropeZagreb: 'Europe/Zagreb',
    EuropeZaporozhye: 'Europe/Zaporozhye',
    EuropeZurich: 'Europe/Zurich',
    Gb: 'GB',
    GbEire: 'GB-Eire',
    Gmt: 'GMT',
    Gmt0: 'GMT+0',
    Gmt02: 'GMT-0',
    Gmt03: 'GMT0',
    Greenwich: 'Greenwich',
    Hst: 'HST',
    Hongkong: 'Hongkong',
    Iceland: 'Iceland',
    IndianAntananarivo: 'Indian/Antananarivo',
    IndianChagos: 'Indian/Chagos',
    IndianChristmas: 'Indian/Christmas',
    IndianCocos: 'Indian/Cocos',
    IndianComoro: 'Indian/Comoro',
    IndianKerguelen: 'Indian/Kerguelen',
    IndianMahe: 'Indian/Mahe',
    IndianMaldives: 'Indian/Maldives',
    IndianMauritius: 'Indian/Mauritius',
    IndianMayotte: 'Indian/Mayotte',
    IndianReunion: 'Indian/Reunion',
    Iran: 'Iran',
    Israel: 'Israel',
    Jamaica: 'Jamaica',
    Japan: 'Japan',
    Kwajalein: 'Kwajalein',
    Libya: 'Libya',
    Met: 'MET',
    Mst: 'MST',
    Mst7Mdt: 'MST7MDT',
    MexicoBajaNorte: 'Mexico/BajaNorte',
    MexicoBajaSur: 'Mexico/BajaSur',
    MexicoGeneral: 'Mexico/General',
    Nz: 'NZ',
    NzChat: 'NZ-CHAT',
    Navajo: 'Navajo',
    Prc: 'PRC',
    Pst8Pdt: 'PST8PDT',
    PacificApia: 'Pacific/Apia',
    PacificAuckland: 'Pacific/Auckland',
    PacificBougainville: 'Pacific/Bougainville',
    PacificChatham: 'Pacific/Chatham',
    PacificChuuk: 'Pacific/Chuuk',
    PacificEaster: 'Pacific/Easter',
    PacificEfate: 'Pacific/Efate',
    PacificEnderbury: 'Pacific/Enderbury',
    PacificFakaofo: 'Pacific/Fakaofo',
    PacificFiji: 'Pacific/Fiji',
    PacificFunafuti: 'Pacific/Funafuti',
    PacificGalapagos: 'Pacific/Galapagos',
    PacificGambier: 'Pacific/Gambier',
    PacificGuadalcanal: 'Pacific/Guadalcanal',
    PacificGuam: 'Pacific/Guam',
    PacificHonolulu: 'Pacific/Honolulu',
    PacificJohnston: 'Pacific/Johnston',
    PacificKanton: 'Pacific/Kanton',
    PacificKiritimati: 'Pacific/Kiritimati',
    PacificKosrae: 'Pacific/Kosrae',
    PacificKwajalein: 'Pacific/Kwajalein',
    PacificMajuro: 'Pacific/Majuro',
    PacificMarquesas: 'Pacific/Marquesas',
    PacificMidway: 'Pacific/Midway',
    PacificNauru: 'Pacific/Nauru',
    PacificNiue: 'Pacific/Niue',
    PacificNorfolk: 'Pacific/Norfolk',
    PacificNoumea: 'Pacific/Noumea',
    PacificPagoPago: 'Pacific/Pago_Pago',
    PacificPalau: 'Pacific/Palau',
    PacificPitcairn: 'Pacific/Pitcairn',
    PacificPohnpei: 'Pacific/Pohnpei',
    PacificPonape: 'Pacific/Ponape',
    PacificPortMoresby: 'Pacific/Port_Moresby',
    PacificRarotonga: 'Pacific/Rarotonga',
    PacificSaipan: 'Pacific/Saipan',
    PacificSamoa: 'Pacific/Samoa',
    PacificTahiti: 'Pacific/Tahiti',
    PacificTarawa: 'Pacific/Tarawa',
    PacificTongatapu: 'Pacific/Tongatapu',
    PacificTruk: 'Pacific/Truk',
    PacificWake: 'Pacific/Wake',
    PacificWallis: 'Pacific/Wallis',
    PacificYap: 'Pacific/Yap',
    Poland: 'Poland',
    Portugal: 'Portugal',
    Roc: 'ROC',
    Rok: 'ROK',
    Singapore: 'Singapore',
    Turkey: 'Turkey',
    Uct: 'UCT',
    UsAlaska: 'US/Alaska',
    UsAleutian: 'US/Aleutian',
    UsArizona: 'US/Arizona',
    UsCentral: 'US/Central',
    UsEastIndiana: 'US/East-Indiana',
    UsEastern: 'US/Eastern',
    UsHawaii: 'US/Hawaii',
    UsIndianaStarke: 'US/Indiana-Starke',
    UsMichigan: 'US/Michigan',
    UsMountain: 'US/Mountain',
    UsPacific: 'US/Pacific',
    UsSamoa: 'US/Samoa',
    Utc: 'UTC',
    Universal: 'Universal',
    WSu: 'W-SU',
    Wet: 'WET',
    Zulu: 'Zulu'
} as const;

export type LocationTimezoneEnum = typeof LocationTimezoneEnum[keyof typeof LocationTimezoneEnum];

/**
 * 
 * @export
 * @interface LocationPoint
 */
export interface LocationPoint {
    /**
     * 
     * @type {number}
     * @memberof LocationPoint
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof LocationPoint
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface LocationRequest
 */
export interface LocationRequest {
    /**
     * Did user indicate that report relates to current location of phone (\'current\') or to a location selected manually on the map (\'selected\')? Or is the choice missing (\'missing\')
     * @type {string}
     * @memberof LocationRequest
     */
    'type': LocationRequestTypeEnum;
    /**
     * 
     * @type {LocationPoint}
     * @memberof LocationRequest
     */
    'point': LocationPoint | null;
}

export const LocationRequestTypeEnum = {
    Current: 'current',
    Selected: 'selected',
    Missing: 'missing'
} as const;

export type LocationRequestTypeEnum = typeof LocationRequestTypeEnum[keyof typeof LocationRequestTypeEnum];

/**
 * @type MetaNotificationRequest
 * @export
 */
export type MetaNotificationRequest = { receiver_type: 'topic' } & TopicNotificationCreateRequest | { receiver_type: 'user' } & UserNotificationCreateRequest;

/**
 * 
 * @export
 * @interface MobileApp
 */
export interface MobileApp {
    /**
     * 
     * @type {string}
     * @memberof MobileApp
     */
    'package_name': string;
    /**
     * 
     * @type {string}
     * @memberof MobileApp
     */
    'package_version': string;
}
/**
 * 
 * @export
 * @interface MobileAppRequest
 */
export interface MobileAppRequest {
    /**
     * 
     * @type {string}
     * @memberof MobileAppRequest
     */
    'package_name': string;
    /**
     * 
     * @type {string}
     * @memberof MobileAppRequest
     */
    'package_version': string;
}
/**
 * 
 * @export
 * @interface Notification
 */
export interface Notification {
    /**
     * 
     * @type {number}
     * @memberof Notification
     */
    'id': number;
    /**
     * 
     * @type {NotificationMessage}
     * @memberof Notification
     */
    'message': NotificationMessage;
    /**
     * 
     * @type {boolean}
     * @memberof Notification
     */
    'is_read': boolean;
    /**
     * 
     * @type {string}
     * @memberof Notification
     */
    'created_at': string;
}
/**
 * 
 * @export
 * @interface NotificationMessage
 */
export interface NotificationMessage {
    /**
     * 
     * @type {string}
     * @memberof NotificationMessage
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof NotificationMessage
     */
    'body': string;
}
/**
 * 
 * @export
 * @interface NotificationRequest
 */
export interface NotificationRequest {
    /**
     * 
     * @type {boolean}
     * @memberof NotificationRequest
     */
    'is_read': boolean;
}
/**
 * @type NotificationsCreateError
 * @export
 */
export type NotificationsCreateError = { attr: 'message.body.bg' } & NotificationsCreateMessageBodyBgErrorComponent | { attr: 'message.body.bn' } & NotificationsCreateMessageBodyBnErrorComponent | { attr: 'message.body.ca' } & NotificationsCreateMessageBodyCaErrorComponent | { attr: 'message.body.de' } & NotificationsCreateMessageBodyDeErrorComponent | { attr: 'message.body.el' } & NotificationsCreateMessageBodyElErrorComponent | { attr: 'message.body.en' } & NotificationsCreateMessageBodyEnErrorComponent | { attr: 'message.body.es' } & NotificationsCreateMessageBodyEsErrorComponent | { attr: 'message.body.eu' } & NotificationsCreateMessageBodyEuErrorComponent | { attr: 'message.body.fr' } & NotificationsCreateMessageBodyFrErrorComponent | { attr: 'message.body.gl' } & NotificationsCreateMessageBodyGlErrorComponent | { attr: 'message.body.hr' } & NotificationsCreateMessageBodyHrErrorComponent | { attr: 'message.body.hu' } & NotificationsCreateMessageBodyHuErrorComponent | { attr: 'message.body.it' } & NotificationsCreateMessageBodyItErrorComponent | { attr: 'message.body.lb' } & NotificationsCreateMessageBodyLbErrorComponent | { attr: 'message.body.mk' } & NotificationsCreateMessageBodyMkErrorComponent | { attr: 'message.body.nl' } & NotificationsCreateMessageBodyNlErrorComponent | { attr: 'message.body.non_field_errors' } & NotificationsCreateMessageBodyNonFieldErrorsErrorComponent | { attr: 'message.body.pt' } & NotificationsCreateMessageBodyPtErrorComponent | { attr: 'message.body.ro' } & NotificationsCreateMessageBodyRoErrorComponent | { attr: 'message.body.sl' } & NotificationsCreateMessageBodySlErrorComponent | { attr: 'message.body.sq' } & NotificationsCreateMessageBodySqErrorComponent | { attr: 'message.body.sr' } & NotificationsCreateMessageBodySrErrorComponent | { attr: 'message.body.sv' } & NotificationsCreateMessageBodySvErrorComponent | { attr: 'message.body.tr' } & NotificationsCreateMessageBodyTrErrorComponent | { attr: 'message.body.zh-CN' } & NotificationsCreateMessageBodyZhCNErrorComponent | { attr: 'message.non_field_errors' } & NotificationsCreateMessageNonFieldErrorsErrorComponent | { attr: 'message.title.bg' } & NotificationsCreateMessageTitleBgErrorComponent | { attr: 'message.title.bn' } & NotificationsCreateMessageTitleBnErrorComponent | { attr: 'message.title.ca' } & NotificationsCreateMessageTitleCaErrorComponent | { attr: 'message.title.de' } & NotificationsCreateMessageTitleDeErrorComponent | { attr: 'message.title.el' } & NotificationsCreateMessageTitleElErrorComponent | { attr: 'message.title.en' } & NotificationsCreateMessageTitleEnErrorComponent | { attr: 'message.title.es' } & NotificationsCreateMessageTitleEsErrorComponent | { attr: 'message.title.eu' } & NotificationsCreateMessageTitleEuErrorComponent | { attr: 'message.title.fr' } & NotificationsCreateMessageTitleFrErrorComponent | { attr: 'message.title.gl' } & NotificationsCreateMessageTitleGlErrorComponent | { attr: 'message.title.hr' } & NotificationsCreateMessageTitleHrErrorComponent | { attr: 'message.title.hu' } & NotificationsCreateMessageTitleHuErrorComponent | { attr: 'message.title.it' } & NotificationsCreateMessageTitleItErrorComponent | { attr: 'message.title.lb' } & NotificationsCreateMessageTitleLbErrorComponent | { attr: 'message.title.mk' } & NotificationsCreateMessageTitleMkErrorComponent | { attr: 'message.title.nl' } & NotificationsCreateMessageTitleNlErrorComponent | { attr: 'message.title.non_field_errors' } & NotificationsCreateMessageTitleNonFieldErrorsErrorComponent | { attr: 'message.title.pt' } & NotificationsCreateMessageTitlePtErrorComponent | { attr: 'message.title.ro' } & NotificationsCreateMessageTitleRoErrorComponent | { attr: 'message.title.sl' } & NotificationsCreateMessageTitleSlErrorComponent | { attr: 'message.title.sq' } & NotificationsCreateMessageTitleSqErrorComponent | { attr: 'message.title.sr' } & NotificationsCreateMessageTitleSrErrorComponent | { attr: 'message.title.sv' } & NotificationsCreateMessageTitleSvErrorComponent | { attr: 'message.title.tr' } & NotificationsCreateMessageTitleTrErrorComponent | { attr: 'message.title.zh-CN' } & NotificationsCreateMessageTitleZhCNErrorComponent | { attr: 'non_field_errors' } & NotificationsCreateNonFieldErrorsErrorComponent | { attr: 'receiver_type' } & NotificationsCreateReceiverTypeErrorComponent | { attr: 'topic_codes' } & NotificationsCreateTopicCodesErrorComponent | { attr: 'topic_codes.INDEX' } & NotificationsCreateTopicCodesINDEXErrorComponent | { attr: 'user_uuids' } & NotificationsCreateUserUuidsErrorComponent | { attr: 'user_uuids.INDEX' } & NotificationsCreateUserUuidsINDEXErrorComponent;

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyBgErrorComponent
 */
export interface NotificationsCreateMessageBodyBgErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyBgErrorComponent
     */
    'attr': NotificationsCreateMessageBodyBgErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyBgErrorComponent
     */
    'code': NotificationsCreateMessageBodyBgErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyBgErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyBgErrorComponentAttrEnum = {
    MessageBodyBg: 'message.body.bg'
} as const;

export type NotificationsCreateMessageBodyBgErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyBgErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyBgErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyBgErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyBgErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyBgErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyBgErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyBnErrorComponent
 */
export interface NotificationsCreateMessageBodyBnErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyBnErrorComponent
     */
    'attr': NotificationsCreateMessageBodyBnErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyBnErrorComponent
     */
    'code': NotificationsCreateMessageBodyBnErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyBnErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyBnErrorComponentAttrEnum = {
    MessageBodyBn: 'message.body.bn'
} as const;

export type NotificationsCreateMessageBodyBnErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyBnErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyBnErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyBnErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyBnErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyBnErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyBnErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyCaErrorComponent
 */
export interface NotificationsCreateMessageBodyCaErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyCaErrorComponent
     */
    'attr': NotificationsCreateMessageBodyCaErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyCaErrorComponent
     */
    'code': NotificationsCreateMessageBodyCaErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyCaErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyCaErrorComponentAttrEnum = {
    MessageBodyCa: 'message.body.ca'
} as const;

export type NotificationsCreateMessageBodyCaErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyCaErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyCaErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyCaErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyCaErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyCaErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyCaErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyDeErrorComponent
 */
export interface NotificationsCreateMessageBodyDeErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyDeErrorComponent
     */
    'attr': NotificationsCreateMessageBodyDeErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyDeErrorComponent
     */
    'code': NotificationsCreateMessageBodyDeErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyDeErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyDeErrorComponentAttrEnum = {
    MessageBodyDe: 'message.body.de'
} as const;

export type NotificationsCreateMessageBodyDeErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyDeErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyDeErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyDeErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyDeErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyDeErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyDeErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyElErrorComponent
 */
export interface NotificationsCreateMessageBodyElErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyElErrorComponent
     */
    'attr': NotificationsCreateMessageBodyElErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyElErrorComponent
     */
    'code': NotificationsCreateMessageBodyElErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyElErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyElErrorComponentAttrEnum = {
    MessageBodyEl: 'message.body.el'
} as const;

export type NotificationsCreateMessageBodyElErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyElErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyElErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyElErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyElErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyElErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyElErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyEnErrorComponent
 */
export interface NotificationsCreateMessageBodyEnErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyEnErrorComponent
     */
    'attr': NotificationsCreateMessageBodyEnErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyEnErrorComponent
     */
    'code': NotificationsCreateMessageBodyEnErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyEnErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyEnErrorComponentAttrEnum = {
    MessageBodyEn: 'message.body.en'
} as const;

export type NotificationsCreateMessageBodyEnErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyEnErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyEnErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyEnErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyEnErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyEnErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyEnErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyEsErrorComponent
 */
export interface NotificationsCreateMessageBodyEsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyEsErrorComponent
     */
    'attr': NotificationsCreateMessageBodyEsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyEsErrorComponent
     */
    'code': NotificationsCreateMessageBodyEsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyEsErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyEsErrorComponentAttrEnum = {
    MessageBodyEs: 'message.body.es'
} as const;

export type NotificationsCreateMessageBodyEsErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyEsErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyEsErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyEsErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyEsErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyEsErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyEsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyEuErrorComponent
 */
export interface NotificationsCreateMessageBodyEuErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyEuErrorComponent
     */
    'attr': NotificationsCreateMessageBodyEuErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyEuErrorComponent
     */
    'code': NotificationsCreateMessageBodyEuErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyEuErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyEuErrorComponentAttrEnum = {
    MessageBodyEu: 'message.body.eu'
} as const;

export type NotificationsCreateMessageBodyEuErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyEuErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyEuErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyEuErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyEuErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyEuErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyEuErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyFrErrorComponent
 */
export interface NotificationsCreateMessageBodyFrErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyFrErrorComponent
     */
    'attr': NotificationsCreateMessageBodyFrErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyFrErrorComponent
     */
    'code': NotificationsCreateMessageBodyFrErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyFrErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyFrErrorComponentAttrEnum = {
    MessageBodyFr: 'message.body.fr'
} as const;

export type NotificationsCreateMessageBodyFrErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyFrErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyFrErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyFrErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyFrErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyFrErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyFrErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyGlErrorComponent
 */
export interface NotificationsCreateMessageBodyGlErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyGlErrorComponent
     */
    'attr': NotificationsCreateMessageBodyGlErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyGlErrorComponent
     */
    'code': NotificationsCreateMessageBodyGlErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyGlErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyGlErrorComponentAttrEnum = {
    MessageBodyGl: 'message.body.gl'
} as const;

export type NotificationsCreateMessageBodyGlErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyGlErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyGlErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyGlErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyGlErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyGlErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyGlErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyHrErrorComponent
 */
export interface NotificationsCreateMessageBodyHrErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyHrErrorComponent
     */
    'attr': NotificationsCreateMessageBodyHrErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyHrErrorComponent
     */
    'code': NotificationsCreateMessageBodyHrErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyHrErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyHrErrorComponentAttrEnum = {
    MessageBodyHr: 'message.body.hr'
} as const;

export type NotificationsCreateMessageBodyHrErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyHrErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyHrErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyHrErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyHrErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyHrErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyHrErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyHuErrorComponent
 */
export interface NotificationsCreateMessageBodyHuErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyHuErrorComponent
     */
    'attr': NotificationsCreateMessageBodyHuErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyHuErrorComponent
     */
    'code': NotificationsCreateMessageBodyHuErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyHuErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyHuErrorComponentAttrEnum = {
    MessageBodyHu: 'message.body.hu'
} as const;

export type NotificationsCreateMessageBodyHuErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyHuErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyHuErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyHuErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyHuErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyHuErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyHuErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyItErrorComponent
 */
export interface NotificationsCreateMessageBodyItErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyItErrorComponent
     */
    'attr': NotificationsCreateMessageBodyItErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyItErrorComponent
     */
    'code': NotificationsCreateMessageBodyItErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyItErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyItErrorComponentAttrEnum = {
    MessageBodyIt: 'message.body.it'
} as const;

export type NotificationsCreateMessageBodyItErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyItErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyItErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyItErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyItErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyItErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyItErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyLbErrorComponent
 */
export interface NotificationsCreateMessageBodyLbErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyLbErrorComponent
     */
    'attr': NotificationsCreateMessageBodyLbErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyLbErrorComponent
     */
    'code': NotificationsCreateMessageBodyLbErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyLbErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyLbErrorComponentAttrEnum = {
    MessageBodyLb: 'message.body.lb'
} as const;

export type NotificationsCreateMessageBodyLbErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyLbErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyLbErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyLbErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyLbErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyLbErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyLbErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyMkErrorComponent
 */
export interface NotificationsCreateMessageBodyMkErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyMkErrorComponent
     */
    'attr': NotificationsCreateMessageBodyMkErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyMkErrorComponent
     */
    'code': NotificationsCreateMessageBodyMkErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyMkErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyMkErrorComponentAttrEnum = {
    MessageBodyMk: 'message.body.mk'
} as const;

export type NotificationsCreateMessageBodyMkErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyMkErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyMkErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyMkErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyMkErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyMkErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyMkErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyNlErrorComponent
 */
export interface NotificationsCreateMessageBodyNlErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyNlErrorComponent
     */
    'attr': NotificationsCreateMessageBodyNlErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyNlErrorComponent
     */
    'code': NotificationsCreateMessageBodyNlErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyNlErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyNlErrorComponentAttrEnum = {
    MessageBodyNl: 'message.body.nl'
} as const;

export type NotificationsCreateMessageBodyNlErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyNlErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyNlErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyNlErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyNlErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyNlErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyNlErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyNonFieldErrorsErrorComponent
 */
export interface NotificationsCreateMessageBodyNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyNonFieldErrorsErrorComponent
     */
    'attr': NotificationsCreateMessageBodyNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyNonFieldErrorsErrorComponent
     */
    'code': NotificationsCreateMessageBodyNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyNonFieldErrorsErrorComponentAttrEnum = {
    MessageBodyNonFieldErrors: 'message.body.non_field_errors'
} as const;

export type NotificationsCreateMessageBodyNonFieldErrorsErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyNonFieldErrorsErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyNonFieldErrorsErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type NotificationsCreateMessageBodyNonFieldErrorsErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyNonFieldErrorsErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyPtErrorComponent
 */
export interface NotificationsCreateMessageBodyPtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyPtErrorComponent
     */
    'attr': NotificationsCreateMessageBodyPtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyPtErrorComponent
     */
    'code': NotificationsCreateMessageBodyPtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyPtErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyPtErrorComponentAttrEnum = {
    MessageBodyPt: 'message.body.pt'
} as const;

export type NotificationsCreateMessageBodyPtErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyPtErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyPtErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyPtErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyPtErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyPtErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyPtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyRoErrorComponent
 */
export interface NotificationsCreateMessageBodyRoErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyRoErrorComponent
     */
    'attr': NotificationsCreateMessageBodyRoErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyRoErrorComponent
     */
    'code': NotificationsCreateMessageBodyRoErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyRoErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyRoErrorComponentAttrEnum = {
    MessageBodyRo: 'message.body.ro'
} as const;

export type NotificationsCreateMessageBodyRoErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyRoErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyRoErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyRoErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyRoErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyRoErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyRoErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodySlErrorComponent
 */
export interface NotificationsCreateMessageBodySlErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodySlErrorComponent
     */
    'attr': NotificationsCreateMessageBodySlErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodySlErrorComponent
     */
    'code': NotificationsCreateMessageBodySlErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodySlErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodySlErrorComponentAttrEnum = {
    MessageBodySl: 'message.body.sl'
} as const;

export type NotificationsCreateMessageBodySlErrorComponentAttrEnum = typeof NotificationsCreateMessageBodySlErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodySlErrorComponentAttrEnum];
export const NotificationsCreateMessageBodySlErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodySlErrorComponentCodeEnum = typeof NotificationsCreateMessageBodySlErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodySlErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodySqErrorComponent
 */
export interface NotificationsCreateMessageBodySqErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodySqErrorComponent
     */
    'attr': NotificationsCreateMessageBodySqErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodySqErrorComponent
     */
    'code': NotificationsCreateMessageBodySqErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodySqErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodySqErrorComponentAttrEnum = {
    MessageBodySq: 'message.body.sq'
} as const;

export type NotificationsCreateMessageBodySqErrorComponentAttrEnum = typeof NotificationsCreateMessageBodySqErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodySqErrorComponentAttrEnum];
export const NotificationsCreateMessageBodySqErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodySqErrorComponentCodeEnum = typeof NotificationsCreateMessageBodySqErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodySqErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodySrErrorComponent
 */
export interface NotificationsCreateMessageBodySrErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodySrErrorComponent
     */
    'attr': NotificationsCreateMessageBodySrErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodySrErrorComponent
     */
    'code': NotificationsCreateMessageBodySrErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodySrErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodySrErrorComponentAttrEnum = {
    MessageBodySr: 'message.body.sr'
} as const;

export type NotificationsCreateMessageBodySrErrorComponentAttrEnum = typeof NotificationsCreateMessageBodySrErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodySrErrorComponentAttrEnum];
export const NotificationsCreateMessageBodySrErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodySrErrorComponentCodeEnum = typeof NotificationsCreateMessageBodySrErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodySrErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodySvErrorComponent
 */
export interface NotificationsCreateMessageBodySvErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodySvErrorComponent
     */
    'attr': NotificationsCreateMessageBodySvErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodySvErrorComponent
     */
    'code': NotificationsCreateMessageBodySvErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodySvErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodySvErrorComponentAttrEnum = {
    MessageBodySv: 'message.body.sv'
} as const;

export type NotificationsCreateMessageBodySvErrorComponentAttrEnum = typeof NotificationsCreateMessageBodySvErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodySvErrorComponentAttrEnum];
export const NotificationsCreateMessageBodySvErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodySvErrorComponentCodeEnum = typeof NotificationsCreateMessageBodySvErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodySvErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyTrErrorComponent
 */
export interface NotificationsCreateMessageBodyTrErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyTrErrorComponent
     */
    'attr': NotificationsCreateMessageBodyTrErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyTrErrorComponent
     */
    'code': NotificationsCreateMessageBodyTrErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyTrErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyTrErrorComponentAttrEnum = {
    MessageBodyTr: 'message.body.tr'
} as const;

export type NotificationsCreateMessageBodyTrErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyTrErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyTrErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyTrErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyTrErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyTrErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyTrErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageBodyZhCNErrorComponent
 */
export interface NotificationsCreateMessageBodyZhCNErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyZhCNErrorComponent
     */
    'attr': NotificationsCreateMessageBodyZhCNErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyZhCNErrorComponent
     */
    'code': NotificationsCreateMessageBodyZhCNErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageBodyZhCNErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageBodyZhCNErrorComponentAttrEnum = {
    MessageBodyZhCn: 'message.body.zh-CN'
} as const;

export type NotificationsCreateMessageBodyZhCNErrorComponentAttrEnum = typeof NotificationsCreateMessageBodyZhCNErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageBodyZhCNErrorComponentAttrEnum];
export const NotificationsCreateMessageBodyZhCNErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageBodyZhCNErrorComponentCodeEnum = typeof NotificationsCreateMessageBodyZhCNErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageBodyZhCNErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageNonFieldErrorsErrorComponent
 */
export interface NotificationsCreateMessageNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageNonFieldErrorsErrorComponent
     */
    'attr': NotificationsCreateMessageNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageNonFieldErrorsErrorComponent
     */
    'code': NotificationsCreateMessageNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageNonFieldErrorsErrorComponentAttrEnum = {
    MessageNonFieldErrors: 'message.non_field_errors'
} as const;

export type NotificationsCreateMessageNonFieldErrorsErrorComponentAttrEnum = typeof NotificationsCreateMessageNonFieldErrorsErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageNonFieldErrorsErrorComponentAttrEnum];
export const NotificationsCreateMessageNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type NotificationsCreateMessageNonFieldErrorsErrorComponentCodeEnum = typeof NotificationsCreateMessageNonFieldErrorsErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleBgErrorComponent
 */
export interface NotificationsCreateMessageTitleBgErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleBgErrorComponent
     */
    'attr': NotificationsCreateMessageTitleBgErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleBgErrorComponent
     */
    'code': NotificationsCreateMessageTitleBgErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleBgErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleBgErrorComponentAttrEnum = {
    MessageTitleBg: 'message.title.bg'
} as const;

export type NotificationsCreateMessageTitleBgErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleBgErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleBgErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleBgErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleBgErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleBgErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleBgErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleBnErrorComponent
 */
export interface NotificationsCreateMessageTitleBnErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleBnErrorComponent
     */
    'attr': NotificationsCreateMessageTitleBnErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleBnErrorComponent
     */
    'code': NotificationsCreateMessageTitleBnErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleBnErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleBnErrorComponentAttrEnum = {
    MessageTitleBn: 'message.title.bn'
} as const;

export type NotificationsCreateMessageTitleBnErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleBnErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleBnErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleBnErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleBnErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleBnErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleBnErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleCaErrorComponent
 */
export interface NotificationsCreateMessageTitleCaErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleCaErrorComponent
     */
    'attr': NotificationsCreateMessageTitleCaErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleCaErrorComponent
     */
    'code': NotificationsCreateMessageTitleCaErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleCaErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleCaErrorComponentAttrEnum = {
    MessageTitleCa: 'message.title.ca'
} as const;

export type NotificationsCreateMessageTitleCaErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleCaErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleCaErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleCaErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleCaErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleCaErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleCaErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleDeErrorComponent
 */
export interface NotificationsCreateMessageTitleDeErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleDeErrorComponent
     */
    'attr': NotificationsCreateMessageTitleDeErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleDeErrorComponent
     */
    'code': NotificationsCreateMessageTitleDeErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleDeErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleDeErrorComponentAttrEnum = {
    MessageTitleDe: 'message.title.de'
} as const;

export type NotificationsCreateMessageTitleDeErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleDeErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleDeErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleDeErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleDeErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleDeErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleDeErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleElErrorComponent
 */
export interface NotificationsCreateMessageTitleElErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleElErrorComponent
     */
    'attr': NotificationsCreateMessageTitleElErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleElErrorComponent
     */
    'code': NotificationsCreateMessageTitleElErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleElErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleElErrorComponentAttrEnum = {
    MessageTitleEl: 'message.title.el'
} as const;

export type NotificationsCreateMessageTitleElErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleElErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleElErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleElErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleElErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleElErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleElErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleEnErrorComponent
 */
export interface NotificationsCreateMessageTitleEnErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleEnErrorComponent
     */
    'attr': NotificationsCreateMessageTitleEnErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleEnErrorComponent
     */
    'code': NotificationsCreateMessageTitleEnErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleEnErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleEnErrorComponentAttrEnum = {
    MessageTitleEn: 'message.title.en'
} as const;

export type NotificationsCreateMessageTitleEnErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleEnErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleEnErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleEnErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleEnErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleEnErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleEnErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleEsErrorComponent
 */
export interface NotificationsCreateMessageTitleEsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleEsErrorComponent
     */
    'attr': NotificationsCreateMessageTitleEsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleEsErrorComponent
     */
    'code': NotificationsCreateMessageTitleEsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleEsErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleEsErrorComponentAttrEnum = {
    MessageTitleEs: 'message.title.es'
} as const;

export type NotificationsCreateMessageTitleEsErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleEsErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleEsErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleEsErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleEsErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleEsErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleEsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleEuErrorComponent
 */
export interface NotificationsCreateMessageTitleEuErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleEuErrorComponent
     */
    'attr': NotificationsCreateMessageTitleEuErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleEuErrorComponent
     */
    'code': NotificationsCreateMessageTitleEuErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleEuErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleEuErrorComponentAttrEnum = {
    MessageTitleEu: 'message.title.eu'
} as const;

export type NotificationsCreateMessageTitleEuErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleEuErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleEuErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleEuErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleEuErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleEuErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleEuErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleFrErrorComponent
 */
export interface NotificationsCreateMessageTitleFrErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleFrErrorComponent
     */
    'attr': NotificationsCreateMessageTitleFrErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleFrErrorComponent
     */
    'code': NotificationsCreateMessageTitleFrErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleFrErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleFrErrorComponentAttrEnum = {
    MessageTitleFr: 'message.title.fr'
} as const;

export type NotificationsCreateMessageTitleFrErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleFrErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleFrErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleFrErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleFrErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleFrErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleFrErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleGlErrorComponent
 */
export interface NotificationsCreateMessageTitleGlErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleGlErrorComponent
     */
    'attr': NotificationsCreateMessageTitleGlErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleGlErrorComponent
     */
    'code': NotificationsCreateMessageTitleGlErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleGlErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleGlErrorComponentAttrEnum = {
    MessageTitleGl: 'message.title.gl'
} as const;

export type NotificationsCreateMessageTitleGlErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleGlErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleGlErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleGlErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleGlErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleGlErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleGlErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleHrErrorComponent
 */
export interface NotificationsCreateMessageTitleHrErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleHrErrorComponent
     */
    'attr': NotificationsCreateMessageTitleHrErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleHrErrorComponent
     */
    'code': NotificationsCreateMessageTitleHrErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleHrErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleHrErrorComponentAttrEnum = {
    MessageTitleHr: 'message.title.hr'
} as const;

export type NotificationsCreateMessageTitleHrErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleHrErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleHrErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleHrErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleHrErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleHrErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleHrErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleHuErrorComponent
 */
export interface NotificationsCreateMessageTitleHuErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleHuErrorComponent
     */
    'attr': NotificationsCreateMessageTitleHuErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleHuErrorComponent
     */
    'code': NotificationsCreateMessageTitleHuErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleHuErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleHuErrorComponentAttrEnum = {
    MessageTitleHu: 'message.title.hu'
} as const;

export type NotificationsCreateMessageTitleHuErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleHuErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleHuErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleHuErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleHuErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleHuErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleHuErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleItErrorComponent
 */
export interface NotificationsCreateMessageTitleItErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleItErrorComponent
     */
    'attr': NotificationsCreateMessageTitleItErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleItErrorComponent
     */
    'code': NotificationsCreateMessageTitleItErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleItErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleItErrorComponentAttrEnum = {
    MessageTitleIt: 'message.title.it'
} as const;

export type NotificationsCreateMessageTitleItErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleItErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleItErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleItErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleItErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleItErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleItErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleLbErrorComponent
 */
export interface NotificationsCreateMessageTitleLbErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleLbErrorComponent
     */
    'attr': NotificationsCreateMessageTitleLbErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleLbErrorComponent
     */
    'code': NotificationsCreateMessageTitleLbErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleLbErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleLbErrorComponentAttrEnum = {
    MessageTitleLb: 'message.title.lb'
} as const;

export type NotificationsCreateMessageTitleLbErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleLbErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleLbErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleLbErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleLbErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleLbErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleLbErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleMkErrorComponent
 */
export interface NotificationsCreateMessageTitleMkErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleMkErrorComponent
     */
    'attr': NotificationsCreateMessageTitleMkErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleMkErrorComponent
     */
    'code': NotificationsCreateMessageTitleMkErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleMkErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleMkErrorComponentAttrEnum = {
    MessageTitleMk: 'message.title.mk'
} as const;

export type NotificationsCreateMessageTitleMkErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleMkErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleMkErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleMkErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleMkErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleMkErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleMkErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleNlErrorComponent
 */
export interface NotificationsCreateMessageTitleNlErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleNlErrorComponent
     */
    'attr': NotificationsCreateMessageTitleNlErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleNlErrorComponent
     */
    'code': NotificationsCreateMessageTitleNlErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleNlErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleNlErrorComponentAttrEnum = {
    MessageTitleNl: 'message.title.nl'
} as const;

export type NotificationsCreateMessageTitleNlErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleNlErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleNlErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleNlErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleNlErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleNlErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleNlErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleNonFieldErrorsErrorComponent
 */
export interface NotificationsCreateMessageTitleNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleNonFieldErrorsErrorComponent
     */
    'attr': NotificationsCreateMessageTitleNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleNonFieldErrorsErrorComponent
     */
    'code': NotificationsCreateMessageTitleNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleNonFieldErrorsErrorComponentAttrEnum = {
    MessageTitleNonFieldErrors: 'message.title.non_field_errors'
} as const;

export type NotificationsCreateMessageTitleNonFieldErrorsErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleNonFieldErrorsErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleNonFieldErrorsErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type NotificationsCreateMessageTitleNonFieldErrorsErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleNonFieldErrorsErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitlePtErrorComponent
 */
export interface NotificationsCreateMessageTitlePtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitlePtErrorComponent
     */
    'attr': NotificationsCreateMessageTitlePtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitlePtErrorComponent
     */
    'code': NotificationsCreateMessageTitlePtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitlePtErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitlePtErrorComponentAttrEnum = {
    MessageTitlePt: 'message.title.pt'
} as const;

export type NotificationsCreateMessageTitlePtErrorComponentAttrEnum = typeof NotificationsCreateMessageTitlePtErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitlePtErrorComponentAttrEnum];
export const NotificationsCreateMessageTitlePtErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitlePtErrorComponentCodeEnum = typeof NotificationsCreateMessageTitlePtErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitlePtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleRoErrorComponent
 */
export interface NotificationsCreateMessageTitleRoErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleRoErrorComponent
     */
    'attr': NotificationsCreateMessageTitleRoErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleRoErrorComponent
     */
    'code': NotificationsCreateMessageTitleRoErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleRoErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleRoErrorComponentAttrEnum = {
    MessageTitleRo: 'message.title.ro'
} as const;

export type NotificationsCreateMessageTitleRoErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleRoErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleRoErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleRoErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleRoErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleRoErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleRoErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleSlErrorComponent
 */
export interface NotificationsCreateMessageTitleSlErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleSlErrorComponent
     */
    'attr': NotificationsCreateMessageTitleSlErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleSlErrorComponent
     */
    'code': NotificationsCreateMessageTitleSlErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleSlErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleSlErrorComponentAttrEnum = {
    MessageTitleSl: 'message.title.sl'
} as const;

export type NotificationsCreateMessageTitleSlErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleSlErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleSlErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleSlErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleSlErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleSlErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleSlErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleSqErrorComponent
 */
export interface NotificationsCreateMessageTitleSqErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleSqErrorComponent
     */
    'attr': NotificationsCreateMessageTitleSqErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleSqErrorComponent
     */
    'code': NotificationsCreateMessageTitleSqErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleSqErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleSqErrorComponentAttrEnum = {
    MessageTitleSq: 'message.title.sq'
} as const;

export type NotificationsCreateMessageTitleSqErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleSqErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleSqErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleSqErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleSqErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleSqErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleSqErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleSrErrorComponent
 */
export interface NotificationsCreateMessageTitleSrErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleSrErrorComponent
     */
    'attr': NotificationsCreateMessageTitleSrErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleSrErrorComponent
     */
    'code': NotificationsCreateMessageTitleSrErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleSrErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleSrErrorComponentAttrEnum = {
    MessageTitleSr: 'message.title.sr'
} as const;

export type NotificationsCreateMessageTitleSrErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleSrErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleSrErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleSrErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleSrErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleSrErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleSrErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleSvErrorComponent
 */
export interface NotificationsCreateMessageTitleSvErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleSvErrorComponent
     */
    'attr': NotificationsCreateMessageTitleSvErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleSvErrorComponent
     */
    'code': NotificationsCreateMessageTitleSvErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleSvErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleSvErrorComponentAttrEnum = {
    MessageTitleSv: 'message.title.sv'
} as const;

export type NotificationsCreateMessageTitleSvErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleSvErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleSvErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleSvErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleSvErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleSvErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleSvErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleTrErrorComponent
 */
export interface NotificationsCreateMessageTitleTrErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleTrErrorComponent
     */
    'attr': NotificationsCreateMessageTitleTrErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleTrErrorComponent
     */
    'code': NotificationsCreateMessageTitleTrErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleTrErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleTrErrorComponentAttrEnum = {
    MessageTitleTr: 'message.title.tr'
} as const;

export type NotificationsCreateMessageTitleTrErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleTrErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleTrErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleTrErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleTrErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleTrErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleTrErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateMessageTitleZhCNErrorComponent
 */
export interface NotificationsCreateMessageTitleZhCNErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleZhCNErrorComponent
     */
    'attr': NotificationsCreateMessageTitleZhCNErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleZhCNErrorComponent
     */
    'code': NotificationsCreateMessageTitleZhCNErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateMessageTitleZhCNErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateMessageTitleZhCNErrorComponentAttrEnum = {
    MessageTitleZhCn: 'message.title.zh-CN'
} as const;

export type NotificationsCreateMessageTitleZhCNErrorComponentAttrEnum = typeof NotificationsCreateMessageTitleZhCNErrorComponentAttrEnum[keyof typeof NotificationsCreateMessageTitleZhCNErrorComponentAttrEnum];
export const NotificationsCreateMessageTitleZhCNErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    MaxLength: 'max_length',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateMessageTitleZhCNErrorComponentCodeEnum = typeof NotificationsCreateMessageTitleZhCNErrorComponentCodeEnum[keyof typeof NotificationsCreateMessageTitleZhCNErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateNonFieldErrorsErrorComponent
 */
export interface NotificationsCreateNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateNonFieldErrorsErrorComponent
     */
    'attr': NotificationsCreateNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateNonFieldErrorsErrorComponent
     */
    'code': NotificationsCreateNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type NotificationsCreateNonFieldErrorsErrorComponentAttrEnum = typeof NotificationsCreateNonFieldErrorsErrorComponentAttrEnum[keyof typeof NotificationsCreateNonFieldErrorsErrorComponentAttrEnum];
export const NotificationsCreateNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type NotificationsCreateNonFieldErrorsErrorComponentCodeEnum = typeof NotificationsCreateNonFieldErrorsErrorComponentCodeEnum[keyof typeof NotificationsCreateNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateReceiverTypeErrorComponent
 */
export interface NotificationsCreateReceiverTypeErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateReceiverTypeErrorComponent
     */
    'attr': NotificationsCreateReceiverTypeErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateReceiverTypeErrorComponent
     */
    'code': NotificationsCreateReceiverTypeErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateReceiverTypeErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateReceiverTypeErrorComponentAttrEnum = {
    ReceiverType: 'receiver_type'
} as const;

export type NotificationsCreateReceiverTypeErrorComponentAttrEnum = typeof NotificationsCreateReceiverTypeErrorComponentAttrEnum[keyof typeof NotificationsCreateReceiverTypeErrorComponentAttrEnum];
export const NotificationsCreateReceiverTypeErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice',
    Null: 'null',
    Required: 'required'
} as const;

export type NotificationsCreateReceiverTypeErrorComponentCodeEnum = typeof NotificationsCreateReceiverTypeErrorComponentCodeEnum[keyof typeof NotificationsCreateReceiverTypeErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateTopicCodesErrorComponent
 */
export interface NotificationsCreateTopicCodesErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateTopicCodesErrorComponent
     */
    'attr': NotificationsCreateTopicCodesErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateTopicCodesErrorComponent
     */
    'code': NotificationsCreateTopicCodesErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateTopicCodesErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateTopicCodesErrorComponentAttrEnum = {
    TopicCodes: 'topic_codes'
} as const;

export type NotificationsCreateTopicCodesErrorComponentAttrEnum = typeof NotificationsCreateTopicCodesErrorComponentAttrEnum[keyof typeof NotificationsCreateTopicCodesErrorComponentAttrEnum];
export const NotificationsCreateTopicCodesErrorComponentCodeEnum = {
    MinLength: 'min_length',
    NotAList: 'not_a_list',
    Null: 'null',
    Required: 'required'
} as const;

export type NotificationsCreateTopicCodesErrorComponentCodeEnum = typeof NotificationsCreateTopicCodesErrorComponentCodeEnum[keyof typeof NotificationsCreateTopicCodesErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateTopicCodesINDEXErrorComponent
 */
export interface NotificationsCreateTopicCodesINDEXErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateTopicCodesINDEXErrorComponent
     */
    'attr': NotificationsCreateTopicCodesINDEXErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateTopicCodesINDEXErrorComponent
     */
    'code': NotificationsCreateTopicCodesINDEXErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateTopicCodesINDEXErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateTopicCodesINDEXErrorComponentAttrEnum = {
    TopicCodesIndex: 'topic_codes.INDEX'
} as const;

export type NotificationsCreateTopicCodesINDEXErrorComponentAttrEnum = typeof NotificationsCreateTopicCodesINDEXErrorComponentAttrEnum[keyof typeof NotificationsCreateTopicCodesINDEXErrorComponentAttrEnum];
export const NotificationsCreateTopicCodesINDEXErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type NotificationsCreateTopicCodesINDEXErrorComponentCodeEnum = typeof NotificationsCreateTopicCodesINDEXErrorComponentCodeEnum[keyof typeof NotificationsCreateTopicCodesINDEXErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateUserUuidsErrorComponent
 */
export interface NotificationsCreateUserUuidsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateUserUuidsErrorComponent
     */
    'attr': NotificationsCreateUserUuidsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateUserUuidsErrorComponent
     */
    'code': NotificationsCreateUserUuidsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateUserUuidsErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateUserUuidsErrorComponentAttrEnum = {
    UserUuids: 'user_uuids'
} as const;

export type NotificationsCreateUserUuidsErrorComponentAttrEnum = typeof NotificationsCreateUserUuidsErrorComponentAttrEnum[keyof typeof NotificationsCreateUserUuidsErrorComponentAttrEnum];
export const NotificationsCreateUserUuidsErrorComponentCodeEnum = {
    MinLength: 'min_length',
    NotAList: 'not_a_list',
    Null: 'null',
    Required: 'required'
} as const;

export type NotificationsCreateUserUuidsErrorComponentCodeEnum = typeof NotificationsCreateUserUuidsErrorComponentCodeEnum[keyof typeof NotificationsCreateUserUuidsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateUserUuidsINDEXErrorComponent
 */
export interface NotificationsCreateUserUuidsINDEXErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateUserUuidsINDEXErrorComponent
     */
    'attr': NotificationsCreateUserUuidsINDEXErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateUserUuidsINDEXErrorComponent
     */
    'code': NotificationsCreateUserUuidsINDEXErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateUserUuidsINDEXErrorComponent
     */
    'detail': string;
}

export const NotificationsCreateUserUuidsINDEXErrorComponentAttrEnum = {
    UserUuidsIndex: 'user_uuids.INDEX'
} as const;

export type NotificationsCreateUserUuidsINDEXErrorComponentAttrEnum = typeof NotificationsCreateUserUuidsINDEXErrorComponentAttrEnum[keyof typeof NotificationsCreateUserUuidsINDEXErrorComponentAttrEnum];
export const NotificationsCreateUserUuidsINDEXErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type NotificationsCreateUserUuidsINDEXErrorComponentCodeEnum = typeof NotificationsCreateUserUuidsINDEXErrorComponentCodeEnum[keyof typeof NotificationsCreateUserUuidsINDEXErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsCreateValidationError
 */
export interface NotificationsCreateValidationError {
    /**
     * 
     * @type {string}
     * @memberof NotificationsCreateValidationError
     */
    'type': NotificationsCreateValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<NotificationsCreateError>}
     * @memberof NotificationsCreateValidationError
     */
    'errors': Array<NotificationsCreateError>;
}

export const NotificationsCreateValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type NotificationsCreateValidationErrorTypeEnum = typeof NotificationsCreateValidationErrorTypeEnum[keyof typeof NotificationsCreateValidationErrorTypeEnum];

/**
 * @type NotificationsListError
 * @export
 */
export type NotificationsListError = { attr: 'order_by' } & NotificationsListOrderByErrorComponent;

/**
 * @type NotificationsListMineError
 * @export
 */
export type NotificationsListMineError = { attr: 'order_by' } & NotificationsListMineOrderByErrorComponent;

/**
 * 
 * @export
 * @interface NotificationsListMineOrderByErrorComponent
 */
export interface NotificationsListMineOrderByErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsListMineOrderByErrorComponent
     */
    'attr': NotificationsListMineOrderByErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsListMineOrderByErrorComponent
     */
    'code': NotificationsListMineOrderByErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsListMineOrderByErrorComponent
     */
    'detail': string;
}

export const NotificationsListMineOrderByErrorComponentAttrEnum = {
    OrderBy: 'order_by'
} as const;

export type NotificationsListMineOrderByErrorComponentAttrEnum = typeof NotificationsListMineOrderByErrorComponentAttrEnum[keyof typeof NotificationsListMineOrderByErrorComponentAttrEnum];
export const NotificationsListMineOrderByErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type NotificationsListMineOrderByErrorComponentCodeEnum = typeof NotificationsListMineOrderByErrorComponentCodeEnum[keyof typeof NotificationsListMineOrderByErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsListMineValidationError
 */
export interface NotificationsListMineValidationError {
    /**
     * 
     * @type {string}
     * @memberof NotificationsListMineValidationError
     */
    'type': NotificationsListMineValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<NotificationsListMineError>}
     * @memberof NotificationsListMineValidationError
     */
    'errors': Array<NotificationsListMineError>;
}

export const NotificationsListMineValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type NotificationsListMineValidationErrorTypeEnum = typeof NotificationsListMineValidationErrorTypeEnum[keyof typeof NotificationsListMineValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface NotificationsListOrderByErrorComponent
 */
export interface NotificationsListOrderByErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsListOrderByErrorComponent
     */
    'attr': NotificationsListOrderByErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsListOrderByErrorComponent
     */
    'code': NotificationsListOrderByErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsListOrderByErrorComponent
     */
    'detail': string;
}

export const NotificationsListOrderByErrorComponentAttrEnum = {
    OrderBy: 'order_by'
} as const;

export type NotificationsListOrderByErrorComponentAttrEnum = typeof NotificationsListOrderByErrorComponentAttrEnum[keyof typeof NotificationsListOrderByErrorComponentAttrEnum];
export const NotificationsListOrderByErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type NotificationsListOrderByErrorComponentCodeEnum = typeof NotificationsListOrderByErrorComponentCodeEnum[keyof typeof NotificationsListOrderByErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsListValidationError
 */
export interface NotificationsListValidationError {
    /**
     * 
     * @type {string}
     * @memberof NotificationsListValidationError
     */
    'type': NotificationsListValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<NotificationsListError>}
     * @memberof NotificationsListValidationError
     */
    'errors': Array<NotificationsListError>;
}

export const NotificationsListValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type NotificationsListValidationErrorTypeEnum = typeof NotificationsListValidationErrorTypeEnum[keyof typeof NotificationsListValidationErrorTypeEnum];

/**
 * @type NotificationsPartialUpdateError
 * @export
 */
export type NotificationsPartialUpdateError = { attr: 'is_read' } & NotificationsPartialUpdateIsReadErrorComponent | { attr: 'non_field_errors' } & NotificationsPartialUpdateNonFieldErrorsErrorComponent;

/**
 * 
 * @export
 * @interface NotificationsPartialUpdateIsReadErrorComponent
 */
export interface NotificationsPartialUpdateIsReadErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsPartialUpdateIsReadErrorComponent
     */
    'attr': NotificationsPartialUpdateIsReadErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsPartialUpdateIsReadErrorComponent
     */
    'code': NotificationsPartialUpdateIsReadErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsPartialUpdateIsReadErrorComponent
     */
    'detail': string;
}

export const NotificationsPartialUpdateIsReadErrorComponentAttrEnum = {
    IsRead: 'is_read'
} as const;

export type NotificationsPartialUpdateIsReadErrorComponentAttrEnum = typeof NotificationsPartialUpdateIsReadErrorComponentAttrEnum[keyof typeof NotificationsPartialUpdateIsReadErrorComponentAttrEnum];
export const NotificationsPartialUpdateIsReadErrorComponentCodeEnum = {
    Null: 'null',
    Required: 'required'
} as const;

export type NotificationsPartialUpdateIsReadErrorComponentCodeEnum = typeof NotificationsPartialUpdateIsReadErrorComponentCodeEnum[keyof typeof NotificationsPartialUpdateIsReadErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsPartialUpdateNonFieldErrorsErrorComponent
 */
export interface NotificationsPartialUpdateNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsPartialUpdateNonFieldErrorsErrorComponent
     */
    'attr': NotificationsPartialUpdateNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsPartialUpdateNonFieldErrorsErrorComponent
     */
    'code': NotificationsPartialUpdateNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsPartialUpdateNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const NotificationsPartialUpdateNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type NotificationsPartialUpdateNonFieldErrorsErrorComponentAttrEnum = typeof NotificationsPartialUpdateNonFieldErrorsErrorComponentAttrEnum[keyof typeof NotificationsPartialUpdateNonFieldErrorsErrorComponentAttrEnum];
export const NotificationsPartialUpdateNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type NotificationsPartialUpdateNonFieldErrorsErrorComponentCodeEnum = typeof NotificationsPartialUpdateNonFieldErrorsErrorComponentCodeEnum[keyof typeof NotificationsPartialUpdateNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsPartialUpdateValidationError
 */
export interface NotificationsPartialUpdateValidationError {
    /**
     * 
     * @type {string}
     * @memberof NotificationsPartialUpdateValidationError
     */
    'type': NotificationsPartialUpdateValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<NotificationsPartialUpdateError>}
     * @memberof NotificationsPartialUpdateValidationError
     */
    'errors': Array<NotificationsPartialUpdateError>;
}

export const NotificationsPartialUpdateValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type NotificationsPartialUpdateValidationErrorTypeEnum = typeof NotificationsPartialUpdateValidationErrorTypeEnum[keyof typeof NotificationsPartialUpdateValidationErrorTypeEnum];

/**
 * @type NotificationsUpdateError
 * @export
 */
export type NotificationsUpdateError = { attr: 'is_read' } & NotificationsUpdateIsReadErrorComponent | { attr: 'non_field_errors' } & NotificationsUpdateNonFieldErrorsErrorComponent;

/**
 * 
 * @export
 * @interface NotificationsUpdateIsReadErrorComponent
 */
export interface NotificationsUpdateIsReadErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsUpdateIsReadErrorComponent
     */
    'attr': NotificationsUpdateIsReadErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsUpdateIsReadErrorComponent
     */
    'code': NotificationsUpdateIsReadErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsUpdateIsReadErrorComponent
     */
    'detail': string;
}

export const NotificationsUpdateIsReadErrorComponentAttrEnum = {
    IsRead: 'is_read'
} as const;

export type NotificationsUpdateIsReadErrorComponentAttrEnum = typeof NotificationsUpdateIsReadErrorComponentAttrEnum[keyof typeof NotificationsUpdateIsReadErrorComponentAttrEnum];
export const NotificationsUpdateIsReadErrorComponentCodeEnum = {
    Null: 'null',
    Required: 'required'
} as const;

export type NotificationsUpdateIsReadErrorComponentCodeEnum = typeof NotificationsUpdateIsReadErrorComponentCodeEnum[keyof typeof NotificationsUpdateIsReadErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsUpdateNonFieldErrorsErrorComponent
 */
export interface NotificationsUpdateNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof NotificationsUpdateNonFieldErrorsErrorComponent
     */
    'attr': NotificationsUpdateNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsUpdateNonFieldErrorsErrorComponent
     */
    'code': NotificationsUpdateNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationsUpdateNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const NotificationsUpdateNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type NotificationsUpdateNonFieldErrorsErrorComponentAttrEnum = typeof NotificationsUpdateNonFieldErrorsErrorComponentAttrEnum[keyof typeof NotificationsUpdateNonFieldErrorsErrorComponentAttrEnum];
export const NotificationsUpdateNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type NotificationsUpdateNonFieldErrorsErrorComponentCodeEnum = typeof NotificationsUpdateNonFieldErrorsErrorComponentCodeEnum[keyof typeof NotificationsUpdateNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface NotificationsUpdateValidationError
 */
export interface NotificationsUpdateValidationError {
    /**
     * 
     * @type {string}
     * @memberof NotificationsUpdateValidationError
     */
    'type': NotificationsUpdateValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<NotificationsUpdateError>}
     * @memberof NotificationsUpdateValidationError
     */
    'errors': Array<NotificationsUpdateError>;
}

export const NotificationsUpdateValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type NotificationsUpdateValidationErrorTypeEnum = typeof NotificationsUpdateValidationErrorTypeEnum[keyof typeof NotificationsUpdateValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface Observation
 */
export interface Observation {
    /**
     * 
     * @type {string}
     * @memberof Observation
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Observation
     */
    'short_id': string;
    /**
     * 
     * @type {string}
     * @memberof Observation
     */
    'user_uuid': string;
    /**
     * 
     * @type {string}
     * @memberof Observation
     */
    'created_at': string;
    /**
     * The date and time when the record was created, displayed in the local timezone specified for this entry.
     * @type {string}
     * @memberof Observation
     */
    'created_at_local': string;
    /**
     * 
     * @type {string}
     * @memberof Observation
     */
    'sent_at': string;
    /**
     * 
     * @type {string}
     * @memberof Observation
     */
    'received_at': string;
    /**
     * Date and time when the report was last modified
     * @type {string}
     * @memberof Observation
     */
    'updated_at': string;
    /**
     * 
     * @type {Location}
     * @memberof Observation
     */
    'location': Location;
    /**
     * Note user attached to report.
     * @type {string}
     * @memberof Observation
     */
    'note'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof Observation
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof Observation
     */
    'published': boolean;
    /**
     * 
     * @type {Array<SimplePhoto>}
     * @memberof Observation
     */
    'photos': Array<SimplePhoto>;
    /**
     * The environment where the event took place.
     * @type {string}
     * @memberof Observation
     */
    'event_environment'?: ObservationEventEnvironmentEnum | null;
    /**
     * The moment of the day when the event took place.
     * @type {string}
     * @memberof Observation
     */
    'event_moment'?: ObservationEventMomentEnum | null;
    /**
     * The mosquito specie perceived by the user.
     * @type {string}
     * @memberof Observation
     */
    'user_perceived_mosquito_specie'?: ObservationUserPerceivedMosquitoSpecieEnum | null;
    /**
     * The species of mosquito that the thorax resembles, according to the user.
     * @type {string}
     * @memberof Observation
     */
    'user_perceived_mosquito_thorax'?: ObservationUserPerceivedMosquitoThoraxEnum | null;
    /**
     * The species of mosquito that the abdomen resembles, according to the user.
     * @type {string}
     * @memberof Observation
     */
    'user_perceived_mosquito_abdomen'?: ObservationUserPerceivedMosquitoAbdomenEnum | null;
    /**
     * The species of mosquito that the leg resembles, according to the user.
     * @type {string}
     * @memberof Observation
     */
    'user_perceived_mosquito_legs'?: ObservationUserPerceivedMosquitoLegsEnum | null;
}

export const ObservationEventEnvironmentEnum = {
    Indoors: 'indoors',
    Outdoors: 'outdoors',
    Vehicle: 'vehicle',
    Empty: ''
} as const;

export type ObservationEventEnvironmentEnum = typeof ObservationEventEnvironmentEnum[keyof typeof ObservationEventEnvironmentEnum];
export const ObservationEventMomentEnum = {
    Now: 'now',
    LastMorning: 'last_morning',
    LastMidday: 'last_midday',
    LastAfternoon: 'last_afternoon',
    LastNight: 'last_night',
    Empty: ''
} as const;

export type ObservationEventMomentEnum = typeof ObservationEventMomentEnum[keyof typeof ObservationEventMomentEnum];
export const ObservationUserPerceivedMosquitoSpecieEnum = {
    Albopictus: 'albopictus',
    Aegypti: 'aegypti',
    Japonicus: 'japonicus',
    Koreicus: 'koreicus',
    Culex: 'culex',
    Other: 'other',
    Empty: ''
} as const;

export type ObservationUserPerceivedMosquitoSpecieEnum = typeof ObservationUserPerceivedMosquitoSpecieEnum[keyof typeof ObservationUserPerceivedMosquitoSpecieEnum];
export const ObservationUserPerceivedMosquitoThoraxEnum = {
    Albopictus: 'albopictus',
    Aegypti: 'aegypti',
    Japonicus: 'japonicus',
    Koreicus: 'koreicus',
    Culex: 'culex',
    Other: 'other',
    Empty: ''
} as const;

export type ObservationUserPerceivedMosquitoThoraxEnum = typeof ObservationUserPerceivedMosquitoThoraxEnum[keyof typeof ObservationUserPerceivedMosquitoThoraxEnum];
export const ObservationUserPerceivedMosquitoAbdomenEnum = {
    Albopictus: 'albopictus',
    Aegypti: 'aegypti',
    Japonicus: 'japonicus',
    Koreicus: 'koreicus',
    Culex: 'culex',
    Other: 'other',
    Empty: ''
} as const;

export type ObservationUserPerceivedMosquitoAbdomenEnum = typeof ObservationUserPerceivedMosquitoAbdomenEnum[keyof typeof ObservationUserPerceivedMosquitoAbdomenEnum];
export const ObservationUserPerceivedMosquitoLegsEnum = {
    Albopictus: 'albopictus',
    Aegypti: 'aegypti',
    Japonicus: 'japonicus',
    Koreicus: 'koreicus',
    Culex: 'culex',
    Other: 'other',
    Empty: ''
} as const;

export type ObservationUserPerceivedMosquitoLegsEnum = typeof ObservationUserPerceivedMosquitoLegsEnum[keyof typeof ObservationUserPerceivedMosquitoLegsEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateCreatedAtErrorComponent
 */
export interface ObservationsCreateCreatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateCreatedAtErrorComponent
     */
    'attr': ObservationsCreateCreatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateCreatedAtErrorComponent
     */
    'code': ObservationsCreateCreatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateCreatedAtErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateCreatedAtErrorComponentAttrEnum = {
    CreatedAt: 'created_at'
} as const;

export type ObservationsCreateCreatedAtErrorComponentAttrEnum = typeof ObservationsCreateCreatedAtErrorComponentAttrEnum[keyof typeof ObservationsCreateCreatedAtErrorComponentAttrEnum];
export const ObservationsCreateCreatedAtErrorComponentCodeEnum = {
    Date: 'date',
    Invalid: 'invalid',
    MakeAware: 'make_aware',
    Null: 'null',
    Overflow: 'overflow',
    Required: 'required'
} as const;

export type ObservationsCreateCreatedAtErrorComponentCodeEnum = typeof ObservationsCreateCreatedAtErrorComponentCodeEnum[keyof typeof ObservationsCreateCreatedAtErrorComponentCodeEnum];

/**
 * @type ObservationsCreateError
 * @export
 */
export type ObservationsCreateError = { attr: 'created_at' } & ObservationsCreateCreatedAtErrorComponent | { attr: 'event_environment' } & ObservationsCreateEventEnvironmentErrorComponent | { attr: 'event_moment' } & ObservationsCreateEventMomentErrorComponent | { attr: 'location.non_field_errors' } & ObservationsCreateLocationNonFieldErrorsErrorComponent | { attr: 'location.point' } & ObservationsCreateLocationPointErrorComponent | { attr: 'location.type' } & ObservationsCreateLocationTypeErrorComponent | { attr: 'non_field_errors' } & ObservationsCreateNonFieldErrorsErrorComponent | { attr: 'note' } & ObservationsCreateNoteErrorComponent | { attr: 'photos.INDEX.file' } & ObservationsCreatePhotosINDEXFileErrorComponent | { attr: 'photos.INDEX.non_field_errors' } & ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent | { attr: 'photos.non_field_errors' } & ObservationsCreatePhotosNonFieldErrorsErrorComponent | { attr: 'sent_at' } & ObservationsCreateSentAtErrorComponent | { attr: 'tags' } & ObservationsCreateTagsErrorComponent | { attr: 'tags.INDEX' } & ObservationsCreateTagsINDEXErrorComponent | { attr: 'user_perceived_mosquito_abdomen' } & ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponent | { attr: 'user_perceived_mosquito_legs' } & ObservationsCreateUserPerceivedMosquitoLegsErrorComponent | { attr: 'user_perceived_mosquito_specie' } & ObservationsCreateUserPerceivedMosquitoSpecieErrorComponent | { attr: 'user_perceived_mosquito_thorax' } & ObservationsCreateUserPerceivedMosquitoThoraxErrorComponent;

/**
 * 
 * @export
 * @interface ObservationsCreateEventEnvironmentErrorComponent
 */
export interface ObservationsCreateEventEnvironmentErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateEventEnvironmentErrorComponent
     */
    'attr': ObservationsCreateEventEnvironmentErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateEventEnvironmentErrorComponent
     */
    'code': ObservationsCreateEventEnvironmentErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateEventEnvironmentErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateEventEnvironmentErrorComponentAttrEnum = {
    EventEnvironment: 'event_environment'
} as const;

export type ObservationsCreateEventEnvironmentErrorComponentAttrEnum = typeof ObservationsCreateEventEnvironmentErrorComponentAttrEnum[keyof typeof ObservationsCreateEventEnvironmentErrorComponentAttrEnum];
export const ObservationsCreateEventEnvironmentErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type ObservationsCreateEventEnvironmentErrorComponentCodeEnum = typeof ObservationsCreateEventEnvironmentErrorComponentCodeEnum[keyof typeof ObservationsCreateEventEnvironmentErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateEventMomentErrorComponent
 */
export interface ObservationsCreateEventMomentErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateEventMomentErrorComponent
     */
    'attr': ObservationsCreateEventMomentErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateEventMomentErrorComponent
     */
    'code': ObservationsCreateEventMomentErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateEventMomentErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateEventMomentErrorComponentAttrEnum = {
    EventMoment: 'event_moment'
} as const;

export type ObservationsCreateEventMomentErrorComponentAttrEnum = typeof ObservationsCreateEventMomentErrorComponentAttrEnum[keyof typeof ObservationsCreateEventMomentErrorComponentAttrEnum];
export const ObservationsCreateEventMomentErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type ObservationsCreateEventMomentErrorComponentCodeEnum = typeof ObservationsCreateEventMomentErrorComponentCodeEnum[keyof typeof ObservationsCreateEventMomentErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateLocationNonFieldErrorsErrorComponent
 */
export interface ObservationsCreateLocationNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateLocationNonFieldErrorsErrorComponent
     */
    'attr': ObservationsCreateLocationNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateLocationNonFieldErrorsErrorComponent
     */
    'code': ObservationsCreateLocationNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateLocationNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateLocationNonFieldErrorsErrorComponentAttrEnum = {
    LocationNonFieldErrors: 'location.non_field_errors'
} as const;

export type ObservationsCreateLocationNonFieldErrorsErrorComponentAttrEnum = typeof ObservationsCreateLocationNonFieldErrorsErrorComponentAttrEnum[keyof typeof ObservationsCreateLocationNonFieldErrorsErrorComponentAttrEnum];
export const ObservationsCreateLocationNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type ObservationsCreateLocationNonFieldErrorsErrorComponentCodeEnum = typeof ObservationsCreateLocationNonFieldErrorsErrorComponentCodeEnum[keyof typeof ObservationsCreateLocationNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateLocationPointErrorComponent
 */
export interface ObservationsCreateLocationPointErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateLocationPointErrorComponent
     */
    'attr': ObservationsCreateLocationPointErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateLocationPointErrorComponent
     */
    'code': ObservationsCreateLocationPointErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateLocationPointErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateLocationPointErrorComponentAttrEnum = {
    LocationPoint: 'location.point'
} as const;

export type ObservationsCreateLocationPointErrorComponentAttrEnum = typeof ObservationsCreateLocationPointErrorComponentAttrEnum[keyof typeof ObservationsCreateLocationPointErrorComponentAttrEnum];
export const ObservationsCreateLocationPointErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Required: 'required'
} as const;

export type ObservationsCreateLocationPointErrorComponentCodeEnum = typeof ObservationsCreateLocationPointErrorComponentCodeEnum[keyof typeof ObservationsCreateLocationPointErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateLocationTypeErrorComponent
 */
export interface ObservationsCreateLocationTypeErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateLocationTypeErrorComponent
     */
    'attr': ObservationsCreateLocationTypeErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateLocationTypeErrorComponent
     */
    'code': ObservationsCreateLocationTypeErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateLocationTypeErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateLocationTypeErrorComponentAttrEnum = {
    LocationType: 'location.type'
} as const;

export type ObservationsCreateLocationTypeErrorComponentAttrEnum = typeof ObservationsCreateLocationTypeErrorComponentAttrEnum[keyof typeof ObservationsCreateLocationTypeErrorComponentAttrEnum];
export const ObservationsCreateLocationTypeErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice',
    Null: 'null',
    Required: 'required'
} as const;

export type ObservationsCreateLocationTypeErrorComponentCodeEnum = typeof ObservationsCreateLocationTypeErrorComponentCodeEnum[keyof typeof ObservationsCreateLocationTypeErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateNonFieldErrorsErrorComponent
 */
export interface ObservationsCreateNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateNonFieldErrorsErrorComponent
     */
    'attr': ObservationsCreateNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateNonFieldErrorsErrorComponent
     */
    'code': ObservationsCreateNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type ObservationsCreateNonFieldErrorsErrorComponentAttrEnum = typeof ObservationsCreateNonFieldErrorsErrorComponentAttrEnum[keyof typeof ObservationsCreateNonFieldErrorsErrorComponentAttrEnum];
export const ObservationsCreateNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type ObservationsCreateNonFieldErrorsErrorComponentCodeEnum = typeof ObservationsCreateNonFieldErrorsErrorComponentCodeEnum[keyof typeof ObservationsCreateNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateNoteErrorComponent
 */
export interface ObservationsCreateNoteErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateNoteErrorComponent
     */
    'attr': ObservationsCreateNoteErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateNoteErrorComponent
     */
    'code': ObservationsCreateNoteErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateNoteErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateNoteErrorComponentAttrEnum = {
    Note: 'note'
} as const;

export type ObservationsCreateNoteErrorComponentAttrEnum = typeof ObservationsCreateNoteErrorComponentAttrEnum[keyof typeof ObservationsCreateNoteErrorComponentAttrEnum];
export const ObservationsCreateNoteErrorComponentCodeEnum = {
    Invalid: 'invalid',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type ObservationsCreateNoteErrorComponentCodeEnum = typeof ObservationsCreateNoteErrorComponentCodeEnum[keyof typeof ObservationsCreateNoteErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreatePhotosINDEXFileErrorComponent
 */
export interface ObservationsCreatePhotosINDEXFileErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreatePhotosINDEXFileErrorComponent
     */
    'attr': ObservationsCreatePhotosINDEXFileErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreatePhotosINDEXFileErrorComponent
     */
    'code': ObservationsCreatePhotosINDEXFileErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreatePhotosINDEXFileErrorComponent
     */
    'detail': string;
}

export const ObservationsCreatePhotosINDEXFileErrorComponentAttrEnum = {
    PhotosIndexFile: 'photos.INDEX.file'
} as const;

export type ObservationsCreatePhotosINDEXFileErrorComponentAttrEnum = typeof ObservationsCreatePhotosINDEXFileErrorComponentAttrEnum[keyof typeof ObservationsCreatePhotosINDEXFileErrorComponentAttrEnum];
export const ObservationsCreatePhotosINDEXFileErrorComponentCodeEnum = {
    Empty: 'empty',
    Invalid: 'invalid',
    InvalidImage: 'invalid_image',
    NoName: 'no_name',
    Null: 'null',
    Required: 'required'
} as const;

export type ObservationsCreatePhotosINDEXFileErrorComponentCodeEnum = typeof ObservationsCreatePhotosINDEXFileErrorComponentCodeEnum[keyof typeof ObservationsCreatePhotosINDEXFileErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent
 */
export interface ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent
     */
    'attr': ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent
     */
    'code': ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponentAttrEnum = {
    PhotosIndexNonFieldErrors: 'photos.INDEX.non_field_errors'
} as const;

export type ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponentAttrEnum = typeof ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponentAttrEnum[keyof typeof ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponentAttrEnum];
export const ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null',
    Required: 'required'
} as const;

export type ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponentCodeEnum = typeof ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponentCodeEnum[keyof typeof ObservationsCreatePhotosINDEXNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreatePhotosNonFieldErrorsErrorComponent
 */
export interface ObservationsCreatePhotosNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreatePhotosNonFieldErrorsErrorComponent
     */
    'attr': ObservationsCreatePhotosNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreatePhotosNonFieldErrorsErrorComponent
     */
    'code': ObservationsCreatePhotosNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreatePhotosNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const ObservationsCreatePhotosNonFieldErrorsErrorComponentAttrEnum = {
    PhotosNonFieldErrors: 'photos.non_field_errors'
} as const;

export type ObservationsCreatePhotosNonFieldErrorsErrorComponentAttrEnum = typeof ObservationsCreatePhotosNonFieldErrorsErrorComponentAttrEnum[keyof typeof ObservationsCreatePhotosNonFieldErrorsErrorComponentAttrEnum];
export const ObservationsCreatePhotosNonFieldErrorsErrorComponentCodeEnum = {
    NotAList: 'not_a_list',
    Null: 'null',
    Required: 'required'
} as const;

export type ObservationsCreatePhotosNonFieldErrorsErrorComponentCodeEnum = typeof ObservationsCreatePhotosNonFieldErrorsErrorComponentCodeEnum[keyof typeof ObservationsCreatePhotosNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateSentAtErrorComponent
 */
export interface ObservationsCreateSentAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateSentAtErrorComponent
     */
    'attr': ObservationsCreateSentAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateSentAtErrorComponent
     */
    'code': ObservationsCreateSentAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateSentAtErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateSentAtErrorComponentAttrEnum = {
    SentAt: 'sent_at'
} as const;

export type ObservationsCreateSentAtErrorComponentAttrEnum = typeof ObservationsCreateSentAtErrorComponentAttrEnum[keyof typeof ObservationsCreateSentAtErrorComponentAttrEnum];
export const ObservationsCreateSentAtErrorComponentCodeEnum = {
    Date: 'date',
    Invalid: 'invalid',
    MakeAware: 'make_aware',
    Null: 'null',
    Overflow: 'overflow',
    Required: 'required'
} as const;

export type ObservationsCreateSentAtErrorComponentCodeEnum = typeof ObservationsCreateSentAtErrorComponentCodeEnum[keyof typeof ObservationsCreateSentAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateTagsErrorComponent
 */
export interface ObservationsCreateTagsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateTagsErrorComponent
     */
    'attr': ObservationsCreateTagsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateTagsErrorComponent
     */
    'code': ObservationsCreateTagsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateTagsErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateTagsErrorComponentAttrEnum = {
    Tags: 'tags'
} as const;

export type ObservationsCreateTagsErrorComponentAttrEnum = typeof ObservationsCreateTagsErrorComponentAttrEnum[keyof typeof ObservationsCreateTagsErrorComponentAttrEnum];
export const ObservationsCreateTagsErrorComponentCodeEnum = {
    InvalidJson: 'invalid_json',
    NotAList: 'not_a_list',
    NotAStr: 'not_a_str',
    Null: 'null'
} as const;

export type ObservationsCreateTagsErrorComponentCodeEnum = typeof ObservationsCreateTagsErrorComponentCodeEnum[keyof typeof ObservationsCreateTagsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateTagsINDEXErrorComponent
 */
export interface ObservationsCreateTagsINDEXErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateTagsINDEXErrorComponent
     */
    'attr': ObservationsCreateTagsINDEXErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateTagsINDEXErrorComponent
     */
    'code': ObservationsCreateTagsINDEXErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateTagsINDEXErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateTagsINDEXErrorComponentAttrEnum = {
    TagsIndex: 'tags.INDEX'
} as const;

export type ObservationsCreateTagsINDEXErrorComponentAttrEnum = typeof ObservationsCreateTagsINDEXErrorComponentAttrEnum[keyof typeof ObservationsCreateTagsINDEXErrorComponentAttrEnum];
export const ObservationsCreateTagsINDEXErrorComponentCodeEnum = {
    Blank: 'blank',
    Invalid: 'invalid',
    Null: 'null',
    NullCharactersNotAllowed: 'null_characters_not_allowed',
    Required: 'required',
    SurrogateCharactersNotAllowed: 'surrogate_characters_not_allowed'
} as const;

export type ObservationsCreateTagsINDEXErrorComponentCodeEnum = typeof ObservationsCreateTagsINDEXErrorComponentCodeEnum[keyof typeof ObservationsCreateTagsINDEXErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponent
 */
export interface ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponent
     */
    'attr': ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponent
     */
    'code': ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponentAttrEnum = {
    UserPerceivedMosquitoAbdomen: 'user_perceived_mosquito_abdomen'
} as const;

export type ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponentAttrEnum = typeof ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponentAttrEnum[keyof typeof ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponentAttrEnum];
export const ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponentCodeEnum = typeof ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponentCodeEnum[keyof typeof ObservationsCreateUserPerceivedMosquitoAbdomenErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateUserPerceivedMosquitoLegsErrorComponent
 */
export interface ObservationsCreateUserPerceivedMosquitoLegsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateUserPerceivedMosquitoLegsErrorComponent
     */
    'attr': ObservationsCreateUserPerceivedMosquitoLegsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateUserPerceivedMosquitoLegsErrorComponent
     */
    'code': ObservationsCreateUserPerceivedMosquitoLegsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateUserPerceivedMosquitoLegsErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateUserPerceivedMosquitoLegsErrorComponentAttrEnum = {
    UserPerceivedMosquitoLegs: 'user_perceived_mosquito_legs'
} as const;

export type ObservationsCreateUserPerceivedMosquitoLegsErrorComponentAttrEnum = typeof ObservationsCreateUserPerceivedMosquitoLegsErrorComponentAttrEnum[keyof typeof ObservationsCreateUserPerceivedMosquitoLegsErrorComponentAttrEnum];
export const ObservationsCreateUserPerceivedMosquitoLegsErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type ObservationsCreateUserPerceivedMosquitoLegsErrorComponentCodeEnum = typeof ObservationsCreateUserPerceivedMosquitoLegsErrorComponentCodeEnum[keyof typeof ObservationsCreateUserPerceivedMosquitoLegsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateUserPerceivedMosquitoSpecieErrorComponent
 */
export interface ObservationsCreateUserPerceivedMosquitoSpecieErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateUserPerceivedMosquitoSpecieErrorComponent
     */
    'attr': ObservationsCreateUserPerceivedMosquitoSpecieErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateUserPerceivedMosquitoSpecieErrorComponent
     */
    'code': ObservationsCreateUserPerceivedMosquitoSpecieErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateUserPerceivedMosquitoSpecieErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateUserPerceivedMosquitoSpecieErrorComponentAttrEnum = {
    UserPerceivedMosquitoSpecie: 'user_perceived_mosquito_specie'
} as const;

export type ObservationsCreateUserPerceivedMosquitoSpecieErrorComponentAttrEnum = typeof ObservationsCreateUserPerceivedMosquitoSpecieErrorComponentAttrEnum[keyof typeof ObservationsCreateUserPerceivedMosquitoSpecieErrorComponentAttrEnum];
export const ObservationsCreateUserPerceivedMosquitoSpecieErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type ObservationsCreateUserPerceivedMosquitoSpecieErrorComponentCodeEnum = typeof ObservationsCreateUserPerceivedMosquitoSpecieErrorComponentCodeEnum[keyof typeof ObservationsCreateUserPerceivedMosquitoSpecieErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateUserPerceivedMosquitoThoraxErrorComponent
 */
export interface ObservationsCreateUserPerceivedMosquitoThoraxErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateUserPerceivedMosquitoThoraxErrorComponent
     */
    'attr': ObservationsCreateUserPerceivedMosquitoThoraxErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateUserPerceivedMosquitoThoraxErrorComponent
     */
    'code': ObservationsCreateUserPerceivedMosquitoThoraxErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateUserPerceivedMosquitoThoraxErrorComponent
     */
    'detail': string;
}

export const ObservationsCreateUserPerceivedMosquitoThoraxErrorComponentAttrEnum = {
    UserPerceivedMosquitoThorax: 'user_perceived_mosquito_thorax'
} as const;

export type ObservationsCreateUserPerceivedMosquitoThoraxErrorComponentAttrEnum = typeof ObservationsCreateUserPerceivedMosquitoThoraxErrorComponentAttrEnum[keyof typeof ObservationsCreateUserPerceivedMosquitoThoraxErrorComponentAttrEnum];
export const ObservationsCreateUserPerceivedMosquitoThoraxErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type ObservationsCreateUserPerceivedMosquitoThoraxErrorComponentCodeEnum = typeof ObservationsCreateUserPerceivedMosquitoThoraxErrorComponentCodeEnum[keyof typeof ObservationsCreateUserPerceivedMosquitoThoraxErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsCreateValidationError
 */
export interface ObservationsCreateValidationError {
    /**
     * 
     * @type {string}
     * @memberof ObservationsCreateValidationError
     */
    'type': ObservationsCreateValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<ObservationsCreateError>}
     * @memberof ObservationsCreateValidationError
     */
    'errors': Array<ObservationsCreateError>;
}

export const ObservationsCreateValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type ObservationsCreateValidationErrorTypeEnum = typeof ObservationsCreateValidationErrorTypeEnum[keyof typeof ObservationsCreateValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface ObservationsListCreatedAtErrorComponent
 */
export interface ObservationsListCreatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListCreatedAtErrorComponent
     */
    'attr': ObservationsListCreatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListCreatedAtErrorComponent
     */
    'code': ObservationsListCreatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListCreatedAtErrorComponent
     */
    'detail': string;
}

export const ObservationsListCreatedAtErrorComponentAttrEnum = {
    CreatedAt: 'created_at'
} as const;

export type ObservationsListCreatedAtErrorComponentAttrEnum = typeof ObservationsListCreatedAtErrorComponentAttrEnum[keyof typeof ObservationsListCreatedAtErrorComponentAttrEnum];
export const ObservationsListCreatedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type ObservationsListCreatedAtErrorComponentCodeEnum = typeof ObservationsListCreatedAtErrorComponentCodeEnum[keyof typeof ObservationsListCreatedAtErrorComponentCodeEnum];

/**
 * @type ObservationsListError
 * @export
 */
export type ObservationsListError = { attr: 'created_at' } & ObservationsListCreatedAtErrorComponent | { attr: 'location_country_id' } & ObservationsListLocationCountryIdErrorComponent | { attr: 'location_nuts_2' } & ObservationsListLocationNuts2ErrorComponent | { attr: 'location_nuts_3' } & ObservationsListLocationNuts3ErrorComponent | { attr: 'order_by' } & ObservationsListOrderByErrorComponent | { attr: 'received_at' } & ObservationsListReceivedAtErrorComponent | { attr: 'short_id' } & ObservationsListShortIdErrorComponent | { attr: 'updated_at' } & ObservationsListUpdatedAtErrorComponent | { attr: 'user_uuid' } & ObservationsListUserUuidErrorComponent;

/**
 * 
 * @export
 * @interface ObservationsListLocationCountryIdErrorComponent
 */
export interface ObservationsListLocationCountryIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListLocationCountryIdErrorComponent
     */
    'attr': ObservationsListLocationCountryIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListLocationCountryIdErrorComponent
     */
    'code': ObservationsListLocationCountryIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListLocationCountryIdErrorComponent
     */
    'detail': string;
}

export const ObservationsListLocationCountryIdErrorComponentAttrEnum = {
    LocationCountryId: 'location_country_id'
} as const;

export type ObservationsListLocationCountryIdErrorComponentAttrEnum = typeof ObservationsListLocationCountryIdErrorComponentAttrEnum[keyof typeof ObservationsListLocationCountryIdErrorComponentAttrEnum];
export const ObservationsListLocationCountryIdErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type ObservationsListLocationCountryIdErrorComponentCodeEnum = typeof ObservationsListLocationCountryIdErrorComponentCodeEnum[keyof typeof ObservationsListLocationCountryIdErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListLocationNuts2ErrorComponent
 */
export interface ObservationsListLocationNuts2ErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListLocationNuts2ErrorComponent
     */
    'attr': ObservationsListLocationNuts2ErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListLocationNuts2ErrorComponent
     */
    'code': ObservationsListLocationNuts2ErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListLocationNuts2ErrorComponent
     */
    'detail': string;
}

export const ObservationsListLocationNuts2ErrorComponentAttrEnum = {
    LocationNuts2: 'location_nuts_2'
} as const;

export type ObservationsListLocationNuts2ErrorComponentAttrEnum = typeof ObservationsListLocationNuts2ErrorComponentAttrEnum[keyof typeof ObservationsListLocationNuts2ErrorComponentAttrEnum];
export const ObservationsListLocationNuts2ErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type ObservationsListLocationNuts2ErrorComponentCodeEnum = typeof ObservationsListLocationNuts2ErrorComponentCodeEnum[keyof typeof ObservationsListLocationNuts2ErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListLocationNuts3ErrorComponent
 */
export interface ObservationsListLocationNuts3ErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListLocationNuts3ErrorComponent
     */
    'attr': ObservationsListLocationNuts3ErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListLocationNuts3ErrorComponent
     */
    'code': ObservationsListLocationNuts3ErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListLocationNuts3ErrorComponent
     */
    'detail': string;
}

export const ObservationsListLocationNuts3ErrorComponentAttrEnum = {
    LocationNuts3: 'location_nuts_3'
} as const;

export type ObservationsListLocationNuts3ErrorComponentAttrEnum = typeof ObservationsListLocationNuts3ErrorComponentAttrEnum[keyof typeof ObservationsListLocationNuts3ErrorComponentAttrEnum];
export const ObservationsListLocationNuts3ErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type ObservationsListLocationNuts3ErrorComponentCodeEnum = typeof ObservationsListLocationNuts3ErrorComponentCodeEnum[keyof typeof ObservationsListLocationNuts3ErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListMineCreatedAtErrorComponent
 */
export interface ObservationsListMineCreatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineCreatedAtErrorComponent
     */
    'attr': ObservationsListMineCreatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineCreatedAtErrorComponent
     */
    'code': ObservationsListMineCreatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineCreatedAtErrorComponent
     */
    'detail': string;
}

export const ObservationsListMineCreatedAtErrorComponentAttrEnum = {
    CreatedAt: 'created_at'
} as const;

export type ObservationsListMineCreatedAtErrorComponentAttrEnum = typeof ObservationsListMineCreatedAtErrorComponentAttrEnum[keyof typeof ObservationsListMineCreatedAtErrorComponentAttrEnum];
export const ObservationsListMineCreatedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type ObservationsListMineCreatedAtErrorComponentCodeEnum = typeof ObservationsListMineCreatedAtErrorComponentCodeEnum[keyof typeof ObservationsListMineCreatedAtErrorComponentCodeEnum];

/**
 * @type ObservationsListMineError
 * @export
 */
export type ObservationsListMineError = { attr: 'created_at' } & ObservationsListMineCreatedAtErrorComponent | { attr: 'location_country_id' } & ObservationsListMineLocationCountryIdErrorComponent | { attr: 'location_nuts_2' } & ObservationsListMineLocationNuts2ErrorComponent | { attr: 'location_nuts_3' } & ObservationsListMineLocationNuts3ErrorComponent | { attr: 'order_by' } & ObservationsListMineOrderByErrorComponent | { attr: 'received_at' } & ObservationsListMineReceivedAtErrorComponent | { attr: 'short_id' } & ObservationsListMineShortIdErrorComponent | { attr: 'updated_at' } & ObservationsListMineUpdatedAtErrorComponent | { attr: 'user_uuid' } & ObservationsListMineUserUuidErrorComponent;

/**
 * 
 * @export
 * @interface ObservationsListMineLocationCountryIdErrorComponent
 */
export interface ObservationsListMineLocationCountryIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineLocationCountryIdErrorComponent
     */
    'attr': ObservationsListMineLocationCountryIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineLocationCountryIdErrorComponent
     */
    'code': ObservationsListMineLocationCountryIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineLocationCountryIdErrorComponent
     */
    'detail': string;
}

export const ObservationsListMineLocationCountryIdErrorComponentAttrEnum = {
    LocationCountryId: 'location_country_id'
} as const;

export type ObservationsListMineLocationCountryIdErrorComponentAttrEnum = typeof ObservationsListMineLocationCountryIdErrorComponentAttrEnum[keyof typeof ObservationsListMineLocationCountryIdErrorComponentAttrEnum];
export const ObservationsListMineLocationCountryIdErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type ObservationsListMineLocationCountryIdErrorComponentCodeEnum = typeof ObservationsListMineLocationCountryIdErrorComponentCodeEnum[keyof typeof ObservationsListMineLocationCountryIdErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListMineLocationNuts2ErrorComponent
 */
export interface ObservationsListMineLocationNuts2ErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineLocationNuts2ErrorComponent
     */
    'attr': ObservationsListMineLocationNuts2ErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineLocationNuts2ErrorComponent
     */
    'code': ObservationsListMineLocationNuts2ErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineLocationNuts2ErrorComponent
     */
    'detail': string;
}

export const ObservationsListMineLocationNuts2ErrorComponentAttrEnum = {
    LocationNuts2: 'location_nuts_2'
} as const;

export type ObservationsListMineLocationNuts2ErrorComponentAttrEnum = typeof ObservationsListMineLocationNuts2ErrorComponentAttrEnum[keyof typeof ObservationsListMineLocationNuts2ErrorComponentAttrEnum];
export const ObservationsListMineLocationNuts2ErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type ObservationsListMineLocationNuts2ErrorComponentCodeEnum = typeof ObservationsListMineLocationNuts2ErrorComponentCodeEnum[keyof typeof ObservationsListMineLocationNuts2ErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListMineLocationNuts3ErrorComponent
 */
export interface ObservationsListMineLocationNuts3ErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineLocationNuts3ErrorComponent
     */
    'attr': ObservationsListMineLocationNuts3ErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineLocationNuts3ErrorComponent
     */
    'code': ObservationsListMineLocationNuts3ErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineLocationNuts3ErrorComponent
     */
    'detail': string;
}

export const ObservationsListMineLocationNuts3ErrorComponentAttrEnum = {
    LocationNuts3: 'location_nuts_3'
} as const;

export type ObservationsListMineLocationNuts3ErrorComponentAttrEnum = typeof ObservationsListMineLocationNuts3ErrorComponentAttrEnum[keyof typeof ObservationsListMineLocationNuts3ErrorComponentAttrEnum];
export const ObservationsListMineLocationNuts3ErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type ObservationsListMineLocationNuts3ErrorComponentCodeEnum = typeof ObservationsListMineLocationNuts3ErrorComponentCodeEnum[keyof typeof ObservationsListMineLocationNuts3ErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListMineOrderByErrorComponent
 */
export interface ObservationsListMineOrderByErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineOrderByErrorComponent
     */
    'attr': ObservationsListMineOrderByErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineOrderByErrorComponent
     */
    'code': ObservationsListMineOrderByErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineOrderByErrorComponent
     */
    'detail': string;
}

export const ObservationsListMineOrderByErrorComponentAttrEnum = {
    OrderBy: 'order_by'
} as const;

export type ObservationsListMineOrderByErrorComponentAttrEnum = typeof ObservationsListMineOrderByErrorComponentAttrEnum[keyof typeof ObservationsListMineOrderByErrorComponentAttrEnum];
export const ObservationsListMineOrderByErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type ObservationsListMineOrderByErrorComponentCodeEnum = typeof ObservationsListMineOrderByErrorComponentCodeEnum[keyof typeof ObservationsListMineOrderByErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListMineReceivedAtErrorComponent
 */
export interface ObservationsListMineReceivedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineReceivedAtErrorComponent
     */
    'attr': ObservationsListMineReceivedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineReceivedAtErrorComponent
     */
    'code': ObservationsListMineReceivedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineReceivedAtErrorComponent
     */
    'detail': string;
}

export const ObservationsListMineReceivedAtErrorComponentAttrEnum = {
    ReceivedAt: 'received_at'
} as const;

export type ObservationsListMineReceivedAtErrorComponentAttrEnum = typeof ObservationsListMineReceivedAtErrorComponentAttrEnum[keyof typeof ObservationsListMineReceivedAtErrorComponentAttrEnum];
export const ObservationsListMineReceivedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type ObservationsListMineReceivedAtErrorComponentCodeEnum = typeof ObservationsListMineReceivedAtErrorComponentCodeEnum[keyof typeof ObservationsListMineReceivedAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListMineShortIdErrorComponent
 */
export interface ObservationsListMineShortIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineShortIdErrorComponent
     */
    'attr': ObservationsListMineShortIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineShortIdErrorComponent
     */
    'code': ObservationsListMineShortIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineShortIdErrorComponent
     */
    'detail': string;
}

export const ObservationsListMineShortIdErrorComponentAttrEnum = {
    ShortId: 'short_id'
} as const;

export type ObservationsListMineShortIdErrorComponentAttrEnum = typeof ObservationsListMineShortIdErrorComponentAttrEnum[keyof typeof ObservationsListMineShortIdErrorComponentAttrEnum];
export const ObservationsListMineShortIdErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type ObservationsListMineShortIdErrorComponentCodeEnum = typeof ObservationsListMineShortIdErrorComponentCodeEnum[keyof typeof ObservationsListMineShortIdErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListMineUpdatedAtErrorComponent
 */
export interface ObservationsListMineUpdatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineUpdatedAtErrorComponent
     */
    'attr': ObservationsListMineUpdatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineUpdatedAtErrorComponent
     */
    'code': ObservationsListMineUpdatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineUpdatedAtErrorComponent
     */
    'detail': string;
}

export const ObservationsListMineUpdatedAtErrorComponentAttrEnum = {
    UpdatedAt: 'updated_at'
} as const;

export type ObservationsListMineUpdatedAtErrorComponentAttrEnum = typeof ObservationsListMineUpdatedAtErrorComponentAttrEnum[keyof typeof ObservationsListMineUpdatedAtErrorComponentAttrEnum];
export const ObservationsListMineUpdatedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type ObservationsListMineUpdatedAtErrorComponentCodeEnum = typeof ObservationsListMineUpdatedAtErrorComponentCodeEnum[keyof typeof ObservationsListMineUpdatedAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListMineUserUuidErrorComponent
 */
export interface ObservationsListMineUserUuidErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineUserUuidErrorComponent
     */
    'attr': ObservationsListMineUserUuidErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineUserUuidErrorComponent
     */
    'code': ObservationsListMineUserUuidErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineUserUuidErrorComponent
     */
    'detail': string;
}

export const ObservationsListMineUserUuidErrorComponentAttrEnum = {
    UserUuid: 'user_uuid'
} as const;

export type ObservationsListMineUserUuidErrorComponentAttrEnum = typeof ObservationsListMineUserUuidErrorComponentAttrEnum[keyof typeof ObservationsListMineUserUuidErrorComponentAttrEnum];
export const ObservationsListMineUserUuidErrorComponentCodeEnum = {
    Invalid: 'invalid',
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type ObservationsListMineUserUuidErrorComponentCodeEnum = typeof ObservationsListMineUserUuidErrorComponentCodeEnum[keyof typeof ObservationsListMineUserUuidErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListMineValidationError
 */
export interface ObservationsListMineValidationError {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListMineValidationError
     */
    'type': ObservationsListMineValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<ObservationsListMineError>}
     * @memberof ObservationsListMineValidationError
     */
    'errors': Array<ObservationsListMineError>;
}

export const ObservationsListMineValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type ObservationsListMineValidationErrorTypeEnum = typeof ObservationsListMineValidationErrorTypeEnum[keyof typeof ObservationsListMineValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface ObservationsListOrderByErrorComponent
 */
export interface ObservationsListOrderByErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListOrderByErrorComponent
     */
    'attr': ObservationsListOrderByErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListOrderByErrorComponent
     */
    'code': ObservationsListOrderByErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListOrderByErrorComponent
     */
    'detail': string;
}

export const ObservationsListOrderByErrorComponentAttrEnum = {
    OrderBy: 'order_by'
} as const;

export type ObservationsListOrderByErrorComponentAttrEnum = typeof ObservationsListOrderByErrorComponentAttrEnum[keyof typeof ObservationsListOrderByErrorComponentAttrEnum];
export const ObservationsListOrderByErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice'
} as const;

export type ObservationsListOrderByErrorComponentCodeEnum = typeof ObservationsListOrderByErrorComponentCodeEnum[keyof typeof ObservationsListOrderByErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListReceivedAtErrorComponent
 */
export interface ObservationsListReceivedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListReceivedAtErrorComponent
     */
    'attr': ObservationsListReceivedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListReceivedAtErrorComponent
     */
    'code': ObservationsListReceivedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListReceivedAtErrorComponent
     */
    'detail': string;
}

export const ObservationsListReceivedAtErrorComponentAttrEnum = {
    ReceivedAt: 'received_at'
} as const;

export type ObservationsListReceivedAtErrorComponentAttrEnum = typeof ObservationsListReceivedAtErrorComponentAttrEnum[keyof typeof ObservationsListReceivedAtErrorComponentAttrEnum];
export const ObservationsListReceivedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type ObservationsListReceivedAtErrorComponentCodeEnum = typeof ObservationsListReceivedAtErrorComponentCodeEnum[keyof typeof ObservationsListReceivedAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListShortIdErrorComponent
 */
export interface ObservationsListShortIdErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListShortIdErrorComponent
     */
    'attr': ObservationsListShortIdErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListShortIdErrorComponent
     */
    'code': ObservationsListShortIdErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListShortIdErrorComponent
     */
    'detail': string;
}

export const ObservationsListShortIdErrorComponentAttrEnum = {
    ShortId: 'short_id'
} as const;

export type ObservationsListShortIdErrorComponentAttrEnum = typeof ObservationsListShortIdErrorComponentAttrEnum[keyof typeof ObservationsListShortIdErrorComponentAttrEnum];
export const ObservationsListShortIdErrorComponentCodeEnum = {
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type ObservationsListShortIdErrorComponentCodeEnum = typeof ObservationsListShortIdErrorComponentCodeEnum[keyof typeof ObservationsListShortIdErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListUpdatedAtErrorComponent
 */
export interface ObservationsListUpdatedAtErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListUpdatedAtErrorComponent
     */
    'attr': ObservationsListUpdatedAtErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListUpdatedAtErrorComponent
     */
    'code': ObservationsListUpdatedAtErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListUpdatedAtErrorComponent
     */
    'detail': string;
}

export const ObservationsListUpdatedAtErrorComponentAttrEnum = {
    UpdatedAt: 'updated_at'
} as const;

export type ObservationsListUpdatedAtErrorComponentAttrEnum = typeof ObservationsListUpdatedAtErrorComponentAttrEnum[keyof typeof ObservationsListUpdatedAtErrorComponentAttrEnum];
export const ObservationsListUpdatedAtErrorComponentCodeEnum = {
    Invalid: 'invalid'
} as const;

export type ObservationsListUpdatedAtErrorComponentCodeEnum = typeof ObservationsListUpdatedAtErrorComponentCodeEnum[keyof typeof ObservationsListUpdatedAtErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListUserUuidErrorComponent
 */
export interface ObservationsListUserUuidErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListUserUuidErrorComponent
     */
    'attr': ObservationsListUserUuidErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListUserUuidErrorComponent
     */
    'code': ObservationsListUserUuidErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof ObservationsListUserUuidErrorComponent
     */
    'detail': string;
}

export const ObservationsListUserUuidErrorComponentAttrEnum = {
    UserUuid: 'user_uuid'
} as const;

export type ObservationsListUserUuidErrorComponentAttrEnum = typeof ObservationsListUserUuidErrorComponentAttrEnum[keyof typeof ObservationsListUserUuidErrorComponentAttrEnum];
export const ObservationsListUserUuidErrorComponentCodeEnum = {
    Invalid: 'invalid',
    NullCharactersNotAllowed: 'null_characters_not_allowed'
} as const;

export type ObservationsListUserUuidErrorComponentCodeEnum = typeof ObservationsListUserUuidErrorComponentCodeEnum[keyof typeof ObservationsListUserUuidErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface ObservationsListValidationError
 */
export interface ObservationsListValidationError {
    /**
     * 
     * @type {string}
     * @memberof ObservationsListValidationError
     */
    'type': ObservationsListValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<ObservationsListError>}
     * @memberof ObservationsListValidationError
     */
    'errors': Array<ObservationsListError>;
}

export const ObservationsListValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type ObservationsListValidationErrorTypeEnum = typeof ObservationsListValidationErrorTypeEnum[keyof typeof ObservationsListValidationErrorTypeEnum];

/**
 * 
 * @export
 * @interface PaginatedBiteList
 */
export interface PaginatedBiteList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedBiteList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBiteList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBiteList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Bite>}
     * @memberof PaginatedBiteList
     */
    'results'?: Array<Bite>;
}
/**
 * 
 * @export
 * @interface PaginatedBreedingSiteList
 */
export interface PaginatedBreedingSiteList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedBreedingSiteList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBreedingSiteList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedBreedingSiteList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<BreedingSite>}
     * @memberof PaginatedBreedingSiteList
     */
    'results'?: Array<BreedingSite>;
}
/**
 * 
 * @export
 * @interface PaginatedCampaignList
 */
export interface PaginatedCampaignList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCampaignList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCampaignList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCampaignList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Campaign>}
     * @memberof PaginatedCampaignList
     */
    'results'?: Array<Campaign>;
}
/**
 * 
 * @export
 * @interface PaginatedNotificationList
 */
export interface PaginatedNotificationList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedNotificationList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedNotificationList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedNotificationList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Notification>}
     * @memberof PaginatedNotificationList
     */
    'results'?: Array<Notification>;
}
/**
 * 
 * @export
 * @interface PaginatedObservationList
 */
export interface PaginatedObservationList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedObservationList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedObservationList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedObservationList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Observation>}
     * @memberof PaginatedObservationList
     */
    'results'?: Array<Observation>;
}
/**
 * 
 * @export
 * @interface PaginatedPartnerList
 */
export interface PaginatedPartnerList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPartnerList
     */
    'count'?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPartnerList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPartnerList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<Partner>}
     * @memberof PaginatedPartnerList
     */
    'results'?: Array<Partner>;
}
/**
 * 
 * @export
 * @interface Partner
 */
export interface Partner {
    /**
     * 
     * @type {number}
     * @memberof Partner
     */
    'id': number;
    /**
     * 
     * @type {PartnerPoint}
     * @memberof Partner
     */
    'point': PartnerPoint;
    /**
     * Text desription on the pin. This text is meant to be visualized as the text body of the dialog on the map
     * @type {string}
     * @memberof Partner
     */
    'description': string;
    /**
     * URL link to the organization page
     * @type {string}
     * @memberof Partner
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface PartnerPoint
 */
export interface PartnerPoint {
    /**
     * 
     * @type {number}
     * @memberof PartnerPoint
     */
    'latitude': number;
    /**
     * 
     * @type {number}
     * @memberof PartnerPoint
     */
    'longitude': number;
}
/**
 * 
 * @export
 * @interface PasswordChangeRequest
 */
export interface PasswordChangeRequest {
    /**
     * 
     * @type {string}
     * @memberof PasswordChangeRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface PatchedDeviceUpdateRequest
 */
export interface PatchedDeviceUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedDeviceUpdateRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedDeviceUpdateRequest
     */
    'fcm_token'?: string;
    /**
     * 
     * @type {DeviceOsRequest}
     * @memberof PatchedDeviceUpdateRequest
     */
    'os'?: DeviceOsRequest;
    /**
     * 
     * @type {MobileAppRequest}
     * @memberof PatchedDeviceUpdateRequest
     */
    'mobile_app'?: MobileAppRequest;
}
/**
 * 
 * @export
 * @interface PatchedNotificationRequest
 */
export interface PatchedNotificationRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PatchedNotificationRequest
     */
    'is_read'?: boolean;
}
/**
 * 
 * @export
 * @interface PatchedUserRequest
 */
export interface PatchedUserRequest {
    /**
     * The locale code representing the language preference selected by the user for displaying the interface text. Enter the locale following the BCP 47 standard in \'language\' or \'language-region\' format (e.g., \'en\' for English, \'en-US\' for English (United States), \'fr\' for French). The language is a two-letter ISO 639-1 code, and the region is an optional two-letter ISO 3166-1 alpha-2 code.
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'locale'?: PatchedUserRequestLocaleEnum;
}

export const PatchedUserRequestLocaleEnum = {
    Es: 'es',
    Ca: 'ca',
    Eu: 'eu',
    Bn: 'bn',
    Sv: 'sv',
    En: 'en',
    De: 'de',
    Sq: 'sq',
    El: 'el',
    Gl: 'gl',
    Hu: 'hu',
    Pt: 'pt',
    Sl: 'sl',
    It: 'it',
    Fr: 'fr',
    Bg: 'bg',
    Ro: 'ro',
    Hr: 'hr',
    Mk: 'mk',
    Sr: 'sr',
    Lb: 'lb',
    Nl: 'nl',
    Tr: 'tr',
    ZhCn: 'zh-CN'
} as const;

export type PatchedUserRequestLocaleEnum = typeof PatchedUserRequestLocaleEnum[keyof typeof PatchedUserRequestLocaleEnum];

/**
 * 
 * @export
 * @interface Photo
 */
export interface Photo {
    /**
     * 
     * @type {string}
     * @memberof Photo
     */
    'uuid'?: string;
    /**
     * Photo uploaded by user.
     * @type {string}
     * @memberof Photo
     */
    'image_url': string;
    /**
     * Internal server path of the image.
     * @type {string}
     * @memberof Photo
     */
    'image_path': string;
}
/**
 * 
 * @export
 * @interface SimplePhoto
 */
export interface SimplePhoto {
    /**
     * 
     * @type {string}
     * @memberof SimplePhoto
     */
    'uuid': string;
    /**
     * URL of the photo associated with the item. Note: This URL may change over time. Do not rely on it for permanent storage.
     * @type {string}
     * @memberof SimplePhoto
     */
    'url': string;
}
/**
 * 
 * @export
 * @interface SimplePhotoRequest
 */
export interface SimplePhotoRequest {
    /**
     * 
     * @type {File}
     * @memberof SimplePhotoRequest
     */
    'file': File;
}
/**
 * 
 * @export
 * @interface TokenRefresh
 */
export interface TokenRefresh {
    /**
     * 
     * @type {string}
     * @memberof TokenRefresh
     */
    'access': string;
}
/**
 * 
 * @export
 * @interface TokenRefreshRequest
 */
export interface TokenRefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof TokenRefreshRequest
     */
    'refresh': string;
}
/**
 * 
 * @export
 * @interface TokenVerifyRequest
 */
export interface TokenVerifyRequest {
    /**
     * 
     * @type {string}
     * @memberof TokenVerifyRequest
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface TopicNotificationCreateRequest
 */
export interface TopicNotificationCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof TopicNotificationCreateRequest
     */
    'receiver_type': TopicNotificationCreateRequestReceiverTypeEnum;
    /**
     * The message of the notification
     * @type {CreateNotificationMessageRequest}
     * @memberof TopicNotificationCreateRequest
     */
    'message': CreateNotificationMessageRequest;
    /**
     * 
     * @type {Array<string>}
     * @memberof TopicNotificationCreateRequest
     */
    'topic_codes': Array<string>;
}

export const TopicNotificationCreateRequestReceiverTypeEnum = {
    User: 'user',
    Topic: 'topic'
} as const;

export type TopicNotificationCreateRequestReceiverTypeEnum = typeof TopicNotificationCreateRequestReceiverTypeEnum[keyof typeof TopicNotificationCreateRequestReceiverTypeEnum];

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username': string;
    /**
     * The date and time when user registered and consented to sharing data. Automatically set by server when user uploads registration.
     * @type {string}
     * @memberof User
     */
    'registration_time': string;
    /**
     * The locale code representing the language preference selected by the user for displaying the interface text. Enter the locale following the BCP 47 standard in \'language\' or \'language-region\' format (e.g., \'en\' for English, \'en-US\' for English (United States), \'fr\' for French). The language is a two-letter ISO 639-1 code, and the region is an optional two-letter ISO 3166-1 alpha-2 code.
     * @type {string}
     * @memberof User
     */
    'locale'?: UserLocaleEnum;
    /**
     * ISO 639-1 code
     * @type {string}
     * @memberof User
     */
    'language_iso': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_guest': boolean;
    /**
     * Global XP Score. This field is updated whenever the user asks for the score, and is only stored here. The content must equal score_v2_adult + score_v2_bite + score_v2_site
     * @type {number}
     * @memberof User
     */
    'score': number;
    /**
     * Last time score was updated
     * @type {string}
     * @memberof User
     */
    'last_score_update': string;
}

export const UserLocaleEnum = {
    Es: 'es',
    Ca: 'ca',
    Eu: 'eu',
    Bn: 'bn',
    Sv: 'sv',
    En: 'en',
    De: 'de',
    Sq: 'sq',
    El: 'el',
    Gl: 'gl',
    Hu: 'hu',
    Pt: 'pt',
    Sl: 'sl',
    It: 'it',
    Fr: 'fr',
    Bg: 'bg',
    Ro: 'ro',
    Hr: 'hr',
    Mk: 'mk',
    Sr: 'sr',
    Lb: 'lb',
    Nl: 'nl',
    Tr: 'tr',
    ZhCn: 'zh-CN'
} as const;

export type UserLocaleEnum = typeof UserLocaleEnum[keyof typeof UserLocaleEnum];

/**
 * 
 * @export
 * @interface UserNotificationCreateRequest
 */
export interface UserNotificationCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof UserNotificationCreateRequest
     */
    'receiver_type': UserNotificationCreateRequestReceiverTypeEnum;
    /**
     * The message of the notification
     * @type {CreateNotificationMessageRequest}
     * @memberof UserNotificationCreateRequest
     */
    'message': CreateNotificationMessageRequest;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserNotificationCreateRequest
     */
    'user_uuids': Array<string>;
}

export const UserNotificationCreateRequestReceiverTypeEnum = {
    User: 'user',
    Topic: 'topic'
} as const;

export type UserNotificationCreateRequestReceiverTypeEnum = typeof UserNotificationCreateRequestReceiverTypeEnum[keyof typeof UserNotificationCreateRequestReceiverTypeEnum];

/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * The locale code representing the language preference selected by the user for displaying the interface text. Enter the locale following the BCP 47 standard in \'language\' or \'language-region\' format (e.g., \'en\' for English, \'en-US\' for English (United States), \'fr\' for French). The language is a two-letter ISO 639-1 code, and the region is an optional two-letter ISO 3166-1 alpha-2 code.
     * @type {string}
     * @memberof UserRequest
     */
    'locale'?: UserRequestLocaleEnum;
}

export const UserRequestLocaleEnum = {
    Es: 'es',
    Ca: 'ca',
    Eu: 'eu',
    Bn: 'bn',
    Sv: 'sv',
    En: 'en',
    De: 'de',
    Sq: 'sq',
    El: 'el',
    Gl: 'gl',
    Hu: 'hu',
    Pt: 'pt',
    Sl: 'sl',
    It: 'it',
    Fr: 'fr',
    Bg: 'bg',
    Ro: 'ro',
    Hr: 'hr',
    Mk: 'mk',
    Sr: 'sr',
    Lb: 'lb',
    Nl: 'nl',
    Tr: 'tr',
    ZhCn: 'zh-CN'
} as const;

export type UserRequestLocaleEnum = typeof UserRequestLocaleEnum[keyof typeof UserRequestLocaleEnum];

/**
 * @type UsersPartialUpdateError
 * @export
 */
export type UsersPartialUpdateError = { attr: 'locale' } & UsersPartialUpdateLocaleErrorComponent | { attr: 'non_field_errors' } & UsersPartialUpdateNonFieldErrorsErrorComponent;

/**
 * 
 * @export
 * @interface UsersPartialUpdateLocaleErrorComponent
 */
export interface UsersPartialUpdateLocaleErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof UsersPartialUpdateLocaleErrorComponent
     */
    'attr': UsersPartialUpdateLocaleErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof UsersPartialUpdateLocaleErrorComponent
     */
    'code': UsersPartialUpdateLocaleErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof UsersPartialUpdateLocaleErrorComponent
     */
    'detail': string;
}

export const UsersPartialUpdateLocaleErrorComponentAttrEnum = {
    Locale: 'locale'
} as const;

export type UsersPartialUpdateLocaleErrorComponentAttrEnum = typeof UsersPartialUpdateLocaleErrorComponentAttrEnum[keyof typeof UsersPartialUpdateLocaleErrorComponentAttrEnum];
export const UsersPartialUpdateLocaleErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice',
    Null: 'null'
} as const;

export type UsersPartialUpdateLocaleErrorComponentCodeEnum = typeof UsersPartialUpdateLocaleErrorComponentCodeEnum[keyof typeof UsersPartialUpdateLocaleErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface UsersPartialUpdateNonFieldErrorsErrorComponent
 */
export interface UsersPartialUpdateNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof UsersPartialUpdateNonFieldErrorsErrorComponent
     */
    'attr': UsersPartialUpdateNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof UsersPartialUpdateNonFieldErrorsErrorComponent
     */
    'code': UsersPartialUpdateNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof UsersPartialUpdateNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const UsersPartialUpdateNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type UsersPartialUpdateNonFieldErrorsErrorComponentAttrEnum = typeof UsersPartialUpdateNonFieldErrorsErrorComponentAttrEnum[keyof typeof UsersPartialUpdateNonFieldErrorsErrorComponentAttrEnum];
export const UsersPartialUpdateNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type UsersPartialUpdateNonFieldErrorsErrorComponentCodeEnum = typeof UsersPartialUpdateNonFieldErrorsErrorComponentCodeEnum[keyof typeof UsersPartialUpdateNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface UsersPartialUpdateValidationError
 */
export interface UsersPartialUpdateValidationError {
    /**
     * 
     * @type {string}
     * @memberof UsersPartialUpdateValidationError
     */
    'type': UsersPartialUpdateValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<UsersPartialUpdateError>}
     * @memberof UsersPartialUpdateValidationError
     */
    'errors': Array<UsersPartialUpdateError>;
}

export const UsersPartialUpdateValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type UsersPartialUpdateValidationErrorTypeEnum = typeof UsersPartialUpdateValidationErrorTypeEnum[keyof typeof UsersPartialUpdateValidationErrorTypeEnum];

/**
 * @type UsersUpdateError
 * @export
 */
export type UsersUpdateError = { attr: 'locale' } & UsersUpdateLocaleErrorComponent | { attr: 'non_field_errors' } & UsersUpdateNonFieldErrorsErrorComponent;

/**
 * 
 * @export
 * @interface UsersUpdateLocaleErrorComponent
 */
export interface UsersUpdateLocaleErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof UsersUpdateLocaleErrorComponent
     */
    'attr': UsersUpdateLocaleErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof UsersUpdateLocaleErrorComponent
     */
    'code': UsersUpdateLocaleErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof UsersUpdateLocaleErrorComponent
     */
    'detail': string;
}

export const UsersUpdateLocaleErrorComponentAttrEnum = {
    Locale: 'locale'
} as const;

export type UsersUpdateLocaleErrorComponentAttrEnum = typeof UsersUpdateLocaleErrorComponentAttrEnum[keyof typeof UsersUpdateLocaleErrorComponentAttrEnum];
export const UsersUpdateLocaleErrorComponentCodeEnum = {
    InvalidChoice: 'invalid_choice',
    Null: 'null'
} as const;

export type UsersUpdateLocaleErrorComponentCodeEnum = typeof UsersUpdateLocaleErrorComponentCodeEnum[keyof typeof UsersUpdateLocaleErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface UsersUpdateNonFieldErrorsErrorComponent
 */
export interface UsersUpdateNonFieldErrorsErrorComponent {
    /**
     * 
     * @type {string}
     * @memberof UsersUpdateNonFieldErrorsErrorComponent
     */
    'attr': UsersUpdateNonFieldErrorsErrorComponentAttrEnum;
    /**
     * 
     * @type {string}
     * @memberof UsersUpdateNonFieldErrorsErrorComponent
     */
    'code': UsersUpdateNonFieldErrorsErrorComponentCodeEnum;
    /**
     * 
     * @type {string}
     * @memberof UsersUpdateNonFieldErrorsErrorComponent
     */
    'detail': string;
}

export const UsersUpdateNonFieldErrorsErrorComponentAttrEnum = {
    NonFieldErrors: 'non_field_errors'
} as const;

export type UsersUpdateNonFieldErrorsErrorComponentAttrEnum = typeof UsersUpdateNonFieldErrorsErrorComponentAttrEnum[keyof typeof UsersUpdateNonFieldErrorsErrorComponentAttrEnum];
export const UsersUpdateNonFieldErrorsErrorComponentCodeEnum = {
    Invalid: 'invalid',
    Null: 'null'
} as const;

export type UsersUpdateNonFieldErrorsErrorComponentCodeEnum = typeof UsersUpdateNonFieldErrorsErrorComponentCodeEnum[keyof typeof UsersUpdateNonFieldErrorsErrorComponentCodeEnum];

/**
 * 
 * @export
 * @interface UsersUpdateValidationError
 */
export interface UsersUpdateValidationError {
    /**
     * 
     * @type {string}
     * @memberof UsersUpdateValidationError
     */
    'type': UsersUpdateValidationErrorTypeEnum;
    /**
     * 
     * @type {Array<UsersUpdateError>}
     * @memberof UsersUpdateValidationError
     */
    'errors': Array<UsersUpdateError>;
}

export const UsersUpdateValidationErrorTypeEnum = {
    ValidationError: 'validation_error'
} as const;

export type UsersUpdateValidationErrorTypeEnum = typeof UsersUpdateValidationErrorTypeEnum[keyof typeof UsersUpdateValidationErrorTypeEnum];


/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {PasswordChangeRequest} passwordChangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (passwordChangeRequest: PasswordChangeRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'passwordChangeRequest' is not null or undefined
            assertParamExists('changePassword', 'passwordChangeRequest', passwordChangeRequest)
            const localVarPath = `/auth/password/change/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(passwordChangeRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {AppUserTokenObtainPairRequest} appUserTokenObtainPairRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainToken: async (appUserTokenObtainPairRequest: AppUserTokenObtainPairRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'appUserTokenObtainPairRequest' is not null or undefined
            assertParamExists('obtainToken', 'appUserTokenObtainPairRequest', appUserTokenObtainPairRequest)
            const localVarPath = `/auth/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(appUserTokenObtainPairRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequest} tokenRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (tokenRefreshRequest: TokenRefreshRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenRefreshRequest' is not null or undefined
            assertParamExists('refreshToken', 'tokenRefreshRequest', tokenRefreshRequest)
            const localVarPath = `/auth/token/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GuestRegistrationRequest} guestRegistrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupGuest: async (guestRegistrationRequest: GuestRegistrationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guestRegistrationRequest' is not null or undefined
            assertParamExists('signupGuest', 'guestRegistrationRequest', guestRegistrationRequest)
            const localVarPath = `/auth/signup/guest/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(guestRegistrationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
         * @param {TokenVerifyRequest} tokenVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyToken: async (tokenVerifyRequest: TokenVerifyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenVerifyRequest' is not null or undefined
            assertParamExists('verifyToken', 'tokenVerifyRequest', tokenVerifyRequest)
            const localVarPath = `/auth/token/verify/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenVerifyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {PasswordChangeRequest} passwordChangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(passwordChangeRequest: PasswordChangeRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(passwordChangeRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.changePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {AppUserTokenObtainPairRequest} appUserTokenObtainPairRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async obtainToken(appUserTokenObtainPairRequest: AppUserTokenObtainPairRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppUserTokenObtainPair>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.obtainToken(appUserTokenObtainPairRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.obtainToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequest} tokenRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(tokenRefreshRequest: TokenRefreshRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefresh>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(tokenRefreshRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.refreshToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GuestRegistrationRequest} guestRegistrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signupGuest(guestRegistrationRequest: GuestRegistrationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GuestRegistration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signupGuest(guestRegistrationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.signupGuest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
         * @param {TokenVerifyRequest} tokenVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyToken(tokenVerifyRequest: TokenVerifyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyToken(tokenVerifyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.verifyToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {PasswordChangeRequest} passwordChangeRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(passwordChangeRequest: PasswordChangeRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.changePassword(passwordChangeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {AppUserTokenObtainPairRequest} appUserTokenObtainPairRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainToken(appUserTokenObtainPairRequest: AppUserTokenObtainPairRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppUserTokenObtainPair> {
            return localVarFp.obtainToken(appUserTokenObtainPairRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequest} tokenRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(tokenRefreshRequest: TokenRefreshRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenRefresh> {
            return localVarFp.refreshToken(tokenRefreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GuestRegistrationRequest} guestRegistrationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signupGuest(guestRegistrationRequest: GuestRegistrationRequest, options?: RawAxiosRequestConfig): AxiosPromise<GuestRegistration> {
            return localVarFp.signupGuest(guestRegistrationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
         * @param {TokenVerifyRequest} tokenVerifyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyToken(tokenVerifyRequest: TokenVerifyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.verifyToken(tokenVerifyRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {PasswordChangeRequest} passwordChangeRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public changePassword(passwordChangeRequest: PasswordChangeRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).changePassword(passwordChangeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {AppUserTokenObtainPairRequest} appUserTokenObtainPairRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public obtainToken(appUserTokenObtainPairRequest: AppUserTokenObtainPairRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).obtainToken(appUserTokenObtainPairRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenRefreshRequest} tokenRefreshRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshToken(tokenRefreshRequest: TokenRefreshRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshToken(tokenRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GuestRegistrationRequest} guestRegistrationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public signupGuest(guestRegistrationRequest: GuestRegistrationRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).signupGuest(guestRegistrationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a token and indicates if it is valid.  This view provides no information about a token\'s fitness for a particular use.
     * @param {TokenVerifyRequest} tokenVerifyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public verifyToken(tokenVerifyRequest: TokenVerifyRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).verifyToken(tokenVerifyRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * BitesApi - axios parameter creator
 * @export
 */
export const BitesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BiteRequest} biteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (biteRequest: BiteRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'biteRequest' is not null or undefined
            assertParamExists('create', 'biteRequest', biteRequest)
            const localVarPath = `/bites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(biteRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroy: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('destroy', 'uuid', uuid)
            const localVarPath = `/bites/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (createdAtAfter?: string, createdAtBefore?: string, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/bites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (createdAtAfter !== undefined) {
                localVarQueryParameter['created_at_after'] = (createdAtAfter as any instanceof Date) ?
                    (createdAtAfter as any).toISOString() :
                    createdAtAfter;
            }

            if (createdAtBefore !== undefined) {
                localVarQueryParameter['created_at_before'] = (createdAtBefore as any instanceof Date) ?
                    (createdAtBefore as any).toISOString() :
                    createdAtBefore;
            }

            if (locationCountryId !== undefined) {
                localVarQueryParameter['location_country_id'] = locationCountryId;
            }

            if (locationNuts2 !== undefined) {
                localVarQueryParameter['location_nuts_2'] = locationNuts2;
            }

            if (locationNuts3 !== undefined) {
                localVarQueryParameter['location_nuts_3'] = locationNuts3;
            }

            if (orderBy) {
                localVarQueryParameter['order_by'] = orderBy.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (receivedAtAfter !== undefined) {
                localVarQueryParameter['received_at_after'] = (receivedAtAfter as any instanceof Date) ?
                    (receivedAtAfter as any).toISOString() :
                    receivedAtAfter;
            }

            if (receivedAtBefore !== undefined) {
                localVarQueryParameter['received_at_before'] = (receivedAtBefore as any instanceof Date) ?
                    (receivedAtBefore as any).toISOString() :
                    receivedAtBefore;
            }

            if (shortId !== undefined) {
                localVarQueryParameter['short_id'] = shortId;
            }

            if (updatedAtAfter !== undefined) {
                localVarQueryParameter['updated_at_after'] = (updatedAtAfter as any instanceof Date) ?
                    (updatedAtAfter as any).toISOString() :
                    updatedAtAfter;
            }

            if (updatedAtBefore !== undefined) {
                localVarQueryParameter['updated_at_before'] = (updatedAtBefore as any instanceof Date) ?
                    (updatedAtBefore as any).toISOString() :
                    updatedAtBefore;
            }

            if (userUuid !== undefined) {
                localVarQueryParameter['user_uuid'] = userUuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Current User\'s Bites
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMine: async (createdAtAfter?: string, createdAtBefore?: string, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/bites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (createdAtAfter !== undefined) {
                localVarQueryParameter['created_at_after'] = (createdAtAfter as any instanceof Date) ?
                    (createdAtAfter as any).toISOString() :
                    createdAtAfter;
            }

            if (createdAtBefore !== undefined) {
                localVarQueryParameter['created_at_before'] = (createdAtBefore as any instanceof Date) ?
                    (createdAtBefore as any).toISOString() :
                    createdAtBefore;
            }

            if (locationCountryId !== undefined) {
                localVarQueryParameter['location_country_id'] = locationCountryId;
            }

            if (locationNuts2 !== undefined) {
                localVarQueryParameter['location_nuts_2'] = locationNuts2;
            }

            if (locationNuts3 !== undefined) {
                localVarQueryParameter['location_nuts_3'] = locationNuts3;
            }

            if (orderBy) {
                localVarQueryParameter['order_by'] = orderBy.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (receivedAtAfter !== undefined) {
                localVarQueryParameter['received_at_after'] = (receivedAtAfter as any instanceof Date) ?
                    (receivedAtAfter as any).toISOString() :
                    receivedAtAfter;
            }

            if (receivedAtBefore !== undefined) {
                localVarQueryParameter['received_at_before'] = (receivedAtBefore as any instanceof Date) ?
                    (receivedAtBefore as any).toISOString() :
                    receivedAtBefore;
            }

            if (shortId !== undefined) {
                localVarQueryParameter['short_id'] = shortId;
            }

            if (updatedAtAfter !== undefined) {
                localVarQueryParameter['updated_at_after'] = (updatedAtAfter as any instanceof Date) ?
                    (updatedAtAfter as any).toISOString() :
                    updatedAtAfter;
            }

            if (updatedAtBefore !== undefined) {
                localVarQueryParameter['updated_at_before'] = (updatedAtBefore as any instanceof Date) ?
                    (updatedAtBefore as any).toISOString() :
                    updatedAtBefore;
            }

            if (userUuid !== undefined) {
                localVarQueryParameter['user_uuid'] = userUuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('retrieve', 'uuid', uuid)
            const localVarPath = `/bites/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BitesApi - functional programming interface
 * @export
 */
export const BitesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BitesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {BiteRequest} biteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(biteRequest: BiteRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(biteRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BitesApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroy(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroy(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BitesApi.destroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(createdAtAfter?: string, createdAtBefore?: string, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBiteList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(createdAtAfter, createdAtBefore, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BitesApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Current User\'s Bites
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMine(createdAtAfter?: string, createdAtBefore?: string, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBiteList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMine(createdAtAfter, createdAtBefore, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BitesApi.listMine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BitesApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BitesApi - factory interface
 * @export
 */
export const BitesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BitesApiFp(configuration)
    return {
        /**
         * 
         * @param {BiteRequest} biteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(biteRequest: BiteRequest, options?: RawAxiosRequestConfig): AxiosPromise<Bite> {
            return localVarFp.create(biteRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroy(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.destroy(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(createdAtAfter?: string, createdAtBefore?: string, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedBiteList> {
            return localVarFp.list(createdAtAfter, createdAtBefore, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Current User\'s Bites
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMine(createdAtAfter?: string, createdAtBefore?: string, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedBiteList> {
            return localVarFp.listMine(createdAtAfter, createdAtBefore, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Bite> {
            return localVarFp.retrieve(uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BitesApi - object-oriented interface
 * @export
 * @class BitesApi
 * @extends {BaseAPI}
 */
export class BitesApi extends BaseAPI {
    /**
     * 
     * @param {BiteRequest} biteRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BitesApi
     */
    public create(biteRequest: BiteRequest, options?: RawAxiosRequestConfig) {
        return BitesApiFp(this.configuration).create(biteRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BitesApi
     */
    public destroy(uuid: string, options?: RawAxiosRequestConfig) {
        return BitesApiFp(this.configuration).destroy(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [createdAtAfter] Created at
     * @param {string} [createdAtBefore] Created at
     * @param {number | null} [locationCountryId] 
     * @param {string} [locationNuts2] 
     * @param {string} [locationNuts3] 
     * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [receivedAtAfter] Received at
     * @param {string} [receivedAtBefore] Received at
     * @param {string} [shortId] Short ID
     * @param {string} [updatedAtAfter] Update at
     * @param {string} [updatedAtBefore] Update at
     * @param {string} [userUuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BitesApi
     */
    public list(createdAtAfter?: string, createdAtBefore?: string, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig) {
        return BitesApiFp(this.configuration).list(createdAtAfter, createdAtBefore, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Current User\'s Bites
     * @param {string} [createdAtAfter] Created at
     * @param {string} [createdAtBefore] Created at
     * @param {number | null} [locationCountryId] 
     * @param {string} [locationNuts2] 
     * @param {string} [locationNuts3] 
     * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [receivedAtAfter] Received at
     * @param {string} [receivedAtBefore] Received at
     * @param {string} [shortId] Short ID
     * @param {string} [updatedAtAfter] Update at
     * @param {string} [updatedAtBefore] Update at
     * @param {string} [userUuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BitesApi
     */
    public listMine(createdAtAfter?: string, createdAtBefore?: string, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig) {
        return BitesApiFp(this.configuration).listMine(createdAtAfter, createdAtBefore, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BitesApi
     */
    public retrieve(uuid: string, options?: RawAxiosRequestConfig) {
        return BitesApiFp(this.configuration).retrieve(uuid, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListOrderByEnum = {
    CreatedAt: '-created_at',
    ReceivedAt: '-received_at',
    CreatedAt2: 'created_at',
    ReceivedAt2: 'received_at'
} as const;
export type ListOrderByEnum = typeof ListOrderByEnum[keyof typeof ListOrderByEnum];
/**
 * @export
 */
export const ListMineOrderByEnum = {
    CreatedAt: '-created_at',
    ReceivedAt: '-received_at',
    CreatedAt2: 'created_at',
    ReceivedAt2: 'received_at'
} as const;
export type ListMineOrderByEnum = typeof ListMineOrderByEnum[keyof typeof ListMineOrderByEnum];


/**
 * BreedingSitesApi - axios parameter creator
 * @export
 */
export const BreedingSitesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} createdAt 
         * @param {string} sentAt 
         * @param {LocationRequest} location 
         * @param {Array<SimplePhotoRequest>} photos 
         * @param {string | null} [note] Note user attached to report.
         * @param {Array<string>} [tags] 
         * @param {CreateSiteTypeEnum} [siteType] Breeding site type.
         * @param {boolean | null} [hasWater] Either if the user perceived water in the breeding site.
         * @param {boolean | null} [inPublicArea] Either if the breeding site is found in a public area.
         * @param {boolean | null} [hasNearMosquitoes] Either if the user perceived mosquitoes near the breeding site (less than 10 meters).
         * @param {boolean | null} [hasLarvae] Either if the user perceived larvaes the breeding site.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createdAt: string, sentAt: string, location: LocationRequest, photos: Array<SimplePhotoRequest>, note?: string | null, tags?: Array<string>, siteType?: CreateSiteTypeEnum, hasWater?: boolean | null, inPublicArea?: boolean | null, hasNearMosquitoes?: boolean | null, hasLarvae?: boolean | null, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createdAt' is not null or undefined
            assertParamExists('create', 'createdAt', createdAt)
            // verify required parameter 'sentAt' is not null or undefined
            assertParamExists('create', 'sentAt', sentAt)
            // verify required parameter 'location' is not null or undefined
            assertParamExists('create', 'location', location)
            // verify required parameter 'photos' is not null or undefined
            assertParamExists('create', 'photos', photos)
            const localVarPath = `/breeding-sites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (createdAt !== undefined) { 
                localVarFormParams.append('created_at', createdAt as any);
            }
    
            if (sentAt !== undefined) { 
                localVarFormParams.append('sent_at', sentAt as any);
            }
    
            if (location !== undefined) { 
                localVarFormParams.append('location', new Blob([JSON.stringify(location)], { type: "application/json", }));
            }
    
            if (note !== undefined) { 
                localVarFormParams.append('note', note as any);
            }
                if (tags) {
                localVarFormParams.append('tags', tags.join(COLLECTION_FORMATS.csv));
            }

                if (photos) {
                localVarFormParams.append('photos', photos.join(COLLECTION_FORMATS.csv));
            }

    
            if (siteType !== undefined) { 
                localVarFormParams.append('site_type', siteType as any);
            }
    
            if (hasWater !== undefined) { 
                localVarFormParams.append('has_water', String(hasWater) as any);
            }
    
            if (inPublicArea !== undefined) { 
                localVarFormParams.append('in_public_area', String(inPublicArea) as any);
            }
    
            if (hasNearMosquitoes !== undefined) { 
                localVarFormParams.append('has_near_mosquitoes', String(hasNearMosquitoes) as any);
            }
    
            if (hasLarvae !== undefined) { 
                localVarFormParams.append('has_larvae', String(hasLarvae) as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroy: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('destroy', 'uuid', uuid)
            const localVarPath = `/breeding-sites/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/breeding-sites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (createdAtAfter !== undefined) {
                localVarQueryParameter['created_at_after'] = (createdAtAfter as any instanceof Date) ?
                    (createdAtAfter as any).toISOString() :
                    createdAtAfter;
            }

            if (createdAtBefore !== undefined) {
                localVarQueryParameter['created_at_before'] = (createdAtBefore as any instanceof Date) ?
                    (createdAtBefore as any).toISOString() :
                    createdAtBefore;
            }

            if (hasPhotos !== undefined) {
                localVarQueryParameter['has_photos'] = hasPhotos;
            }

            if (locationCountryId !== undefined) {
                localVarQueryParameter['location_country_id'] = locationCountryId;
            }

            if (locationNuts2 !== undefined) {
                localVarQueryParameter['location_nuts_2'] = locationNuts2;
            }

            if (locationNuts3 !== undefined) {
                localVarQueryParameter['location_nuts_3'] = locationNuts3;
            }

            if (orderBy) {
                localVarQueryParameter['order_by'] = orderBy.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (receivedAtAfter !== undefined) {
                localVarQueryParameter['received_at_after'] = (receivedAtAfter as any instanceof Date) ?
                    (receivedAtAfter as any).toISOString() :
                    receivedAtAfter;
            }

            if (receivedAtBefore !== undefined) {
                localVarQueryParameter['received_at_before'] = (receivedAtBefore as any instanceof Date) ?
                    (receivedAtBefore as any).toISOString() :
                    receivedAtBefore;
            }

            if (shortId !== undefined) {
                localVarQueryParameter['short_id'] = shortId;
            }

            if (updatedAtAfter !== undefined) {
                localVarQueryParameter['updated_at_after'] = (updatedAtAfter as any instanceof Date) ?
                    (updatedAtAfter as any).toISOString() :
                    updatedAtAfter;
            }

            if (updatedAtBefore !== undefined) {
                localVarQueryParameter['updated_at_before'] = (updatedAtBefore as any instanceof Date) ?
                    (updatedAtBefore as any).toISOString() :
                    updatedAtBefore;
            }

            if (userUuid !== undefined) {
                localVarQueryParameter['user_uuid'] = userUuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Current User\'s Breeding Sites
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMine: async (createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/breeding-sites/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (createdAtAfter !== undefined) {
                localVarQueryParameter['created_at_after'] = (createdAtAfter as any instanceof Date) ?
                    (createdAtAfter as any).toISOString() :
                    createdAtAfter;
            }

            if (createdAtBefore !== undefined) {
                localVarQueryParameter['created_at_before'] = (createdAtBefore as any instanceof Date) ?
                    (createdAtBefore as any).toISOString() :
                    createdAtBefore;
            }

            if (hasPhotos !== undefined) {
                localVarQueryParameter['has_photos'] = hasPhotos;
            }

            if (locationCountryId !== undefined) {
                localVarQueryParameter['location_country_id'] = locationCountryId;
            }

            if (locationNuts2 !== undefined) {
                localVarQueryParameter['location_nuts_2'] = locationNuts2;
            }

            if (locationNuts3 !== undefined) {
                localVarQueryParameter['location_nuts_3'] = locationNuts3;
            }

            if (orderBy) {
                localVarQueryParameter['order_by'] = orderBy.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (receivedAtAfter !== undefined) {
                localVarQueryParameter['received_at_after'] = (receivedAtAfter as any instanceof Date) ?
                    (receivedAtAfter as any).toISOString() :
                    receivedAtAfter;
            }

            if (receivedAtBefore !== undefined) {
                localVarQueryParameter['received_at_before'] = (receivedAtBefore as any instanceof Date) ?
                    (receivedAtBefore as any).toISOString() :
                    receivedAtBefore;
            }

            if (shortId !== undefined) {
                localVarQueryParameter['short_id'] = shortId;
            }

            if (updatedAtAfter !== undefined) {
                localVarQueryParameter['updated_at_after'] = (updatedAtAfter as any instanceof Date) ?
                    (updatedAtAfter as any).toISOString() :
                    updatedAtAfter;
            }

            if (updatedAtBefore !== undefined) {
                localVarQueryParameter['updated_at_before'] = (updatedAtBefore as any instanceof Date) ?
                    (updatedAtBefore as any).toISOString() :
                    updatedAtBefore;
            }

            if (userUuid !== undefined) {
                localVarQueryParameter['user_uuid'] = userUuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('retrieve', 'uuid', uuid)
            const localVarPath = `/breeding-sites/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BreedingSitesApi - functional programming interface
 * @export
 */
export const BreedingSitesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BreedingSitesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} createdAt 
         * @param {string} sentAt 
         * @param {LocationRequest} location 
         * @param {Array<SimplePhotoRequest>} photos 
         * @param {string | null} [note] Note user attached to report.
         * @param {Array<string>} [tags] 
         * @param {CreateSiteTypeEnum} [siteType] Breeding site type.
         * @param {boolean | null} [hasWater] Either if the user perceived water in the breeding site.
         * @param {boolean | null} [inPublicArea] Either if the breeding site is found in a public area.
         * @param {boolean | null} [hasNearMosquitoes] Either if the user perceived mosquitoes near the breeding site (less than 10 meters).
         * @param {boolean | null} [hasLarvae] Either if the user perceived larvaes the breeding site.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createdAt: string, sentAt: string, location: LocationRequest, photos: Array<SimplePhotoRequest>, note?: string | null, tags?: Array<string>, siteType?: CreateSiteTypeEnum, hasWater?: boolean | null, inPublicArea?: boolean | null, hasNearMosquitoes?: boolean | null, hasLarvae?: boolean | null, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BreedingSite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createdAt, sentAt, location, photos, note, tags, siteType, hasWater, inPublicArea, hasNearMosquitoes, hasLarvae, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BreedingSitesApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroy(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroy(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BreedingSitesApi.destroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBreedingSiteList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(createdAtAfter, createdAtBefore, hasPhotos, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BreedingSitesApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Current User\'s Breeding Sites
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMine(createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedBreedingSiteList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMine(createdAtAfter, createdAtBefore, hasPhotos, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BreedingSitesApi.listMine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BreedingSite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['BreedingSitesApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * BreedingSitesApi - factory interface
 * @export
 */
export const BreedingSitesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BreedingSitesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} createdAt 
         * @param {string} sentAt 
         * @param {LocationRequest} location 
         * @param {Array<SimplePhotoRequest>} photos 
         * @param {string | null} [note] Note user attached to report.
         * @param {Array<string>} [tags] 
         * @param {CreateSiteTypeEnum} [siteType] Breeding site type.
         * @param {boolean | null} [hasWater] Either if the user perceived water in the breeding site.
         * @param {boolean | null} [inPublicArea] Either if the breeding site is found in a public area.
         * @param {boolean | null} [hasNearMosquitoes] Either if the user perceived mosquitoes near the breeding site (less than 10 meters).
         * @param {boolean | null} [hasLarvae] Either if the user perceived larvaes the breeding site.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createdAt: string, sentAt: string, location: LocationRequest, photos: Array<SimplePhotoRequest>, note?: string | null, tags?: Array<string>, siteType?: CreateSiteTypeEnum, hasWater?: boolean | null, inPublicArea?: boolean | null, hasNearMosquitoes?: boolean | null, hasLarvae?: boolean | null, options?: RawAxiosRequestConfig): AxiosPromise<BreedingSite> {
            return localVarFp.create(createdAt, sentAt, location, photos, note, tags, siteType, hasWater, inPublicArea, hasNearMosquitoes, hasLarvae, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroy(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.destroy(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedBreedingSiteList> {
            return localVarFp.list(createdAtAfter, createdAtBefore, hasPhotos, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Current User\'s Breeding Sites
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMine(createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedBreedingSiteList> {
            return localVarFp.listMine(createdAtAfter, createdAtBefore, hasPhotos, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<BreedingSite> {
            return localVarFp.retrieve(uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BreedingSitesApi - object-oriented interface
 * @export
 * @class BreedingSitesApi
 * @extends {BaseAPI}
 */
export class BreedingSitesApi extends BaseAPI {
    /**
     * 
     * @param {string} createdAt 
     * @param {string} sentAt 
     * @param {LocationRequest} location 
     * @param {Array<SimplePhotoRequest>} photos 
     * @param {string | null} [note] Note user attached to report.
     * @param {Array<string>} [tags] 
     * @param {CreateSiteTypeEnum} [siteType] Breeding site type.
     * @param {boolean | null} [hasWater] Either if the user perceived water in the breeding site.
     * @param {boolean | null} [inPublicArea] Either if the breeding site is found in a public area.
     * @param {boolean | null} [hasNearMosquitoes] Either if the user perceived mosquitoes near the breeding site (less than 10 meters).
     * @param {boolean | null} [hasLarvae] Either if the user perceived larvaes the breeding site.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedingSitesApi
     */
    public create(createdAt: string, sentAt: string, location: LocationRequest, photos: Array<SimplePhotoRequest>, note?: string | null, tags?: Array<string>, siteType?: CreateSiteTypeEnum, hasWater?: boolean | null, inPublicArea?: boolean | null, hasNearMosquitoes?: boolean | null, hasLarvae?: boolean | null, options?: RawAxiosRequestConfig) {
        return BreedingSitesApiFp(this.configuration).create(createdAt, sentAt, location, photos, note, tags, siteType, hasWater, inPublicArea, hasNearMosquitoes, hasLarvae, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedingSitesApi
     */
    public destroy(uuid: string, options?: RawAxiosRequestConfig) {
        return BreedingSitesApiFp(this.configuration).destroy(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [createdAtAfter] Created at
     * @param {string} [createdAtBefore] Created at
     * @param {boolean} [hasPhotos] Has any photo
     * @param {number | null} [locationCountryId] 
     * @param {string} [locationNuts2] 
     * @param {string} [locationNuts3] 
     * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [receivedAtAfter] Received at
     * @param {string} [receivedAtBefore] Received at
     * @param {string} [shortId] Short ID
     * @param {string} [updatedAtAfter] Update at
     * @param {string} [updatedAtBefore] Update at
     * @param {string} [userUuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedingSitesApi
     */
    public list(createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig) {
        return BreedingSitesApiFp(this.configuration).list(createdAtAfter, createdAtBefore, hasPhotos, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Current User\'s Breeding Sites
     * @param {string} [createdAtAfter] Created at
     * @param {string} [createdAtBefore] Created at
     * @param {boolean} [hasPhotos] Has any photo
     * @param {number | null} [locationCountryId] 
     * @param {string} [locationNuts2] 
     * @param {string} [locationNuts3] 
     * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [receivedAtAfter] Received at
     * @param {string} [receivedAtBefore] Received at
     * @param {string} [shortId] Short ID
     * @param {string} [updatedAtAfter] Update at
     * @param {string} [updatedAtBefore] Update at
     * @param {string} [userUuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedingSitesApi
     */
    public listMine(createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig) {
        return BreedingSitesApiFp(this.configuration).listMine(createdAtAfter, createdAtBefore, hasPhotos, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreedingSitesApi
     */
    public retrieve(uuid: string, options?: RawAxiosRequestConfig) {
        return BreedingSitesApiFp(this.configuration).retrieve(uuid, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CreateSiteTypeEnum = {
    Basin: 'basin',
    Bucket: 'bucket',
    Fountain: 'fountain',
    SmallContainer: 'small_container',
    StormDrain: 'storm_drain',
    Well: 'well',
    Other: 'other',
    Empty: ''
} as const;
export type CreateSiteTypeEnum = typeof CreateSiteTypeEnum[keyof typeof CreateSiteTypeEnum];
/**
 * @export
 */
export const ListOrderByEnum = {
    CreatedAt: '-created_at',
    ReceivedAt: '-received_at',
    CreatedAt2: 'created_at',
    ReceivedAt2: 'received_at'
} as const;
export type ListOrderByEnum = typeof ListOrderByEnum[keyof typeof ListOrderByEnum];
/**
 * @export
 */
export const ListMineOrderByEnum = {
    CreatedAt: '-created_at',
    ReceivedAt: '-received_at',
    CreatedAt2: 'created_at',
    ReceivedAt2: 'received_at'
} as const;
export type ListMineOrderByEnum = typeof ListMineOrderByEnum[keyof typeof ListMineOrderByEnum];


/**
 * CampaignsApi - axios parameter creator
 * @export
 */
export const CampaignsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [countryId] Country in which the campaign is taking place
         * @param {boolean} [isActive] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (countryId?: number, isActive?: boolean, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campaigns/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (countryId !== undefined) {
                localVarQueryParameter['country_id'] = countryId;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (orderBy) {
                localVarQueryParameter['order_by'] = orderBy.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ow campaigns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieve', 'id', id)
            const localVarPath = `/campaigns/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignsApi - functional programming interface
 * @export
 */
export const CampaignsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [countryId] Country in which the campaign is taking place
         * @param {boolean} [isActive] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(countryId?: number, isActive?: boolean, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCampaignList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(countryId, isActive, orderBy, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ow campaigns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Campaign>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CampaignsApi - factory interface
 * @export
 */
export const CampaignsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [countryId] Country in which the campaign is taking place
         * @param {boolean} [isActive] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(countryId?: number, isActive?: boolean, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedCampaignList> {
            return localVarFp.list(countryId, isActive, orderBy, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this ow campaigns.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Campaign> {
            return localVarFp.retrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampaignsApi - object-oriented interface
 * @export
 * @class CampaignsApi
 * @extends {BaseAPI}
 */
export class CampaignsApi extends BaseAPI {
    /**
     * 
     * @param {number} [countryId] Country in which the campaign is taking place
     * @param {boolean} [isActive] 
     * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public list(countryId?: number, isActive?: boolean, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).list(countryId, isActive, orderBy, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this ow campaigns.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public retrieve(id: number, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).retrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListOrderByEnum = {
    EndDate: '-end_date',
    StartDate: '-start_date',
    EndDate2: 'end_date',
    StartDate2: 'start_date'
} as const;
export type ListOrderByEnum = typeof ListOrderByEnum[keyof typeof ListOrderByEnum];


/**
 * CountriesApi - axios parameter creator
 * @export
 */
export const CountriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this europe country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieve', 'id', id)
            const localVarPath = `/countries/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountriesApi - functional programming interface
 * @export
 */
export const CountriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CountriesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this europe country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CountriesApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CountriesApi - factory interface
 * @export
 */
export const CountriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CountriesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id A unique integer value identifying this europe country.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Country> {
            return localVarFp.retrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
export class CountriesApi extends BaseAPI {
    /**
     * 
     * @param {number} id A unique integer value identifying this europe country.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public retrieve(id: number, options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).retrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DevicesApi - axios parameter creator
 * @export
 */
export const DevicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeviceRequest} deviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (deviceRequest: DeviceRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceRequest' is not null or undefined
            assertParamExists('create', 'deviceRequest', deviceRequest)
            const localVarPath = `/devices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {PatchedDeviceUpdateRequest} [patchedDeviceUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdate: async (deviceId: string, patchedDeviceUpdateRequest?: PatchedDeviceUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('partialUpdate', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedDeviceUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (deviceId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('retrieve', 'deviceId', deviceId)
            const localVarPath = `/devices/{device_id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {DeviceUpdateRequest} deviceUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (deviceId: string, deviceUpdateRequest: DeviceUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('update', 'deviceId', deviceId)
            // verify required parameter 'deviceUpdateRequest' is not null or undefined
            assertParamExists('update', 'deviceUpdateRequest', deviceUpdateRequest)
            const localVarPath = `/devices/{device_id}/`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevicesApi - functional programming interface
 * @export
 */
export const DevicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevicesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeviceRequest} deviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(deviceRequest: DeviceRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(deviceRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {PatchedDeviceUpdateRequest} [patchedDeviceUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdate(deviceId: string, patchedDeviceUpdateRequest?: PatchedDeviceUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdate(deviceId, patchedDeviceUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.partialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(deviceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(deviceId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {DeviceUpdateRequest} deviceUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(deviceId: string, deviceUpdateRequest: DeviceUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(deviceId, deviceUpdateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DevicesApi.update']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DevicesApi - factory interface
 * @export
 */
export const DevicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevicesApiFp(configuration)
    return {
        /**
         * 
         * @param {DeviceRequest} deviceRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(deviceRequest: DeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Device> {
            return localVarFp.create(deviceRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {PatchedDeviceUpdateRequest} [patchedDeviceUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdate(deviceId: string, patchedDeviceUpdateRequest?: PatchedDeviceUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceUpdate> {
            return localVarFp.partialUpdate(deviceId, patchedDeviceUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(deviceId: string, options?: RawAxiosRequestConfig): AxiosPromise<Device> {
            return localVarFp.retrieve(deviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} deviceId 
         * @param {DeviceUpdateRequest} deviceUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(deviceId: string, deviceUpdateRequest: DeviceUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceUpdate> {
            return localVarFp.update(deviceId, deviceUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevicesApi - object-oriented interface
 * @export
 * @class DevicesApi
 * @extends {BaseAPI}
 */
export class DevicesApi extends BaseAPI {
    /**
     * 
     * @param {DeviceRequest} deviceRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public create(deviceRequest: DeviceRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).create(deviceRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} deviceId 
     * @param {PatchedDeviceUpdateRequest} [patchedDeviceUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public partialUpdate(deviceId: string, patchedDeviceUpdateRequest?: PatchedDeviceUpdateRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).partialUpdate(deviceId, patchedDeviceUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} deviceId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public retrieve(deviceId: string, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).retrieve(deviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} deviceId 
     * @param {DeviceUpdateRequest} deviceUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevicesApi
     */
    public update(deviceId: string, deviceUpdateRequest: DeviceUpdateRequest, options?: RawAxiosRequestConfig) {
        return DevicesApiFp(this.configuration).update(deviceId, deviceUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * FixesApi - axios parameter creator
 * @export
 */
export const FixesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FixRequest} fixRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (fixRequest: FixRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fixRequest' is not null or undefined
            assertParamExists('create', 'fixRequest', fixRequest)
            const localVarPath = `/fixes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(fixRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FixesApi - functional programming interface
 * @export
 */
export const FixesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FixesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FixRequest} fixRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(fixRequest: FixRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Fix>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(fixRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FixesApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FixesApi - factory interface
 * @export
 */
export const FixesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FixesApiFp(configuration)
    return {
        /**
         * 
         * @param {FixRequest} fixRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(fixRequest: FixRequest, options?: RawAxiosRequestConfig): AxiosPromise<Fix> {
            return localVarFp.create(fixRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FixesApi - object-oriented interface
 * @export
 * @class FixesApi
 * @extends {BaseAPI}
 */
export class FixesApi extends BaseAPI {
    /**
     * 
     * @param {FixRequest} fixRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FixesApi
     */
    public create(fixRequest: FixRequest, options?: RawAxiosRequestConfig) {
        return FixesApiFp(this.configuration).create(fixRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * NotificationsApi - axios parameter creator
 * @export
 */
export const NotificationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {MetaNotificationRequest} [metaNotificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (metaNotificationRequest?: MetaNotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(metaNotificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {boolean} [isRead] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (isRead?: boolean, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/notifications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (isRead !== undefined) {
                localVarQueryParameter['is_read'] = isRead;
            }

            if (orderBy) {
                localVarQueryParameter['order_by'] = orderBy.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Current User\'s Notifications
         * @param {boolean} [isRead] 
         * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMine: async (isRead?: boolean, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/notifications/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (isRead !== undefined) {
                localVarQueryParameter['is_read'] = isRead;
            }

            if (orderBy) {
                localVarQueryParameter['order_by'] = orderBy.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this notification.
         * @param {PatchedNotificationRequest} [patchedNotificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdate: async (id: number, patchedNotificationRequest?: PatchedNotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('partialUpdate', 'id', id)
            const localVarPath = `/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedNotificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieve', 'id', id)
            const localVarPath = `/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this notification.
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (id: number, notificationRequest: NotificationRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('update', 'id', id)
            // verify required parameter 'notificationRequest' is not null or undefined
            assertParamExists('update', 'notificationRequest', notificationRequest)
            const localVarPath = `/notifications/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NotificationsApi - functional programming interface
 * @export
 */
export const NotificationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NotificationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {MetaNotificationRequest} [metaNotificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(metaNotificationRequest?: MetaNotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CreateNotification>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(metaNotificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {boolean} [isRead] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(isRead?: boolean, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedNotificationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(isRead, orderBy, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Current User\'s Notifications
         * @param {boolean} [isRead] 
         * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMine(isRead?: boolean, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedNotificationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMine(isRead, orderBy, page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.listMine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this notification.
         * @param {PatchedNotificationRequest} [patchedNotificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdate(id: number, patchedNotificationRequest?: PatchedNotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdate(id, patchedNotificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.partialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this notification.
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(id: number, notificationRequest: NotificationRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Notification>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(id, notificationRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['NotificationsApi.update']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * NotificationsApi - factory interface
 * @export
 */
export const NotificationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NotificationsApiFp(configuration)
    return {
        /**
         * 
         * @param {MetaNotificationRequest} [metaNotificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(metaNotificationRequest?: MetaNotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<CreateNotification>> {
            return localVarFp.create(metaNotificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {boolean} [isRead] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(isRead?: boolean, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedNotificationList> {
            return localVarFp.list(isRead, orderBy, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Current User\'s Notifications
         * @param {boolean} [isRead] 
         * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMine(isRead?: boolean, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedNotificationList> {
            return localVarFp.listMine(isRead, orderBy, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this notification.
         * @param {PatchedNotificationRequest} [patchedNotificationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdate(id: number, patchedNotificationRequest?: PatchedNotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Notification> {
            return localVarFp.partialUpdate(id, patchedNotificationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this notification.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Notification> {
            return localVarFp.retrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this notification.
         * @param {NotificationRequest} notificationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(id: number, notificationRequest: NotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<Notification> {
            return localVarFp.update(id, notificationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
export class NotificationsApi extends BaseAPI {
    /**
     * 
     * @param {MetaNotificationRequest} [metaNotificationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public create(metaNotificationRequest?: MetaNotificationRequest, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).create(metaNotificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {boolean} [isRead] 
     * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public list(isRead?: boolean, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).list(isRead, orderBy, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Current User\'s Notifications
     * @param {boolean} [isRead] 
     * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public listMine(isRead?: boolean, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).listMine(isRead, orderBy, page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this notification.
     * @param {PatchedNotificationRequest} [patchedNotificationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public partialUpdate(id: number, patchedNotificationRequest?: PatchedNotificationRequest, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).partialUpdate(id, patchedNotificationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this notification.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public retrieve(id: number, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).retrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this notification.
     * @param {NotificationRequest} notificationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    public update(id: number, notificationRequest: NotificationRequest, options?: RawAxiosRequestConfig) {
        return NotificationsApiFp(this.configuration).update(id, notificationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const ListOrderByEnum = {
    CreatedAt: '-created_at',
    CreatedAt2: 'created_at'
} as const;
export type ListOrderByEnum = typeof ListOrderByEnum[keyof typeof ListOrderByEnum];
/**
 * @export
 */
export const ListMineOrderByEnum = {
    CreatedAt: '-created_at',
    CreatedAt2: 'created_at'
} as const;
export type ListMineOrderByEnum = typeof ListMineOrderByEnum[keyof typeof ListMineOrderByEnum];


/**
 * ObservationsApi - axios parameter creator
 * @export
 */
export const ObservationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} createdAt 
         * @param {string} sentAt 
         * @param {LocationRequest} location 
         * @param {Array<SimplePhotoRequest>} photos 
         * @param {string | null} [note] Note user attached to report.
         * @param {Array<string>} [tags] 
         * @param {CreateEventEnvironmentEnum} [eventEnvironment] The environment where the event took place.
         * @param {CreateEventMomentEnum} [eventMoment] The moment of the day when the event took place.
         * @param {CreateUserPerceivedMosquitoSpecieEnum} [userPerceivedMosquitoSpecie] The mosquito specie perceived by the user.
         * @param {CreateUserPerceivedMosquitoThoraxEnum} [userPerceivedMosquitoThorax] The species of mosquito that the thorax resembles, according to the user.
         * @param {CreateUserPerceivedMosquitoAbdomenEnum} [userPerceivedMosquitoAbdomen] The species of mosquito that the abdomen resembles, according to the user.
         * @param {CreateUserPerceivedMosquitoLegsEnum} [userPerceivedMosquitoLegs] The species of mosquito that the leg resembles, according to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createdAt: string, sentAt: string, location: LocationRequest, photos: Array<SimplePhotoRequest>, note?: string | null, tags?: Array<string>, eventEnvironment?: CreateEventEnvironmentEnum, eventMoment?: CreateEventMomentEnum, userPerceivedMosquitoSpecie?: CreateUserPerceivedMosquitoSpecieEnum, userPerceivedMosquitoThorax?: CreateUserPerceivedMosquitoThoraxEnum, userPerceivedMosquitoAbdomen?: CreateUserPerceivedMosquitoAbdomenEnum, userPerceivedMosquitoLegs?: CreateUserPerceivedMosquitoLegsEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createdAt' is not null or undefined
            assertParamExists('create', 'createdAt', createdAt)
            // verify required parameter 'sentAt' is not null or undefined
            assertParamExists('create', 'sentAt', sentAt)
            // verify required parameter 'location' is not null or undefined
            assertParamExists('create', 'location', location)
            // verify required parameter 'photos' is not null or undefined
            assertParamExists('create', 'photos', photos)
            const localVarPath = `/observations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (createdAt !== undefined) { 
                localVarFormParams.append('created_at', createdAt as any);
            }
    
            if (sentAt !== undefined) { 
                localVarFormParams.append('sent_at', sentAt as any);
            }
    
            if (location !== undefined) { 
                localVarFormParams.append('location', new Blob([JSON.stringify(location)], { type: "application/json", }));
            }
    
            if (note !== undefined) { 
                localVarFormParams.append('note', note as any);
            }
                if (tags) {
                localVarFormParams.append('tags', tags.join(COLLECTION_FORMATS.csv));
            }

                if (photos) {
                localVarFormParams.append('photos', photos.join(COLLECTION_FORMATS.csv));
            }

    
            if (eventEnvironment !== undefined) { 
                localVarFormParams.append('event_environment', eventEnvironment as any);
            }
    
            if (eventMoment !== undefined) { 
                localVarFormParams.append('event_moment', eventMoment as any);
            }
    
            if (userPerceivedMosquitoSpecie !== undefined) { 
                localVarFormParams.append('user_perceived_mosquito_specie', userPerceivedMosquitoSpecie as any);
            }
    
            if (userPerceivedMosquitoThorax !== undefined) { 
                localVarFormParams.append('user_perceived_mosquito_thorax', userPerceivedMosquitoThorax as any);
            }
    
            if (userPerceivedMosquitoAbdomen !== undefined) { 
                localVarFormParams.append('user_perceived_mosquito_abdomen', userPerceivedMosquitoAbdomen as any);
            }
    
            if (userPerceivedMosquitoLegs !== undefined) { 
                localVarFormParams.append('user_perceived_mosquito_legs', userPerceivedMosquitoLegs as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroy: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('destroy', 'uuid', uuid)
            const localVarPath = `/observations/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/observations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (createdAtAfter !== undefined) {
                localVarQueryParameter['created_at_after'] = (createdAtAfter as any instanceof Date) ?
                    (createdAtAfter as any).toISOString() :
                    createdAtAfter;
            }

            if (createdAtBefore !== undefined) {
                localVarQueryParameter['created_at_before'] = (createdAtBefore as any instanceof Date) ?
                    (createdAtBefore as any).toISOString() :
                    createdAtBefore;
            }

            if (hasPhotos !== undefined) {
                localVarQueryParameter['has_photos'] = hasPhotos;
            }

            if (locationCountryId !== undefined) {
                localVarQueryParameter['location_country_id'] = locationCountryId;
            }

            if (locationNuts2 !== undefined) {
                localVarQueryParameter['location_nuts_2'] = locationNuts2;
            }

            if (locationNuts3 !== undefined) {
                localVarQueryParameter['location_nuts_3'] = locationNuts3;
            }

            if (orderBy) {
                localVarQueryParameter['order_by'] = orderBy.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (receivedAtAfter !== undefined) {
                localVarQueryParameter['received_at_after'] = (receivedAtAfter as any instanceof Date) ?
                    (receivedAtAfter as any).toISOString() :
                    receivedAtAfter;
            }

            if (receivedAtBefore !== undefined) {
                localVarQueryParameter['received_at_before'] = (receivedAtBefore as any instanceof Date) ?
                    (receivedAtBefore as any).toISOString() :
                    receivedAtBefore;
            }

            if (shortId !== undefined) {
                localVarQueryParameter['short_id'] = shortId;
            }

            if (updatedAtAfter !== undefined) {
                localVarQueryParameter['updated_at_after'] = (updatedAtAfter as any instanceof Date) ?
                    (updatedAtAfter as any).toISOString() :
                    updatedAtAfter;
            }

            if (updatedAtBefore !== undefined) {
                localVarQueryParameter['updated_at_before'] = (updatedAtBefore as any instanceof Date) ?
                    (updatedAtBefore as any).toISOString() :
                    updatedAtBefore;
            }

            if (userUuid !== undefined) {
                localVarQueryParameter['user_uuid'] = userUuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Current User\'s Observations
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMine: async (createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/observations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (createdAtAfter !== undefined) {
                localVarQueryParameter['created_at_after'] = (createdAtAfter as any instanceof Date) ?
                    (createdAtAfter as any).toISOString() :
                    createdAtAfter;
            }

            if (createdAtBefore !== undefined) {
                localVarQueryParameter['created_at_before'] = (createdAtBefore as any instanceof Date) ?
                    (createdAtBefore as any).toISOString() :
                    createdAtBefore;
            }

            if (hasPhotos !== undefined) {
                localVarQueryParameter['has_photos'] = hasPhotos;
            }

            if (locationCountryId !== undefined) {
                localVarQueryParameter['location_country_id'] = locationCountryId;
            }

            if (locationNuts2 !== undefined) {
                localVarQueryParameter['location_nuts_2'] = locationNuts2;
            }

            if (locationNuts3 !== undefined) {
                localVarQueryParameter['location_nuts_3'] = locationNuts3;
            }

            if (orderBy) {
                localVarQueryParameter['order_by'] = orderBy.join(COLLECTION_FORMATS.csv);
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (receivedAtAfter !== undefined) {
                localVarQueryParameter['received_at_after'] = (receivedAtAfter as any instanceof Date) ?
                    (receivedAtAfter as any).toISOString() :
                    receivedAtAfter;
            }

            if (receivedAtBefore !== undefined) {
                localVarQueryParameter['received_at_before'] = (receivedAtBefore as any instanceof Date) ?
                    (receivedAtBefore as any).toISOString() :
                    receivedAtBefore;
            }

            if (shortId !== undefined) {
                localVarQueryParameter['short_id'] = shortId;
            }

            if (updatedAtAfter !== undefined) {
                localVarQueryParameter['updated_at_after'] = (updatedAtAfter as any instanceof Date) ?
                    (updatedAtAfter as any).toISOString() :
                    updatedAtAfter;
            }

            if (updatedAtBefore !== undefined) {
                localVarQueryParameter['updated_at_before'] = (updatedAtBefore as any instanceof Date) ?
                    (updatedAtBefore as any).toISOString() :
                    updatedAtBefore;
            }

            if (userUuid !== undefined) {
                localVarQueryParameter['user_uuid'] = userUuid;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('retrieve', 'uuid', uuid)
            const localVarPath = `/observations/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObservationsApi - functional programming interface
 * @export
 */
export const ObservationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObservationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} createdAt 
         * @param {string} sentAt 
         * @param {LocationRequest} location 
         * @param {Array<SimplePhotoRequest>} photos 
         * @param {string | null} [note] Note user attached to report.
         * @param {Array<string>} [tags] 
         * @param {CreateEventEnvironmentEnum} [eventEnvironment] The environment where the event took place.
         * @param {CreateEventMomentEnum} [eventMoment] The moment of the day when the event took place.
         * @param {CreateUserPerceivedMosquitoSpecieEnum} [userPerceivedMosquitoSpecie] The mosquito specie perceived by the user.
         * @param {CreateUserPerceivedMosquitoThoraxEnum} [userPerceivedMosquitoThorax] The species of mosquito that the thorax resembles, according to the user.
         * @param {CreateUserPerceivedMosquitoAbdomenEnum} [userPerceivedMosquitoAbdomen] The species of mosquito that the abdomen resembles, according to the user.
         * @param {CreateUserPerceivedMosquitoLegsEnum} [userPerceivedMosquitoLegs] The species of mosquito that the leg resembles, according to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(createdAt: string, sentAt: string, location: LocationRequest, photos: Array<SimplePhotoRequest>, note?: string | null, tags?: Array<string>, eventEnvironment?: CreateEventEnvironmentEnum, eventMoment?: CreateEventMomentEnum, userPerceivedMosquitoSpecie?: CreateUserPerceivedMosquitoSpecieEnum, userPerceivedMosquitoThorax?: CreateUserPerceivedMosquitoThoraxEnum, userPerceivedMosquitoAbdomen?: CreateUserPerceivedMosquitoAbdomenEnum, userPerceivedMosquitoLegs?: CreateUserPerceivedMosquitoLegsEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(createdAt, sentAt, location, photos, note, tags, eventEnvironment, eventMoment, userPerceivedMosquitoSpecie, userPerceivedMosquitoThorax, userPerceivedMosquitoAbdomen, userPerceivedMosquitoLegs, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObservationsApi.create']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destroy(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destroy(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObservationsApi.destroy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedObservationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(createdAtAfter, createdAtBefore, hasPhotos, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObservationsApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Current User\'s Observations
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMine(createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedObservationList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMine(createdAtAfter, createdAtBefore, hasPhotos, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObservationsApi.listMine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Observation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ObservationsApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ObservationsApi - factory interface
 * @export
 */
export const ObservationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObservationsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} createdAt 
         * @param {string} sentAt 
         * @param {LocationRequest} location 
         * @param {Array<SimplePhotoRequest>} photos 
         * @param {string | null} [note] Note user attached to report.
         * @param {Array<string>} [tags] 
         * @param {CreateEventEnvironmentEnum} [eventEnvironment] The environment where the event took place.
         * @param {CreateEventMomentEnum} [eventMoment] The moment of the day when the event took place.
         * @param {CreateUserPerceivedMosquitoSpecieEnum} [userPerceivedMosquitoSpecie] The mosquito specie perceived by the user.
         * @param {CreateUserPerceivedMosquitoThoraxEnum} [userPerceivedMosquitoThorax] The species of mosquito that the thorax resembles, according to the user.
         * @param {CreateUserPerceivedMosquitoAbdomenEnum} [userPerceivedMosquitoAbdomen] The species of mosquito that the abdomen resembles, according to the user.
         * @param {CreateUserPerceivedMosquitoLegsEnum} [userPerceivedMosquitoLegs] The species of mosquito that the leg resembles, according to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(createdAt: string, sentAt: string, location: LocationRequest, photos: Array<SimplePhotoRequest>, note?: string | null, tags?: Array<string>, eventEnvironment?: CreateEventEnvironmentEnum, eventMoment?: CreateEventMomentEnum, userPerceivedMosquitoSpecie?: CreateUserPerceivedMosquitoSpecieEnum, userPerceivedMosquitoThorax?: CreateUserPerceivedMosquitoThoraxEnum, userPerceivedMosquitoAbdomen?: CreateUserPerceivedMosquitoAbdomenEnum, userPerceivedMosquitoLegs?: CreateUserPerceivedMosquitoLegsEnum, options?: RawAxiosRequestConfig): AxiosPromise<Observation> {
            return localVarFp.create(createdAt, sentAt, location, photos, note, tags, eventEnvironment, eventMoment, userPerceivedMosquitoSpecie, userPerceivedMosquitoThorax, userPerceivedMosquitoAbdomen, userPerceivedMosquitoLegs, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroy(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.destroy(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedObservationList> {
            return localVarFp.list(createdAtAfter, createdAtBefore, hasPhotos, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Current User\'s Observations
         * @param {string} [createdAtAfter] Created at
         * @param {string} [createdAtBefore] Created at
         * @param {boolean} [hasPhotos] Has any photo
         * @param {number | null} [locationCountryId] 
         * @param {string} [locationNuts2] 
         * @param {string} [locationNuts3] 
         * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {string} [receivedAtAfter] Received at
         * @param {string} [receivedAtBefore] Received at
         * @param {string} [shortId] Short ID
         * @param {string} [updatedAtAfter] Update at
         * @param {string} [updatedAtBefore] Update at
         * @param {string} [userUuid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMine(createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedObservationList> {
            return localVarFp.listMine(createdAtAfter, createdAtBefore, hasPhotos, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Observation> {
            return localVarFp.retrieve(uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObservationsApi - object-oriented interface
 * @export
 * @class ObservationsApi
 * @extends {BaseAPI}
 */
export class ObservationsApi extends BaseAPI {
    /**
     * 
     * @param {string} createdAt 
     * @param {string} sentAt 
     * @param {LocationRequest} location 
     * @param {Array<SimplePhotoRequest>} photos 
     * @param {string | null} [note] Note user attached to report.
     * @param {Array<string>} [tags] 
     * @param {CreateEventEnvironmentEnum} [eventEnvironment] The environment where the event took place.
     * @param {CreateEventMomentEnum} [eventMoment] The moment of the day when the event took place.
     * @param {CreateUserPerceivedMosquitoSpecieEnum} [userPerceivedMosquitoSpecie] The mosquito specie perceived by the user.
     * @param {CreateUserPerceivedMosquitoThoraxEnum} [userPerceivedMosquitoThorax] The species of mosquito that the thorax resembles, according to the user.
     * @param {CreateUserPerceivedMosquitoAbdomenEnum} [userPerceivedMosquitoAbdomen] The species of mosquito that the abdomen resembles, according to the user.
     * @param {CreateUserPerceivedMosquitoLegsEnum} [userPerceivedMosquitoLegs] The species of mosquito that the leg resembles, according to the user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public create(createdAt: string, sentAt: string, location: LocationRequest, photos: Array<SimplePhotoRequest>, note?: string | null, tags?: Array<string>, eventEnvironment?: CreateEventEnvironmentEnum, eventMoment?: CreateEventMomentEnum, userPerceivedMosquitoSpecie?: CreateUserPerceivedMosquitoSpecieEnum, userPerceivedMosquitoThorax?: CreateUserPerceivedMosquitoThoraxEnum, userPerceivedMosquitoAbdomen?: CreateUserPerceivedMosquitoAbdomenEnum, userPerceivedMosquitoLegs?: CreateUserPerceivedMosquitoLegsEnum, options?: RawAxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).create(createdAt, sentAt, location, photos, note, tags, eventEnvironment, eventMoment, userPerceivedMosquitoSpecie, userPerceivedMosquitoThorax, userPerceivedMosquitoAbdomen, userPerceivedMosquitoLegs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public destroy(uuid: string, options?: RawAxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).destroy(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [createdAtAfter] Created at
     * @param {string} [createdAtBefore] Created at
     * @param {boolean} [hasPhotos] Has any photo
     * @param {number | null} [locationCountryId] 
     * @param {string} [locationNuts2] 
     * @param {string} [locationNuts3] 
     * @param {Array<ListOrderByEnum>} [orderBy] Ordenado  
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [receivedAtAfter] Received at
     * @param {string} [receivedAtBefore] Received at
     * @param {string} [shortId] Short ID
     * @param {string} [updatedAtAfter] Update at
     * @param {string} [updatedAtBefore] Update at
     * @param {string} [userUuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public list(createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).list(createdAtAfter, createdAtBefore, hasPhotos, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Current User\'s Observations
     * @param {string} [createdAtAfter] Created at
     * @param {string} [createdAtBefore] Created at
     * @param {boolean} [hasPhotos] Has any photo
     * @param {number | null} [locationCountryId] 
     * @param {string} [locationNuts2] 
     * @param {string} [locationNuts3] 
     * @param {Array<ListMineOrderByEnum>} [orderBy] Ordenado  
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {string} [receivedAtAfter] Received at
     * @param {string} [receivedAtBefore] Received at
     * @param {string} [shortId] Short ID
     * @param {string} [updatedAtAfter] Update at
     * @param {string} [updatedAtBefore] Update at
     * @param {string} [userUuid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public listMine(createdAtAfter?: string, createdAtBefore?: string, hasPhotos?: boolean, locationCountryId?: number | null, locationNuts2?: string, locationNuts3?: string, orderBy?: Array<ListMineOrderByEnum>, page?: number, pageSize?: number, receivedAtAfter?: string, receivedAtBefore?: string, shortId?: string, updatedAtAfter?: string, updatedAtBefore?: string, userUuid?: string, options?: RawAxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).listMine(createdAtAfter, createdAtBefore, hasPhotos, locationCountryId, locationNuts2, locationNuts3, orderBy, page, pageSize, receivedAtAfter, receivedAtBefore, shortId, updatedAtAfter, updatedAtBefore, userUuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObservationsApi
     */
    public retrieve(uuid: string, options?: RawAxiosRequestConfig) {
        return ObservationsApiFp(this.configuration).retrieve(uuid, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CreateEventEnvironmentEnum = {
    Indoors: 'indoors',
    Outdoors: 'outdoors',
    Vehicle: 'vehicle',
    Empty: ''
} as const;
export type CreateEventEnvironmentEnum = typeof CreateEventEnvironmentEnum[keyof typeof CreateEventEnvironmentEnum];
/**
 * @export
 */
export const CreateEventMomentEnum = {
    Now: 'now',
    LastMorning: 'last_morning',
    LastMidday: 'last_midday',
    LastAfternoon: 'last_afternoon',
    LastNight: 'last_night',
    Empty: ''
} as const;
export type CreateEventMomentEnum = typeof CreateEventMomentEnum[keyof typeof CreateEventMomentEnum];
/**
 * @export
 */
export const CreateUserPerceivedMosquitoSpecieEnum = {
    Albopictus: 'albopictus',
    Aegypti: 'aegypti',
    Japonicus: 'japonicus',
    Koreicus: 'koreicus',
    Culex: 'culex',
    Other: 'other',
    Empty: ''
} as const;
export type CreateUserPerceivedMosquitoSpecieEnum = typeof CreateUserPerceivedMosquitoSpecieEnum[keyof typeof CreateUserPerceivedMosquitoSpecieEnum];
/**
 * @export
 */
export const CreateUserPerceivedMosquitoThoraxEnum = {
    Albopictus: 'albopictus',
    Aegypti: 'aegypti',
    Japonicus: 'japonicus',
    Koreicus: 'koreicus',
    Culex: 'culex',
    Other: 'other',
    Empty: ''
} as const;
export type CreateUserPerceivedMosquitoThoraxEnum = typeof CreateUserPerceivedMosquitoThoraxEnum[keyof typeof CreateUserPerceivedMosquitoThoraxEnum];
/**
 * @export
 */
export const CreateUserPerceivedMosquitoAbdomenEnum = {
    Albopictus: 'albopictus',
    Aegypti: 'aegypti',
    Japonicus: 'japonicus',
    Koreicus: 'koreicus',
    Culex: 'culex',
    Other: 'other',
    Empty: ''
} as const;
export type CreateUserPerceivedMosquitoAbdomenEnum = typeof CreateUserPerceivedMosquitoAbdomenEnum[keyof typeof CreateUserPerceivedMosquitoAbdomenEnum];
/**
 * @export
 */
export const CreateUserPerceivedMosquitoLegsEnum = {
    Albopictus: 'albopictus',
    Aegypti: 'aegypti',
    Japonicus: 'japonicus',
    Koreicus: 'koreicus',
    Culex: 'culex',
    Other: 'other',
    Empty: ''
} as const;
export type CreateUserPerceivedMosquitoLegsEnum = typeof CreateUserPerceivedMosquitoLegsEnum[keyof typeof CreateUserPerceivedMosquitoLegsEnum];
/**
 * @export
 */
export const ListOrderByEnum = {
    CreatedAt: '-created_at',
    ReceivedAt: '-received_at',
    CreatedAt2: 'created_at',
    ReceivedAt2: 'received_at'
} as const;
export type ListOrderByEnum = typeof ListOrderByEnum[keyof typeof ListOrderByEnum];
/**
 * @export
 */
export const ListMineOrderByEnum = {
    CreatedAt: '-created_at',
    ReceivedAt: '-received_at',
    CreatedAt2: 'created_at',
    ReceivedAt2: 'received_at'
} as const;
export type ListMineOrderByEnum = typeof ListMineOrderByEnum[keyof typeof ListMineOrderByEnum];


/**
 * PartnersApi - axios parameter creator
 * @export
 */
export const PartnersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (page?: number, pageSize?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/partners/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this organization pin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('retrieve', 'id', id)
            const localVarPath = `/partners/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PartnersApi - functional programming interface
 * @export
 */
export const PartnersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PartnersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPartnerList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(page, pageSize, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartnersApi.list']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this organization pin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Partner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PartnersApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PartnersApi - factory interface
 * @export
 */
export const PartnersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PartnersApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [pageSize] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(page?: number, pageSize?: number, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedPartnerList> {
            return localVarFp.list(page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id A unique integer value identifying this organization pin.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Partner> {
            return localVarFp.retrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PartnersApi - object-oriented interface
 * @export
 * @class PartnersApi
 * @extends {BaseAPI}
 */
export class PartnersApi extends BaseAPI {
    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {number} [pageSize] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public list(page?: number, pageSize?: number, options?: RawAxiosRequestConfig) {
        return PartnersApiFp(this.configuration).list(page, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id A unique integer value identifying this organization pin.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PartnersApi
     */
    public retrieve(id: number, options?: RawAxiosRequestConfig) {
        return PartnersApiFp(this.configuration).retrieve(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PhotosApi - axios parameter creator
 * @export
 */
export const PhotosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('retrieve', 'uuid', uuid)
            const localVarPath = `/photos/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PhotosApi - functional programming interface
 * @export
 */
export const PhotosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PhotosApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Photo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PhotosApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PhotosApi - factory interface
 * @export
 */
export const PhotosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PhotosApiFp(configuration)
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<Photo> {
            return localVarFp.retrieve(uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PhotosApi - object-oriented interface
 * @export
 * @class PhotosApi
 * @extends {BaseAPI}
 */
export class PhotosApi extends BaseAPI {
    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PhotosApi
     */
    public retrieve(uuid: string, options?: RawAxiosRequestConfig) {
        return PhotosApiFp(this.configuration).retrieve(uuid, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {PatchedUserRequest} [patchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdate: async (uuid: string, patchedUserRequest?: PatchedUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('partialUpdate', 'uuid', uuid)
            const localVarPath = `/users/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('retrieve', 'uuid', uuid)
            const localVarPath = `/users/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Current User\'s Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMine: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UserRequest} [userRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (uuid: string, userRequest?: UserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('update', 'uuid', uuid)
            const localVarPath = `/users/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication cookieAuth required

            // authentication tokenAuth required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {PatchedUserRequest} [patchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async partialUpdate(uuid: string, patchedUserRequest?: PatchedUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.partialUpdate(uuid, patchedUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.partialUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieve(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieve(uuid, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.retrieve']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Current User\'s Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveMine(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveMine(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.retrieveMine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UserRequest} [userRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(uuid: string, userRequest?: UserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(uuid, userRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.update']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} uuid 
         * @param {PatchedUserRequest} [patchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdate(uuid: string, patchedUserRequest?: PatchedUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.partialUpdate(uuid, patchedUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieve(uuid: string, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.retrieve(uuid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Current User\'s Profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveMine(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.retrieveMine(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} uuid 
         * @param {UserRequest} [userRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(uuid: string, userRequest?: UserRequest, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.update(uuid, userRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {string} uuid 
     * @param {PatchedUserRequest} [patchedUserRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public partialUpdate(uuid: string, patchedUserRequest?: PatchedUserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).partialUpdate(uuid, patchedUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public retrieve(uuid: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).retrieve(uuid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Current User\'s Profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public retrieveMine(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).retrieveMine(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} uuid 
     * @param {UserRequest} [userRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public update(uuid: string, userRequest?: UserRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).update(uuid, userRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



